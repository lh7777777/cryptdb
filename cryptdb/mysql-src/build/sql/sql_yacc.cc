/* A Bison parser, made by GNU Bison 2.5.  */

/* Bison implementation for Yacc-like parsers in C
   
      Copyright (C) 1984, 1989-1990, 2000-2011 Free Software Foundation, Inc.
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.
   
   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.5"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yylval          MYSQLlval
#define yychar          MYSQLchar
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */

/* Line 268 of yacc.c  */
#line 23 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"

/* thd is passed as an argument to yyparse(), and subsequently to yylex().
** The type will be void*, so it must be  cast to (THD*) when used.
** Use the YYTHD macro for this.
*/
#define YYPARSE_PARAM yythd
#define YYLEX_PARAM yythd
#define YYTHD ((THD *)yythd)
#define YYLIP (& YYTHD->m_parser_state->m_lip)
#define YYPS (& YYTHD->m_parser_state->m_yacc)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (YYTHD->lex)
#define Select Lex->current_select
#include "sql_priv.h"
#include "unireg.h"                    // REQUIRED: for other includes
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Alter_table*_statement
#include "sql_truncate.h"                      // Truncate_statement
#include "sql_admin.h"                         // Analyze/Check..._table_stmt
#include "sql_partition_admin.h"               // Alter_table_*_partition_stmt
#include "sql_signal.h"
#include "event_parse_data.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror((char*) (A));                   \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(YYTHD);\
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(const char *s)
{
  THD *thd= current_thd;

  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label((char *)"", lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !test(i) ||
         sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!test(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable_t *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->dflt)
    it= spv->dflt;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_NO_WRITE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}



/* Line 268 of yacc.c  */
#line 787 "/home/zy/cryptdb/mysql-src/build/sql/sql_yacc.cc"

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     ABORT_SYM = 258,
     ACCESSIBLE_SYM = 259,
     ACTION = 260,
     ADD = 261,
     ADDDATE_SYM = 262,
     AFTER_SYM = 263,
     AGAINST = 264,
     AGGREGATE_SYM = 265,
     ALGORITHM_SYM = 266,
     ALL = 267,
     ALTER = 268,
     ANALYZE_SYM = 269,
     AND_AND_SYM = 270,
     AND_SYM = 271,
     ANY_SYM = 272,
     AS = 273,
     ASC = 274,
     ASCII_SYM = 275,
     ASENSITIVE_SYM = 276,
     AT_SYM = 277,
     AUTHORS_SYM = 278,
     AUTOEXTEND_SIZE_SYM = 279,
     AUTO_INC = 280,
     AVG_ROW_LENGTH = 281,
     AVG_SYM = 282,
     BACKUP_SYM = 283,
     BEFORE_SYM = 284,
     BEGIN_SYM = 285,
     BETWEEN_SYM = 286,
     BIGINT = 287,
     BINARY = 288,
     BINLOG_SYM = 289,
     BIN_NUM = 290,
     BIT_AND = 291,
     BIT_OR = 292,
     BIT_SYM = 293,
     BIT_XOR = 294,
     BLOB_SYM = 295,
     BLOCK_SYM = 296,
     BOOLEAN_SYM = 297,
     BOOL_SYM = 298,
     BOTH = 299,
     BTREE_SYM = 300,
     BY = 301,
     BYTE_SYM = 302,
     CACHE_SYM = 303,
     CALL_SYM = 304,
     CASCADE = 305,
     CASCADED = 306,
     CASE_SYM = 307,
     CAST_SYM = 308,
     CATALOG_NAME_SYM = 309,
     CHAIN_SYM = 310,
     CHANGE = 311,
     CHANGED = 312,
     CHARSET = 313,
     CHAR_SYM = 314,
     CHECKSUM_SYM = 315,
     CHECK_SYM = 316,
     CIPHER_SYM = 317,
     CLASS_ORIGIN_SYM = 318,
     CLIENT_SYM = 319,
     CLOSE_SYM = 320,
     COALESCE = 321,
     CODE_SYM = 322,
     COLLATE_SYM = 323,
     COLLATION_SYM = 324,
     COLUMNS = 325,
     COLUMN_SYM = 326,
     COLUMN_NAME_SYM = 327,
     COMMENT_SYM = 328,
     COMMITTED_SYM = 329,
     COMMIT_SYM = 330,
     COMPACT_SYM = 331,
     COMPLETION_SYM = 332,
     COMPRESSED_SYM = 333,
     CONCURRENT = 334,
     CONDITION_SYM = 335,
     CONNECTION_SYM = 336,
     CONSISTENT_SYM = 337,
     CONSTRAINT = 338,
     CONSTRAINT_CATALOG_SYM = 339,
     CONSTRAINT_NAME_SYM = 340,
     CONSTRAINT_SCHEMA_SYM = 341,
     CONTAINS_SYM = 342,
     CONTEXT_SYM = 343,
     CONTINUE_SYM = 344,
     CONTRIBUTORS_SYM = 345,
     CONVERT_SYM = 346,
     COUNT_SYM = 347,
     CPU_SYM = 348,
     CREATE = 349,
     CROSS = 350,
     CUBE_SYM = 351,
     CURDATE = 352,
     CURRENT_USER = 353,
     CURSOR_SYM = 354,
     CURSOR_NAME_SYM = 355,
     CURTIME = 356,
     DATABASE = 357,
     DATABASES = 358,
     DATAFILE_SYM = 359,
     DATA_SYM = 360,
     DATETIME = 361,
     DATE_ADD_INTERVAL = 362,
     DATE_SUB_INTERVAL = 363,
     DATE_SYM = 364,
     DAY_HOUR_SYM = 365,
     DAY_MICROSECOND_SYM = 366,
     DAY_MINUTE_SYM = 367,
     DAY_SECOND_SYM = 368,
     DAY_SYM = 369,
     DEALLOCATE_SYM = 370,
     DECIMAL_NUM = 371,
     DECIMAL_SYM = 372,
     DECLARE_SYM = 373,
     DEFAULT = 374,
     DEFINER_SYM = 375,
     DELAYED_SYM = 376,
     DELAY_KEY_WRITE_SYM = 377,
     DELETE_SYM = 378,
     DESC = 379,
     DESCRIBE = 380,
     DES_KEY_FILE = 381,
     DETERMINISTIC_SYM = 382,
     DIRECTORY_SYM = 383,
     DISABLE_SYM = 384,
     DISCARD = 385,
     DISK_SYM = 386,
     DISTINCT = 387,
     DIV_SYM = 388,
     DOUBLE_SYM = 389,
     DO_SYM = 390,
     DROP = 391,
     DUAL_SYM = 392,
     DUMPFILE = 393,
     DUPLICATE_SYM = 394,
     DYNAMIC_SYM = 395,
     EACH_SYM = 396,
     ELSE = 397,
     ELSEIF_SYM = 398,
     ENABLE_SYM = 399,
     ENC_SYM = 400,
     ENCLOSED = 401,
     END = 402,
     ENDS_SYM = 403,
     END_OF_INPUT = 404,
     ENGINES_SYM = 405,
     ENGINE_SYM = 406,
     ENUM = 407,
     EQ = 408,
     EQUAL_SYM = 409,
     ERROR_SYM = 410,
     ERRORS = 411,
     ESCAPED = 412,
     ESCAPE_SYM = 413,
     EVENTS_SYM = 414,
     EVENT_SYM = 415,
     EVERY_SYM = 416,
     EXECUTE_SYM = 417,
     EXISTS = 418,
     EXIT_SYM = 419,
     EXPANSION_SYM = 420,
     EXTENDED_SYM = 421,
     EXTENT_SIZE_SYM = 422,
     EXTRACT_SYM = 423,
     FALSE_SYM = 424,
     FAST_SYM = 425,
     FAULTS_SYM = 426,
     FETCH_SYM = 427,
     FILE_SYM = 428,
     FIRST_SYM = 429,
     FIXED_SYM = 430,
     FLOAT_NUM = 431,
     FLOAT_SYM = 432,
     FLUSH_SYM = 433,
     FORCE_SYM = 434,
     FOREIGN = 435,
     FOR_SYM = 436,
     FOUND_SYM = 437,
     FROM = 438,
     FULL = 439,
     FULLTEXT_SYM = 440,
     FUNCTION_SYM = 441,
     GE = 442,
     GENERAL = 443,
     GEOMETRYCOLLECTION = 444,
     GEOMETRY_SYM = 445,
     GET_FORMAT = 446,
     GLOBAL_SYM = 447,
     GRANT = 448,
     GRANTS = 449,
     GROUP_SYM = 450,
     GROUP_CONCAT_SYM = 451,
     GT_SYM = 452,
     HANDLER_SYM = 453,
     HASH_SYM = 454,
     HAVING = 455,
     HELP_SYM = 456,
     HEX_NUM = 457,
     HIGH_PRIORITY = 458,
     HOST_SYM = 459,
     HOSTS_SYM = 460,
     HOUR_MICROSECOND_SYM = 461,
     HOUR_MINUTE_SYM = 462,
     HOUR_SECOND_SYM = 463,
     HOUR_SYM = 464,
     IDENT = 465,
     IDENTIFIED_SYM = 466,
     IDENT_QUOTED = 467,
     IF = 468,
     IGNORE_SYM = 469,
     IGNORE_SERVER_IDS_SYM = 470,
     IMPORT = 471,
     INDEXES = 472,
     INDEX_SYM = 473,
     INFILE = 474,
     INITIAL_SIZE_SYM = 475,
     INNER_SYM = 476,
     INOUT_SYM = 477,
     INSENSITIVE_SYM = 478,
     INSERT = 479,
     INSERT_METHOD = 480,
     INSTALL_SYM = 481,
     INTERVAL_SYM = 482,
     INTO = 483,
     INT_SYM = 484,
     INVOKER_SYM = 485,
     IN_SYM = 486,
     IO_SYM = 487,
     IPC_SYM = 488,
     IS = 489,
     ISOLATION = 490,
     ISSUER_SYM = 491,
     ITERATE_SYM = 492,
     JOIN_SYM = 493,
     KEYS = 494,
     KEY_BLOCK_SIZE = 495,
     KEY_SYM = 496,
     KILL_SYM = 497,
     LANGUAGE_SYM = 498,
     LAST_SYM = 499,
     LE = 500,
     LEADING = 501,
     LEAVES = 502,
     LEAVE_SYM = 503,
     LEFT = 504,
     LESS_SYM = 505,
     LEVEL_SYM = 506,
     LEX_HOSTNAME = 507,
     LIKE = 508,
     LIMIT = 509,
     LINEAR_SYM = 510,
     LINES = 511,
     LINESTRING = 512,
     LIST_SYM = 513,
     LOAD = 514,
     LOCAL_SYM = 515,
     LOCATOR_SYM = 516,
     LOCKS_SYM = 517,
     LOCK_SYM = 518,
     LOGFILE_SYM = 519,
     LOGS_SYM = 520,
     LONGBLOB = 521,
     LONGTEXT = 522,
     LONG_NUM = 523,
     LONG_SYM = 524,
     LOOP_SYM = 525,
     LOW_PRIORITY = 526,
     LT = 527,
     MASTER_CONNECT_RETRY_SYM = 528,
     MASTER_HOST_SYM = 529,
     MASTER_LOG_FILE_SYM = 530,
     MASTER_LOG_POS_SYM = 531,
     MASTER_PASSWORD_SYM = 532,
     MASTER_PORT_SYM = 533,
     MASTER_SERVER_ID_SYM = 534,
     MASTER_SSL_CAPATH_SYM = 535,
     MASTER_SSL_CA_SYM = 536,
     MASTER_SSL_CERT_SYM = 537,
     MASTER_SSL_CIPHER_SYM = 538,
     MASTER_SSL_KEY_SYM = 539,
     MASTER_SSL_SYM = 540,
     MASTER_SSL_VERIFY_SERVER_CERT_SYM = 541,
     MASTER_SYM = 542,
     MASTER_USER_SYM = 543,
     MASTER_HEARTBEAT_PERIOD_SYM = 544,
     MATCH = 545,
     MAX_CONNECTIONS_PER_HOUR = 546,
     MAX_QUERIES_PER_HOUR = 547,
     MAX_ROWS = 548,
     MAX_SIZE_SYM = 549,
     MAX_SYM = 550,
     MAX_UPDATES_PER_HOUR = 551,
     MAX_USER_CONNECTIONS_SYM = 552,
     MAX_VALUE_SYM = 553,
     MEDIUMBLOB = 554,
     MEDIUMINT = 555,
     MEDIUMTEXT = 556,
     MEDIUM_SYM = 557,
     MEMORY_SYM = 558,
     MERGE_SYM = 559,
     MESSAGE_TEXT_SYM = 560,
     MICROSECOND_SYM = 561,
     MIGRATE_SYM = 562,
     MINUTE_MICROSECOND_SYM = 563,
     MINUTE_SECOND_SYM = 564,
     MINUTE_SYM = 565,
     MIN_ROWS = 566,
     MIN_SYM = 567,
     MODE_SYM = 568,
     MODIFIES_SYM = 569,
     MODIFY_SYM = 570,
     MOD_SYM = 571,
     MONTH_SYM = 572,
     MULTILINESTRING = 573,
     MULTIPOINT = 574,
     MULTIPOLYGON = 575,
     MUTEX_SYM = 576,
     MYSQL_ERRNO_SYM = 577,
     NAMES_SYM = 578,
     NAME_SYM = 579,
     NATIONAL_SYM = 580,
     NATURAL = 581,
     NCHAR_STRING = 582,
     NCHAR_SYM = 583,
     NDBCLUSTER_SYM = 584,
     NE = 585,
     NEG = 586,
     NEW_SYM = 587,
     NEXT_SYM = 588,
     NODEGROUP_SYM = 589,
     NONE_SYM = 590,
     NOT2_SYM = 591,
     NOT_SYM = 592,
     NOW_SYM = 593,
     NO_SYM = 594,
     NO_WAIT_SYM = 595,
     NO_WRITE_TO_BINLOG = 596,
     NULL_SYM = 597,
     NUM = 598,
     NUMERIC_SYM = 599,
     NVARCHAR_SYM = 600,
     OFFSET_SYM = 601,
     OLD_PASSWORD = 602,
     ON = 603,
     ONE_SHOT_SYM = 604,
     ONE_SYM = 605,
     OPEN_SYM = 606,
     OPTIMIZE = 607,
     OPTIONS_SYM = 608,
     OPTION = 609,
     OPTIONALLY = 610,
     OR2_SYM = 611,
     ORDER_SYM = 612,
     OR_OR_SYM = 613,
     OR_SYM = 614,
     OUTER = 615,
     OUTFILE = 616,
     OUT_SYM = 617,
     OWNER_SYM = 618,
     PACK_KEYS_SYM = 619,
     PAGE_SYM = 620,
     PARAM_MARKER = 621,
     PARSER_SYM = 622,
     PARTIAL = 623,
     PARTITIONING_SYM = 624,
     PARTITIONS_SYM = 625,
     PARTITION_SYM = 626,
     PASSWORD = 627,
     PHASE_SYM = 628,
     PLUGINS_SYM = 629,
     PLUGIN_SYM = 630,
     POINT_SYM = 631,
     POLYGON = 632,
     PORT_SYM = 633,
     POSITION_SYM = 634,
     PRECISION = 635,
     PREPARE_SYM = 636,
     PRESERVE_SYM = 637,
     PREV_SYM = 638,
     PRIMARY_SYM = 639,
     PRIVILEGES = 640,
     PROCEDURE_SYM = 641,
     PROCESS = 642,
     PROCESSLIST_SYM = 643,
     PROFILE_SYM = 644,
     PROFILES_SYM = 645,
     PROXY_SYM = 646,
     PURGE = 647,
     QUARTER_SYM = 648,
     QUERY_SYM = 649,
     QUICK = 650,
     RANGE_SYM = 651,
     READS_SYM = 652,
     READ_ONLY_SYM = 653,
     READ_SYM = 654,
     READ_WRITE_SYM = 655,
     REAL = 656,
     REBUILD_SYM = 657,
     RECOVER_SYM = 658,
     REDOFILE_SYM = 659,
     REDO_BUFFER_SIZE_SYM = 660,
     REDUNDANT_SYM = 661,
     REFERENCES = 662,
     REGEXP = 663,
     RELAY = 664,
     RELAYLOG_SYM = 665,
     RELAY_LOG_FILE_SYM = 666,
     RELAY_LOG_POS_SYM = 667,
     RELAY_THREAD = 668,
     RELEASE_SYM = 669,
     RELOAD = 670,
     REMOVE_SYM = 671,
     RENAME = 672,
     REORGANIZE_SYM = 673,
     REPAIR = 674,
     REPEATABLE_SYM = 675,
     REPEAT_SYM = 676,
     REPLACE = 677,
     REPLICATION = 678,
     REQUIRE_SYM = 679,
     RESET_SYM = 680,
     RESIGNAL_SYM = 681,
     RESOURCES = 682,
     RESTORE_SYM = 683,
     RESTRICT = 684,
     RESUME_SYM = 685,
     RETURNS_SYM = 686,
     RETURN_SYM = 687,
     REVOKE = 688,
     RIGHT = 689,
     ROLLBACK_SYM = 690,
     ROLLUP_SYM = 691,
     ROUTINE_SYM = 692,
     ROWS_SYM = 693,
     ROW_FORMAT_SYM = 694,
     ROW_SYM = 695,
     RTREE_SYM = 696,
     SAVEPOINT_SYM = 697,
     SCHEDULE_SYM = 698,
     SCHEMA_NAME_SYM = 699,
     SECOND_MICROSECOND_SYM = 700,
     SECOND_SYM = 701,
     SECURITY_SYM = 702,
     SELECT_SYM = 703,
     SENSITIVE_SYM = 704,
     SEPARATOR_SYM = 705,
     SERIALIZABLE_SYM = 706,
     SERIAL_SYM = 707,
     SESSION_SYM = 708,
     SERVER_SYM = 709,
     SERVER_OPTIONS = 710,
     SET = 711,
     SET_VAR = 712,
     SHARE_SYM = 713,
     SHIFT_LEFT = 714,
     SHIFT_RIGHT = 715,
     SHOW = 716,
     SHUTDOWN = 717,
     SIGNAL_SYM = 718,
     SIGNED_SYM = 719,
     SIMPLE_SYM = 720,
     SLAVE = 721,
     SLOW = 722,
     SMALLINT = 723,
     SNAPSHOT_SYM = 724,
     SOCKET_SYM = 725,
     SONAME_SYM = 726,
     SOUNDS_SYM = 727,
     SOURCE_SYM = 728,
     SPATIAL_SYM = 729,
     SPECIFIC_SYM = 730,
     SQLEXCEPTION_SYM = 731,
     SQLSTATE_SYM = 732,
     SQLWARNING_SYM = 733,
     SQL_BIG_RESULT = 734,
     SQL_BUFFER_RESULT = 735,
     SQL_CACHE_SYM = 736,
     SQL_CALC_FOUND_ROWS = 737,
     SQL_NO_CACHE_SYM = 738,
     SQL_SMALL_RESULT = 739,
     SQL_SYM = 740,
     SQL_THREAD = 741,
     SSL_SYM = 742,
     STARTING = 743,
     STARTS_SYM = 744,
     START_SYM = 745,
     STATUS_SYM = 746,
     STDDEV_SAMP_SYM = 747,
     STD_SYM = 748,
     STOP_SYM = 749,
     STORAGE_SYM = 750,
     STRAIGHT_JOIN = 751,
     STRING_SYM = 752,
     SUBCLASS_ORIGIN_SYM = 753,
     SUBDATE_SYM = 754,
     SUBJECT_SYM = 755,
     SUBPARTITIONS_SYM = 756,
     SUBPARTITION_SYM = 757,
     SUBSTRING = 758,
     SUM_SYM = 759,
     SUPER_SYM = 760,
     SUSPEND_SYM = 761,
     SWAPS_SYM = 762,
     SWITCHES_SYM = 763,
     SYSDATE = 764,
     TABLES = 765,
     TABLESPACE = 766,
     TABLE_REF_PRIORITY = 767,
     TABLE_SYM = 768,
     TABLE_CHECKSUM_SYM = 769,
     TABLE_NAME_SYM = 770,
     TEMPORARY = 771,
     TEMPTABLE_SYM = 772,
     TERMINATED = 773,
     TEXT_STRING = 774,
     TEXT_SYM = 775,
     THAN_SYM = 776,
     THEN_SYM = 777,
     TIMESTAMP = 778,
     TIMESTAMP_ADD = 779,
     TIMESTAMP_DIFF = 780,
     TIME_SYM = 781,
     TINYBLOB = 782,
     TINYINT = 783,
     TINYTEXT = 784,
     TO_SYM = 785,
     TRAILING = 786,
     TRANSACTION_SYM = 787,
     TRIGGERS_SYM = 788,
     TRIGGER_SYM = 789,
     TRIM = 790,
     TRUE_SYM = 791,
     TRUNCATE_SYM = 792,
     TYPES_SYM = 793,
     TYPE_SYM = 794,
     UDF_RETURNS_SYM = 795,
     ULONGLONG_NUM = 796,
     UNCOMMITTED_SYM = 797,
     UNDEFINED_SYM = 798,
     UNDERSCORE_CHARSET = 799,
     UNDOFILE_SYM = 800,
     UNDO_BUFFER_SIZE_SYM = 801,
     UNDO_SYM = 802,
     UNICODE_SYM = 803,
     UNINSTALL_SYM = 804,
     UNION_SYM = 805,
     UNIQUE_SYM = 806,
     UNKNOWN_SYM = 807,
     UNLOCK_SYM = 808,
     UNSIGNED = 809,
     UNTIL_SYM = 810,
     UPDATE_SYM = 811,
     UPGRADE_SYM = 812,
     USAGE = 813,
     USER = 814,
     USE_FRM = 815,
     USE_SYM = 816,
     USING = 817,
     UTC_DATE_SYM = 818,
     UTC_TIMESTAMP_SYM = 819,
     UTC_TIME_SYM = 820,
     VALUES = 821,
     VALUE_SYM = 822,
     VARBINARY = 823,
     VARCHAR = 824,
     VARIABLES = 825,
     VARIANCE_SYM = 826,
     VARYING = 827,
     VAR_SAMP_SYM = 828,
     VIEW_SYM = 829,
     WAIT_SYM = 830,
     WARNINGS = 831,
     WEEK_SYM = 832,
     WHEN_SYM = 833,
     WHERE = 834,
     WHILE_SYM = 835,
     WITH = 836,
     WITH_CUBE_SYM = 837,
     WITH_ROLLUP_SYM = 838,
     WORK_SYM = 839,
     WRAPPER_SYM = 840,
     WRITE_SYM = 841,
     X509_SYM = 842,
     XA_SYM = 843,
     XML_SYM = 844,
     XOR = 845,
     YEAR_MONTH_SYM = 846,
     YEAR_SYM = 847,
     ZEROFILL = 848
   };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADDDATE_SYM 262
#define AFTER_SYM 263
#define AGAINST 264
#define AGGREGATE_SYM 265
#define ALGORITHM_SYM 266
#define ALL 267
#define ALTER 268
#define ANALYZE_SYM 269
#define AND_AND_SYM 270
#define AND_SYM 271
#define ANY_SYM 272
#define AS 273
#define ASC 274
#define ASCII_SYM 275
#define ASENSITIVE_SYM 276
#define AT_SYM 277
#define AUTHORS_SYM 278
#define AUTOEXTEND_SIZE_SYM 279
#define AUTO_INC 280
#define AVG_ROW_LENGTH 281
#define AVG_SYM 282
#define BACKUP_SYM 283
#define BEFORE_SYM 284
#define BEGIN_SYM 285
#define BETWEEN_SYM 286
#define BIGINT 287
#define BINARY 288
#define BINLOG_SYM 289
#define BIN_NUM 290
#define BIT_AND 291
#define BIT_OR 292
#define BIT_SYM 293
#define BIT_XOR 294
#define BLOB_SYM 295
#define BLOCK_SYM 296
#define BOOLEAN_SYM 297
#define BOOL_SYM 298
#define BOTH 299
#define BTREE_SYM 300
#define BY 301
#define BYTE_SYM 302
#define CACHE_SYM 303
#define CALL_SYM 304
#define CASCADE 305
#define CASCADED 306
#define CASE_SYM 307
#define CAST_SYM 308
#define CATALOG_NAME_SYM 309
#define CHAIN_SYM 310
#define CHANGE 311
#define CHANGED 312
#define CHARSET 313
#define CHAR_SYM 314
#define CHECKSUM_SYM 315
#define CHECK_SYM 316
#define CIPHER_SYM 317
#define CLASS_ORIGIN_SYM 318
#define CLIENT_SYM 319
#define CLOSE_SYM 320
#define COALESCE 321
#define CODE_SYM 322
#define COLLATE_SYM 323
#define COLLATION_SYM 324
#define COLUMNS 325
#define COLUMN_SYM 326
#define COLUMN_NAME_SYM 327
#define COMMENT_SYM 328
#define COMMITTED_SYM 329
#define COMMIT_SYM 330
#define COMPACT_SYM 331
#define COMPLETION_SYM 332
#define COMPRESSED_SYM 333
#define CONCURRENT 334
#define CONDITION_SYM 335
#define CONNECTION_SYM 336
#define CONSISTENT_SYM 337
#define CONSTRAINT 338
#define CONSTRAINT_CATALOG_SYM 339
#define CONSTRAINT_NAME_SYM 340
#define CONSTRAINT_SCHEMA_SYM 341
#define CONTAINS_SYM 342
#define CONTEXT_SYM 343
#define CONTINUE_SYM 344
#define CONTRIBUTORS_SYM 345
#define CONVERT_SYM 346
#define COUNT_SYM 347
#define CPU_SYM 348
#define CREATE 349
#define CROSS 350
#define CUBE_SYM 351
#define CURDATE 352
#define CURRENT_USER 353
#define CURSOR_SYM 354
#define CURSOR_NAME_SYM 355
#define CURTIME 356
#define DATABASE 357
#define DATABASES 358
#define DATAFILE_SYM 359
#define DATA_SYM 360
#define DATETIME 361
#define DATE_ADD_INTERVAL 362
#define DATE_SUB_INTERVAL 363
#define DATE_SYM 364
#define DAY_HOUR_SYM 365
#define DAY_MICROSECOND_SYM 366
#define DAY_MINUTE_SYM 367
#define DAY_SECOND_SYM 368
#define DAY_SYM 369
#define DEALLOCATE_SYM 370
#define DECIMAL_NUM 371
#define DECIMAL_SYM 372
#define DECLARE_SYM 373
#define DEFAULT 374
#define DEFINER_SYM 375
#define DELAYED_SYM 376
#define DELAY_KEY_WRITE_SYM 377
#define DELETE_SYM 378
#define DESC 379
#define DESCRIBE 380
#define DES_KEY_FILE 381
#define DETERMINISTIC_SYM 382
#define DIRECTORY_SYM 383
#define DISABLE_SYM 384
#define DISCARD 385
#define DISK_SYM 386
#define DISTINCT 387
#define DIV_SYM 388
#define DOUBLE_SYM 389
#define DO_SYM 390
#define DROP 391
#define DUAL_SYM 392
#define DUMPFILE 393
#define DUPLICATE_SYM 394
#define DYNAMIC_SYM 395
#define EACH_SYM 396
#define ELSE 397
#define ELSEIF_SYM 398
#define ENABLE_SYM 399
#define ENC_SYM 400
#define ENCLOSED 401
#define END 402
#define ENDS_SYM 403
#define END_OF_INPUT 404
#define ENGINES_SYM 405
#define ENGINE_SYM 406
#define ENUM 407
#define EQ 408
#define EQUAL_SYM 409
#define ERROR_SYM 410
#define ERRORS 411
#define ESCAPED 412
#define ESCAPE_SYM 413
#define EVENTS_SYM 414
#define EVENT_SYM 415
#define EVERY_SYM 416
#define EXECUTE_SYM 417
#define EXISTS 418
#define EXIT_SYM 419
#define EXPANSION_SYM 420
#define EXTENDED_SYM 421
#define EXTENT_SIZE_SYM 422
#define EXTRACT_SYM 423
#define FALSE_SYM 424
#define FAST_SYM 425
#define FAULTS_SYM 426
#define FETCH_SYM 427
#define FILE_SYM 428
#define FIRST_SYM 429
#define FIXED_SYM 430
#define FLOAT_NUM 431
#define FLOAT_SYM 432
#define FLUSH_SYM 433
#define FORCE_SYM 434
#define FOREIGN 435
#define FOR_SYM 436
#define FOUND_SYM 437
#define FROM 438
#define FULL 439
#define FULLTEXT_SYM 440
#define FUNCTION_SYM 441
#define GE 442
#define GENERAL 443
#define GEOMETRYCOLLECTION 444
#define GEOMETRY_SYM 445
#define GET_FORMAT 446
#define GLOBAL_SYM 447
#define GRANT 448
#define GRANTS 449
#define GROUP_SYM 450
#define GROUP_CONCAT_SYM 451
#define GT_SYM 452
#define HANDLER_SYM 453
#define HASH_SYM 454
#define HAVING 455
#define HELP_SYM 456
#define HEX_NUM 457
#define HIGH_PRIORITY 458
#define HOST_SYM 459
#define HOSTS_SYM 460
#define HOUR_MICROSECOND_SYM 461
#define HOUR_MINUTE_SYM 462
#define HOUR_SECOND_SYM 463
#define HOUR_SYM 464
#define IDENT 465
#define IDENTIFIED_SYM 466
#define IDENT_QUOTED 467
#define IF 468
#define IGNORE_SYM 469
#define IGNORE_SERVER_IDS_SYM 470
#define IMPORT 471
#define INDEXES 472
#define INDEX_SYM 473
#define INFILE 474
#define INITIAL_SIZE_SYM 475
#define INNER_SYM 476
#define INOUT_SYM 477
#define INSENSITIVE_SYM 478
#define INSERT 479
#define INSERT_METHOD 480
#define INSTALL_SYM 481
#define INTERVAL_SYM 482
#define INTO 483
#define INT_SYM 484
#define INVOKER_SYM 485
#define IN_SYM 486
#define IO_SYM 487
#define IPC_SYM 488
#define IS 489
#define ISOLATION 490
#define ISSUER_SYM 491
#define ITERATE_SYM 492
#define JOIN_SYM 493
#define KEYS 494
#define KEY_BLOCK_SIZE 495
#define KEY_SYM 496
#define KILL_SYM 497
#define LANGUAGE_SYM 498
#define LAST_SYM 499
#define LE 500
#define LEADING 501
#define LEAVES 502
#define LEAVE_SYM 503
#define LEFT 504
#define LESS_SYM 505
#define LEVEL_SYM 506
#define LEX_HOSTNAME 507
#define LIKE 508
#define LIMIT 509
#define LINEAR_SYM 510
#define LINES 511
#define LINESTRING 512
#define LIST_SYM 513
#define LOAD 514
#define LOCAL_SYM 515
#define LOCATOR_SYM 516
#define LOCKS_SYM 517
#define LOCK_SYM 518
#define LOGFILE_SYM 519
#define LOGS_SYM 520
#define LONGBLOB 521
#define LONGTEXT 522
#define LONG_NUM 523
#define LONG_SYM 524
#define LOOP_SYM 525
#define LOW_PRIORITY 526
#define LT 527
#define MASTER_CONNECT_RETRY_SYM 528
#define MASTER_HOST_SYM 529
#define MASTER_LOG_FILE_SYM 530
#define MASTER_LOG_POS_SYM 531
#define MASTER_PASSWORD_SYM 532
#define MASTER_PORT_SYM 533
#define MASTER_SERVER_ID_SYM 534
#define MASTER_SSL_CAPATH_SYM 535
#define MASTER_SSL_CA_SYM 536
#define MASTER_SSL_CERT_SYM 537
#define MASTER_SSL_CIPHER_SYM 538
#define MASTER_SSL_KEY_SYM 539
#define MASTER_SSL_SYM 540
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 541
#define MASTER_SYM 542
#define MASTER_USER_SYM 543
#define MASTER_HEARTBEAT_PERIOD_SYM 544
#define MATCH 545
#define MAX_CONNECTIONS_PER_HOUR 546
#define MAX_QUERIES_PER_HOUR 547
#define MAX_ROWS 548
#define MAX_SIZE_SYM 549
#define MAX_SYM 550
#define MAX_UPDATES_PER_HOUR 551
#define MAX_USER_CONNECTIONS_SYM 552
#define MAX_VALUE_SYM 553
#define MEDIUMBLOB 554
#define MEDIUMINT 555
#define MEDIUMTEXT 556
#define MEDIUM_SYM 557
#define MEMORY_SYM 558
#define MERGE_SYM 559
#define MESSAGE_TEXT_SYM 560
#define MICROSECOND_SYM 561
#define MIGRATE_SYM 562
#define MINUTE_MICROSECOND_SYM 563
#define MINUTE_SECOND_SYM 564
#define MINUTE_SYM 565
#define MIN_ROWS 566
#define MIN_SYM 567
#define MODE_SYM 568
#define MODIFIES_SYM 569
#define MODIFY_SYM 570
#define MOD_SYM 571
#define MONTH_SYM 572
#define MULTILINESTRING 573
#define MULTIPOINT 574
#define MULTIPOLYGON 575
#define MUTEX_SYM 576
#define MYSQL_ERRNO_SYM 577
#define NAMES_SYM 578
#define NAME_SYM 579
#define NATIONAL_SYM 580
#define NATURAL 581
#define NCHAR_STRING 582
#define NCHAR_SYM 583
#define NDBCLUSTER_SYM 584
#define NE 585
#define NEG 586
#define NEW_SYM 587
#define NEXT_SYM 588
#define NODEGROUP_SYM 589
#define NONE_SYM 590
#define NOT2_SYM 591
#define NOT_SYM 592
#define NOW_SYM 593
#define NO_SYM 594
#define NO_WAIT_SYM 595
#define NO_WRITE_TO_BINLOG 596
#define NULL_SYM 597
#define NUM 598
#define NUMERIC_SYM 599
#define NVARCHAR_SYM 600
#define OFFSET_SYM 601
#define OLD_PASSWORD 602
#define ON 603
#define ONE_SHOT_SYM 604
#define ONE_SYM 605
#define OPEN_SYM 606
#define OPTIMIZE 607
#define OPTIONS_SYM 608
#define OPTION 609
#define OPTIONALLY 610
#define OR2_SYM 611
#define ORDER_SYM 612
#define OR_OR_SYM 613
#define OR_SYM 614
#define OUTER 615
#define OUTFILE 616
#define OUT_SYM 617
#define OWNER_SYM 618
#define PACK_KEYS_SYM 619
#define PAGE_SYM 620
#define PARAM_MARKER 621
#define PARSER_SYM 622
#define PARTIAL 623
#define PARTITIONING_SYM 624
#define PARTITIONS_SYM 625
#define PARTITION_SYM 626
#define PASSWORD 627
#define PHASE_SYM 628
#define PLUGINS_SYM 629
#define PLUGIN_SYM 630
#define POINT_SYM 631
#define POLYGON 632
#define PORT_SYM 633
#define POSITION_SYM 634
#define PRECISION 635
#define PREPARE_SYM 636
#define PRESERVE_SYM 637
#define PREV_SYM 638
#define PRIMARY_SYM 639
#define PRIVILEGES 640
#define PROCEDURE_SYM 641
#define PROCESS 642
#define PROCESSLIST_SYM 643
#define PROFILE_SYM 644
#define PROFILES_SYM 645
#define PROXY_SYM 646
#define PURGE 647
#define QUARTER_SYM 648
#define QUERY_SYM 649
#define QUICK 650
#define RANGE_SYM 651
#define READS_SYM 652
#define READ_ONLY_SYM 653
#define READ_SYM 654
#define READ_WRITE_SYM 655
#define REAL 656
#define REBUILD_SYM 657
#define RECOVER_SYM 658
#define REDOFILE_SYM 659
#define REDO_BUFFER_SIZE_SYM 660
#define REDUNDANT_SYM 661
#define REFERENCES 662
#define REGEXP 663
#define RELAY 664
#define RELAYLOG_SYM 665
#define RELAY_LOG_FILE_SYM 666
#define RELAY_LOG_POS_SYM 667
#define RELAY_THREAD 668
#define RELEASE_SYM 669
#define RELOAD 670
#define REMOVE_SYM 671
#define RENAME 672
#define REORGANIZE_SYM 673
#define REPAIR 674
#define REPEATABLE_SYM 675
#define REPEAT_SYM 676
#define REPLACE 677
#define REPLICATION 678
#define REQUIRE_SYM 679
#define RESET_SYM 680
#define RESIGNAL_SYM 681
#define RESOURCES 682
#define RESTORE_SYM 683
#define RESTRICT 684
#define RESUME_SYM 685
#define RETURNS_SYM 686
#define RETURN_SYM 687
#define REVOKE 688
#define RIGHT 689
#define ROLLBACK_SYM 690
#define ROLLUP_SYM 691
#define ROUTINE_SYM 692
#define ROWS_SYM 693
#define ROW_FORMAT_SYM 694
#define ROW_SYM 695
#define RTREE_SYM 696
#define SAVEPOINT_SYM 697
#define SCHEDULE_SYM 698
#define SCHEMA_NAME_SYM 699
#define SECOND_MICROSECOND_SYM 700
#define SECOND_SYM 701
#define SECURITY_SYM 702
#define SELECT_SYM 703
#define SENSITIVE_SYM 704
#define SEPARATOR_SYM 705
#define SERIALIZABLE_SYM 706
#define SERIAL_SYM 707
#define SESSION_SYM 708
#define SERVER_SYM 709
#define SERVER_OPTIONS 710
#define SET 711
#define SET_VAR 712
#define SHARE_SYM 713
#define SHIFT_LEFT 714
#define SHIFT_RIGHT 715
#define SHOW 716
#define SHUTDOWN 717
#define SIGNAL_SYM 718
#define SIGNED_SYM 719
#define SIMPLE_SYM 720
#define SLAVE 721
#define SLOW 722
#define SMALLINT 723
#define SNAPSHOT_SYM 724
#define SOCKET_SYM 725
#define SONAME_SYM 726
#define SOUNDS_SYM 727
#define SOURCE_SYM 728
#define SPATIAL_SYM 729
#define SPECIFIC_SYM 730
#define SQLEXCEPTION_SYM 731
#define SQLSTATE_SYM 732
#define SQLWARNING_SYM 733
#define SQL_BIG_RESULT 734
#define SQL_BUFFER_RESULT 735
#define SQL_CACHE_SYM 736
#define SQL_CALC_FOUND_ROWS 737
#define SQL_NO_CACHE_SYM 738
#define SQL_SMALL_RESULT 739
#define SQL_SYM 740
#define SQL_THREAD 741
#define SSL_SYM 742
#define STARTING 743
#define STARTS_SYM 744
#define START_SYM 745
#define STATUS_SYM 746
#define STDDEV_SAMP_SYM 747
#define STD_SYM 748
#define STOP_SYM 749
#define STORAGE_SYM 750
#define STRAIGHT_JOIN 751
#define STRING_SYM 752
#define SUBCLASS_ORIGIN_SYM 753
#define SUBDATE_SYM 754
#define SUBJECT_SYM 755
#define SUBPARTITIONS_SYM 756
#define SUBPARTITION_SYM 757
#define SUBSTRING 758
#define SUM_SYM 759
#define SUPER_SYM 760
#define SUSPEND_SYM 761
#define SWAPS_SYM 762
#define SWITCHES_SYM 763
#define SYSDATE 764
#define TABLES 765
#define TABLESPACE 766
#define TABLE_REF_PRIORITY 767
#define TABLE_SYM 768
#define TABLE_CHECKSUM_SYM 769
#define TABLE_NAME_SYM 770
#define TEMPORARY 771
#define TEMPTABLE_SYM 772
#define TERMINATED 773
#define TEXT_STRING 774
#define TEXT_SYM 775
#define THAN_SYM 776
#define THEN_SYM 777
#define TIMESTAMP 778
#define TIMESTAMP_ADD 779
#define TIMESTAMP_DIFF 780
#define TIME_SYM 781
#define TINYBLOB 782
#define TINYINT 783
#define TINYTEXT 784
#define TO_SYM 785
#define TRAILING 786
#define TRANSACTION_SYM 787
#define TRIGGERS_SYM 788
#define TRIGGER_SYM 789
#define TRIM 790
#define TRUE_SYM 791
#define TRUNCATE_SYM 792
#define TYPES_SYM 793
#define TYPE_SYM 794
#define UDF_RETURNS_SYM 795
#define ULONGLONG_NUM 796
#define UNCOMMITTED_SYM 797
#define UNDEFINED_SYM 798
#define UNDERSCORE_CHARSET 799
#define UNDOFILE_SYM 800
#define UNDO_BUFFER_SIZE_SYM 801
#define UNDO_SYM 802
#define UNICODE_SYM 803
#define UNINSTALL_SYM 804
#define UNION_SYM 805
#define UNIQUE_SYM 806
#define UNKNOWN_SYM 807
#define UNLOCK_SYM 808
#define UNSIGNED 809
#define UNTIL_SYM 810
#define UPDATE_SYM 811
#define UPGRADE_SYM 812
#define USAGE 813
#define USER 814
#define USE_FRM 815
#define USE_SYM 816
#define USING 817
#define UTC_DATE_SYM 818
#define UTC_TIMESTAMP_SYM 819
#define UTC_TIME_SYM 820
#define VALUES 821
#define VALUE_SYM 822
#define VARBINARY 823
#define VARCHAR 824
#define VARIABLES 825
#define VARIANCE_SYM 826
#define VARYING 827
#define VAR_SAMP_SYM 828
#define VIEW_SYM 829
#define WAIT_SYM 830
#define WARNINGS 831
#define WEEK_SYM 832
#define WHEN_SYM 833
#define WHERE 834
#define WHILE_SYM 835
#define WITH 836
#define WITH_CUBE_SYM 837
#define WITH_ROLLUP_SYM 838
#define WORK_SYM 839
#define WRAPPER_SYM 840
#define WRITE_SYM 841
#define X509_SYM 842
#define XA_SYM 843
#define XML_SYM 844
#define XOR 845
#define YEAR_MONTH_SYM 846
#define YEAR_SYM 847
#define ZEROFILL 848




#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
{

/* Line 293 of yacc.c  */
#line 729 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  struct sp_cond_type *spcondtype;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;



/* Line 293 of yacc.c  */
#line 2059 "/home/zy/cryptdb/mysql-src/build/sql/sql_yacc.cc"
} YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
#endif


/* Copy the second part of user declarations.  */

/* Line 343 of yacc.c  */
#line 777 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);


/* Line 343 of yacc.c  */
#line 2076 "/home/zy/cryptdb/mysql-src/build/sql/sql_yacc.cc"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int yyi)
#else
static int
YYID (yyi)
    int yyi;
#endif
{
  return yyi;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
	Stack = &yyptr->Stack_alloc;					\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  573
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   50072

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  613
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  883
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2490
/* YYNRULES -- Number of states.  */
#define YYNSTATES  4234

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   848

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   606,     2,     2,     2,   600,   595,     2,
     603,   604,   598,   597,   605,   596,   611,   599,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   612,   609,
       2,     2,     2,     2,   610,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   601,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   607,   594,   608,   602,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     6,    11,    14,    15,    17,    19,
      21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
      41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
      61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
      81,    83,    85,    87,    89,    91,    93,    95,    97,    99,
     101,   103,   105,   107,   109,   111,   113,   115,   117,   119,
     121,   123,   127,   129,   131,   136,   138,   141,   142,   147,
     148,   151,   155,   157,   160,   161,   165,   166,   172,   174,
     178,   182,   186,   190,   194,   198,   202,   206,   210,   214,
     218,   222,   226,   230,   236,   238,   239,   241,   245,   247,
     251,   255,   259,   263,   264,   272,   273,   286,   287,   300,
     301,   314,   315,   322,   323,   327,   332,   337,   341,   344,
     355,   357,   361,   364,   367,   370,   373,   376,   379,   382,
     383,   397,   398,   405,   408,   409,   411,   415,   417,   418,
     421,   422,   425,   426,   428,   432,   437,   438,   441,   442,
     445,   447,   449,   451,   453,   455,   457,   459,   461,   463,
     465,   467,   469,   471,   472,   476,   478,   479,   482,   483,
     486,   489,   492,   495,   498,   502,   506,   508,   510,   512,
     515,   519,   523,   524,   529,   530,   534,   535,   537,   541,
     543,   544,   546,   550,   552,   553,   557,   558,   560,   564,
     566,   571,   572,   574,   576,   578,   579,   583,   586,   590,
     591,   595,   596,   602,   608,   609,   617,   623,   624,   627,
     629,   631,   633,   637,   639,   641,   643,   647,   648,   650,
     652,   654,   656,   659,   661,   665,   667,   669,   670,   672,
     673,   676,   680,   686,   688,   690,   692,   694,   696,   698,
     700,   702,   704,   706,   708,   710,   712,   714,   716,   720,
     722,   726,   727,   730,   732,   734,   736,   738,   740,   742,
     744,   746,   748,   750,   752,   754,   756,   757,   763,   764,
     767,   768,   772,   773,   776,   779,   782,   785,   786,   793,
     796,   797,   800,   802,   804,   808,   809,   810,   811,   819,
     820,   823,   826,   828,   830,   831,   832,   841,   842,   849,
     851,   854,   856,   859,   860,   861,   868,   869,   870,   877,
     878,   881,   882,   888,   889,   891,   892,   898,   899,   902,
     903,   909,   914,   915,   916,   925,   926,   934,   936,   938,
     940,   942,   944,   947,   952,   958,   959,   964,   969,   974,
     978,   982,   985,   988,   989,   992,   994,   997,  1001,  1003,
    1005,  1007,  1009,  1011,  1014,  1018,  1020,  1022,  1024,  1026,
    1028,  1030,  1032,  1034,  1036,  1038,  1041,  1045,  1047,  1049,
    1051,  1053,  1055,  1057,  1059,  1062,  1066,  1068,  1070,  1072,
    1074,  1076,  1078,  1080,  1082,  1084,  1087,  1091,  1093,  1095,
    1097,  1100,  1103,  1106,  1108,  1110,  1112,  1114,  1117,  1121,
    1125,  1129,  1133,  1137,  1141,  1145,  1149,  1154,  1155,  1157,
    1159,  1161,  1163,  1165,  1168,  1172,  1175,  1180,  1186,  1187,
    1193,  1194,  1195,  1201,  1202,  1210,  1212,  1213,  1215,  1216,
    1221,  1222,  1223,  1227,  1233,  1239,  1240,  1245,  1248,  1251,
    1254,  1257,  1258,  1260,  1261,  1263,  1265,  1269,  1271,  1276,
    1282,  1288,  1289,  1292,  1293,  1294,  1302,  1303,  1313,  1315,
    1319,  1321,  1323,  1324,  1327,  1328,  1332,  1334,  1338,  1339,
    1346,  1348,  1349,  1350,  1356,  1357,  1362,  1364,  1366,  1368,
    1372,  1374,  1378,  1379,  1380,  1386,  1388,  1392,  1394,  1396,
    1397,  1401,  1403,  1407,  1408,  1413,  1415,  1416,  1418,  1421,
    1423,  1427,  1432,  1436,  1440,  1444,  1449,  1454,  1458,  1459,
    1460,  1467,  1468,  1470,  1471,  1473,  1475,  1478,  1480,  1482,
    1483,  1485,  1487,  1490,  1492,  1493,  1497,  1498,  1500,  1502,
    1505,  1507,  1510,  1514,  1518,  1522,  1526,  1530,  1534,  1538,
    1542,  1546,  1550,  1554,  1558,  1562,  1566,  1567,  1574,  1576,
    1578,  1582,  1587,  1592,  1595,  1598,  1601,  1605,  1609,  1614,
    1619,  1621,  1623,  1625,  1627,  1629,  1631,  1633,  1635,  1637,
    1639,  1641,  1643,  1646,  1648,  1650,  1652,  1654,  1656,  1658,
    1662,  1664,  1666,  1669,  1672,  1680,  1689,  1698,  1707,  1716,
    1719,  1720,  1722,  1727,  1728,  1730,  1733,  1734,  1739,  1743,
    1747,  1751,  1753,  1756,  1758,  1760,  1764,  1767,  1771,  1774,
    1777,  1779,  1783,  1787,  1790,  1794,  1796,  1798,  1800,  1802,
    1804,  1807,  1809,  1811,  1813,  1816,  1820,  1823,  1827,  1830,
    1833,  1837,  1841,  1845,  1846,  1853,  1854,  1861,  1864,  1866,
    1868,  1870,  1872,  1874,  1876,  1878,  1880,  1882,  1884,  1886,
    1889,  1892,  1894,  1897,  1899,  1902,  1906,  1909,  1911,  1913,
    1915,  1917,  1919,  1921,  1923,  1926,  1927,  1929,  1931,  1937,
    1938,  1940,  1943,  1945,  1947,  1949,  1951,  1955,  1959,  1963,
    1967,  1968,  1970,  1971,  1973,  1974,  1976,  1979,  1981,  1983,
    1986,  1989,  1991,  1995,  2000,  2002,  2006,  2009,  2011,  2014,
    2017,  2020,  2023,  2026,  2028,  2031,  2033,  2035,  2037,  2039,
    2041,  2042,  2045,  2047,  2049,  2051,  2053,  2055,  2056,  2059,
    2061,  2063,  2064,  2066,  2068,  2071,  2074,  2076,  2079,  2082,
    2083,  2085,  2087,  2089,  2093,  2095,  2099,  2100,  2102,  2103,
    2105,  2111,  2112,  2116,  2120,  2122,  2123,  2126,  2129,  2132,
    2133,  2137,  2141,  2148,  2155,  2157,  2159,  2162,  2165,  2168,
    2170,  2173,  2176,  2178,  2180,  2181,  2183,  2185,  2187,  2189,
    2190,  2192,  2194,  2196,  2197,  2199,  2202,  2203,  2205,  2206,
    2208,  2209,  2211,  2213,  2216,  2218,  2221,  2223,  2226,  2229,
    2232,  2236,  2239,  2241,  2243,  2245,  2247,  2251,  2253,  2255,
    2257,  2262,  2265,  2267,  2272,  2273,  2275,  2276,  2279,  2281,
    2285,  2286,  2293,  2294,  2300,  2308,  2309,  2315,  2316,  2322,
    2323,  2329,  2330,  2335,  2336,  2347,  2351,  2356,  2360,  2364,
    2372,  2373,  2377,  2379,  2384,  2385,  2389,  2390,  2393,  2394,
    2396,  2397,  2400,  2403,  2406,  2409,  2411,  2413,  2415,  2419,
    2424,  2425,  2432,  2437,  2438,  2444,  2445,  2452,  2457,  2461,
    2463,  2466,  2468,  2470,  2471,  2477,  2478,  2482,  2485,  2486,
    2492,  2493,  2494,  2501,  2503,  2507,  2509,  2511,  2515,  2518,
    2522,  2525,  2530,  2531,  2538,  2539,  2540,  2549,  2554,  2559,
    2563,  2567,  2570,  2573,  2580,  2586,  2590,  2596,  2598,  2600,
    2602,  2603,  2605,  2606,  2608,  2609,  2611,  2613,  2614,  2617,
    2619,  2620,  2622,  2624,  2626,  2627,  2633,  2637,  2638,  2644,
    2648,  2652,  2653,  2657,  2658,  2661,  2663,  2667,  2668,  2670,
    2672,  2673,  2676,  2678,  2682,  2683,  2689,  2690,  2692,  2694,
    2695,  2702,  2703,  2705,  2707,  2710,  2712,  2714,  2716,  2717,
    2723,  2726,  2727,  2733,  2734,  2736,  2738,  2741,  2743,  2745,
    2747,  2749,  2751,  2754,  2755,  2761,  2762,  2764,  2766,  2767,
    2772,  2777,  2781,  2787,  2789,  2793,  2797,  2798,  2805,  2807,
    2809,  2811,  2815,  2818,  2822,  2824,  2826,  2827,  2834,  2836,
    2838,  2840,  2844,  2848,  2853,  2854,  2861,  2862,  2865,  2866,
    2871,  2872,  2875,  2877,  2880,  2885,  2888,  2892,  2895,  2899,
    2900,  2904,  2905,  2906,  2913,  2916,  2918,  2920,  2923,  2926,
    2935,  2940,  2941,  2943,  2946,  2948,  2950,  2952,  2954,  2955,
    2958,  2963,  2967,  2969,  2971,  2975,  2980,  2981,  2982,  2983,
    2986,  2989,  2991,  2993,  2994,  2997,  3001,  3005,  3009,  3012,
    3016,  3021,  3025,  3030,  3034,  3039,  3041,  3045,  3050,  3054,
    3058,  3065,  3067,  3073,  3080,  3086,  3094,  3101,  3110,  3116,
    3123,  3128,  3133,  3139,  3143,  3148,  3150,  3154,  3158,  3162,
    3166,  3170,  3174,  3180,  3186,  3190,  3194,  3198,  3202,  3206,
    3210,  3212,  3214,  3216,  3218,  3220,  3222,  3224,  3226,  3228,
    3230,  3232,  3234,  3236,  3238,  3240,  3242,  3244,  3246,  3248,
    3250,  3252,  3254,  3258,  3260,  3262,  3264,  3266,  3270,  3273,
    3276,  3279,  3282,  3286,  3290,  3296,  3303,  3308,  3313,  3321,
    3324,  3331,  3337,  3344,  3351,  3356,  3361,  3367,  3372,  3379,
    3382,  3387,  3392,  3397,  3408,  3415,  3424,  3431,  3436,  3441,
    3448,  3453,  3458,  3463,  3470,  3475,  3483,  3491,  3499,  3506,
    3513,  3520,  3527,  3531,  3536,  3543,  3552,  3555,  3558,  3563,
    3572,  3581,  3588,  3595,  3598,  3603,  3610,  3617,  3626,  3635,
    3642,  3651,  3658,  3661,  3666,  3675,  3684,  3687,  3690,  3693,
    3698,  3703,  3708,  3713,  3717,  3726,  3731,  3738,  3743,  3748,
    3753,  3760,  3769,  3776,  3781,  3788,  3790,  3797,  3802,  3807,
    3812,  3817,  3822,  3829,  3834,  3835,  3841,  3848,  3851,  3855,
    3856,  3861,  3862,  3866,  3867,  3869,  3871,  3875,  3880,  3885,
    3891,  3896,  3901,  3906,  3912,  3917,  3918,  3919,  3927,  3932,
    3938,  3943,  3949,  3954,  3959,  3964,  3969,  3974,  3980,  3981,
    3990,  3991,  3995,  3999,  4001,  4006,  4007,  4009,  4010,  4013,
    4014,  4016,  4017,  4021,  4024,  4028,  4031,  4033,  4036,  4038,
    4041,  4043,  4045,  4047,  4050,  4051,  4053,  4055,  4059,  4061,
    4065,  4067,  4071,  4072,  4074,  4075,  4078,  4083,  4089,  4091,
    4093,  4095,  4097,  4102,  4104,  4108,  4112,  4116,  4117,  4124,
    4125,  4132,  4133,  4142,  4147,  4148,  4157,  4158,  4169,  4176,
    4177,  4186,  4187,  4198,  4205,  4207,  4210,  4213,  4214,  4219,
    4223,  4229,  4232,  4233,  4234,  4242,  4244,  4245,  4246,  4253,
    4254,  4258,  4259,  4260,  4266,  4267,  4269,  4270,  4272,  4273,
    4276,  4280,  4284,  4286,  4288,  4289,  4297,  4298,  4306,  4308,
    4311,  4312,  4313,  4316,  4317,  4320,  4321,  4323,  4325,  4327,
    4329,  4333,  4335,  4339,  4341,  4343,  4345,  4347,  4349,  4351,
    4353,  4355,  4357,  4359,  4361,  4363,  4365,  4367,  4369,  4371,
    4373,  4375,  4377,  4379,  4381,  4383,  4385,  4387,  4389,  4390,
    4392,  4394,  4395,  4398,  4399,  4401,  4402,  4403,  4407,  4408,
    4409,  4413,  4416,  4417,  4418,  4423,  4428,  4431,  4432,  4434,
    4436,  4440,  4444,  4446,  4449,  4450,  4452,  4453,  4458,  4463,
    4466,  4467,  4469,  4471,  4472,  4474,  4475,  4477,  4480,  4482,
    4486,  4490,  4492,  4494,  4496,  4498,  4500,  4501,  4504,  4506,
    4508,  4510,  4512,  4514,  4516,  4518,  4520,  4522,  4524,  4526,
    4528,  4530,  4532,  4534,  4536,  4538,  4540,  4542,  4544,  4546,
    4548,  4550,  4551,  4552,  4559,  4560,  4562,  4566,  4568,  4572,
    4573,  4576,  4580,  4582,  4585,  4587,  4588,  4592,  4593,  4594,
    4602,  4605,  4607,  4608,  4612,  4613,  4621,  4622,  4629,  4634,
    4641,  4646,  4651,  4656,  4657,  4664,  4669,  4674,  4680,  4687,
    4692,  4694,  4698,  4700,  4702,  4706,  4708,  4709,  4712,  4713,
    4715,  4716,  4717,  4726,  4727,  4728,  4735,  4736,  4738,  4740,
    4742,  4744,  4746,  4749,  4751,  4753,  4755,  4759,  4764,  4765,
    4769,  4773,  4775,  4778,  4781,  4782,  4786,  4787,  4793,  4797,
    4799,  4803,  4805,  4809,  4811,  4813,  4814,  4816,  4817,  4822,
    4823,  4825,  4829,  4831,  4833,  4835,  4836,  4837,  4844,  4845,
    4846,  4858,  4862,  4864,  4868,  4872,  4874,  4878,  4879,  4881,
    4882,  4887,  4888,  4895,  4896,  4902,  4903,  4910,  4912,  4916,
    4919,  4924,  4925,  4928,  4929,  4932,  4934,  4936,  4938,  4939,
    4944,  4945,  4947,  4948,  4950,  4952,  4956,  4958,  4960,  4963,
    4966,  4969,  4971,  4973,  4975,  4977,  4978,  4982,  4983,  4987,
    4990,  4995,  5000,  5004,  5009,  5014,  5016,  5020,  5024,  5031,
    5034,  5037,  5038,  5045,  5046,  5053,  5059,  5062,  5064,  5066,
    5068,  5074,  5080,  5083,  5086,  5088,  5093,  5097,  5100,  5104,
    5107,  5110,  5112,  5116,  5121,  5125,  5129,  5132,  5135,  5139,
    5143,  5147,  5151,  5155,  5159,  5163,  5167,  5169,  5171,  5173,
    5175,  5177,  5178,  5180,  5181,  5184,  5185,  5187,  5189,  5191,
    5192,  5195,  5196,  5199,  5200,  5203,  5206,  5207,  5212,  5213,
    5218,  5220,  5222,  5223,  5225,  5227,  5228,  5230,  5232,  5233,
    5238,  5239,  5240,  5246,  5248,  5249,  5253,  5257,  5259,  5262,
    5265,  5268,  5271,  5274,  5277,  5280,  5282,  5284,  5286,  5288,
    5290,  5292,  5294,  5296,  5297,  5299,  5300,  5304,  5308,  5310,
    5312,  5314,  5317,  5318,  5322,  5326,  5329,  5332,  5336,  5337,
    5339,  5341,  5344,  5345,  5346,  5347,  5348,  5370,  5372,  5374,
    5375,  5377,  5378,  5380,  5382,  5383,  5385,  5387,  5388,  5391,
    5394,  5396,  5400,  5405,  5409,  5413,  5414,  5417,  5420,  5422,
    5426,  5430,  5431,  5436,  5437,  5441,  5443,  5445,  5446,  5450,
    5453,  5457,  5459,  5461,  5464,  5465,  5468,  5472,  5474,  5480,
    5482,  5484,  5487,  5490,  5492,  5494,  5496,  5498,  5500,  5503,
    5506,  5508,  5510,  5512,  5514,  5516,  5518,  5520,  5523,  5526,
    5529,  5532,  5535,  5537,  5539,  5541,  5543,  5545,  5547,  5549,
    5553,  5559,  5561,  5563,  5565,  5567,  5569,  5573,  5578,  5584,
    5586,  5592,  5596,  5599,  5601,  5605,  5608,  5611,  5616,  5618,
    5620,  5622,  5624,  5626,  5628,  5630,  5632,  5634,  5636,  5638,
    5640,  5642,  5644,  5648,  5651,  5653,  5655,  5657,  5659,  5661,
    5663,  5665,  5667,  5669,  5671,  5673,  5675,  5677,  5679,  5681,
    5683,  5685,  5687,  5689,  5691,  5693,  5695,  5697,  5699,  5701,
    5703,  5705,  5707,  5709,  5711,  5713,  5715,  5717,  5719,  5721,
    5723,  5725,  5727,  5729,  5731,  5733,  5735,  5737,  5739,  5741,
    5743,  5745,  5747,  5749,  5751,  5753,  5755,  5757,  5759,  5761,
    5763,  5765,  5767,  5769,  5771,  5773,  5775,  5777,  5779,  5781,
    5783,  5785,  5787,  5789,  5791,  5793,  5795,  5797,  5799,  5801,
    5803,  5805,  5807,  5809,  5811,  5813,  5815,  5817,  5819,  5821,
    5823,  5825,  5827,  5829,  5831,  5833,  5835,  5837,  5839,  5841,
    5843,  5845,  5847,  5849,  5851,  5853,  5855,  5857,  5859,  5861,
    5863,  5865,  5867,  5869,  5871,  5873,  5875,  5877,  5879,  5881,
    5883,  5885,  5887,  5889,  5891,  5893,  5895,  5897,  5899,  5901,
    5903,  5905,  5907,  5909,  5911,  5913,  5915,  5917,  5919,  5921,
    5923,  5925,  5927,  5929,  5931,  5933,  5935,  5937,  5939,  5941,
    5943,  5945,  5947,  5949,  5951,  5953,  5955,  5957,  5959,  5961,
    5963,  5965,  5967,  5969,  5971,  5973,  5975,  5977,  5979,  5981,
    5983,  5985,  5987,  5989,  5991,  5993,  5995,  5997,  5999,  6001,
    6003,  6005,  6007,  6009,  6011,  6013,  6015,  6017,  6019,  6021,
    6023,  6025,  6027,  6029,  6031,  6033,  6035,  6037,  6039,  6041,
    6043,  6045,  6047,  6049,  6051,  6053,  6055,  6057,  6059,  6061,
    6063,  6065,  6067,  6069,  6071,  6073,  6075,  6077,  6079,  6081,
    6083,  6085,  6087,  6089,  6091,  6093,  6095,  6097,  6099,  6101,
    6103,  6105,  6107,  6109,  6111,  6113,  6115,  6117,  6119,  6121,
    6123,  6125,  6127,  6129,  6131,  6133,  6135,  6137,  6139,  6141,
    6143,  6145,  6147,  6149,  6151,  6153,  6155,  6157,  6159,  6161,
    6163,  6165,  6167,  6169,  6171,  6173,  6175,  6177,  6179,  6181,
    6183,  6185,  6187,  6189,  6191,  6193,  6195,  6197,  6199,  6201,
    6203,  6205,  6207,  6209,  6211,  6213,  6215,  6217,  6219,  6221,
    6223,  6225,  6227,  6229,  6231,  6233,  6235,  6237,  6239,  6241,
    6243,  6245,  6247,  6249,  6251,  6253,  6255,  6257,  6259,  6261,
    6263,  6265,  6267,  6269,  6271,  6273,  6275,  6277,  6279,  6281,
    6283,  6285,  6287,  6289,  6291,  6293,  6295,  6297,  6299,  6301,
    6303,  6305,  6307,  6308,  6313,  6314,  6316,  6318,  6322,  6323,
    6326,  6328,  6330,  6332,  6334,  6335,  6337,  6338,  6340,  6342,
    6344,  6345,  6348,  6351,  6354,  6356,  6359,  6364,  6370,  6375,
    6382,  6385,  6389,  6393,  6397,  6403,  6405,  6409,  6413,  6416,
    6419,  6422,  6424,  6426,  6431,  6436,  6438,  6440,  6442,  6444,
    6446,  6447,  6452,  6454,  6456,  6458,  6462,  6466,  6468,  6470,
    6473,  6476,  6477,  6481,  6486,  6490,  6491,  6499,  6501,  6504,
    6506,  6508,  6510,  6512,  6514,  6516,  6517,  6523,  6525,  6527,
    6529,  6531,  6533,  6537,  6544,  6551,  6558,  6566,  6572,  6576,
    6585,  6594,  6603,  6610,  6611,  6613,  6615,  6618,  6619,  6621,
    6623,  6627,  6628,  6632,  6633,  6637,  6638,  6642,  6643,  6647,
    6649,  6651,  6653,  6655,  6657,  6659,  6661,  6663,  6665,  6667,
    6669,  6672,  6675,  6677,  6681,  6684,  6687,  6690,  6693,  6696,
    6699,  6702,  6705,  6707,  6709,  6712,  6713,  6715,  6719,  6721,
    6724,  6727,  6730,  6732,  6736,  6740,  6742,  6744,  6748,  6750,
    6754,  6759,  6765,  6770,  6777,  6779,  6780,  6784,  6788,  6790,
    6792,  6793,  6796,  6799,  6802,  6805,  6806,  6809,  6810,  6814,
    6817,  6819,  6822,  6825,  6828,  6831,  6834,  6835,  6839,  6840,
    6842,  6843,  6847,  6850,  6851,  6853,  6856,  6857,  6859,  6864,
    6869,  6875,  6878,  6882,  6883,  6885,  6886,  6891,  6892,  6894,
    6896,  6897,  6899,  6900,  6903,  6906,  6908,  6909,  6911,  6913,
    6916,  6920,  6923,  6924,  6931,  6935,  6936,  6937,  6938,  6940,
    6943,  6945,  6947,  6949,  6951,  6953,  6955,  6957,  6959,  6961,
    6964,  6967,  6971,  6973,  6975,  6977,  6979,  6981,  6983,  6985,
    6987,  6989,  6991,  6993,  6995,  6997,  6998,  7002,  7004,  7007,
    7009,  7012,  7016,  7020,  7024,  7025,  7029,  7033,  7034,  7042,
    7043,  7047,  7049,  7053,  7054,  7058,  7061,  7066,  7067,  7071,
    7076,  7081,  7082,  7083,  7084,  7101,  7110,  7118,  7119,  7120,
    7121,  7122,  7123,  7139,  7140,  7141,  7142,  7143,  7156,  7161,
    7166,  7170,  7175,  7179,  7182,  7184,  7188,  7194,  7196,  7198,
    7199,  7201,  7203,  7204,  7207,  7208,  7209,  7213,  7214,  7217,
    7223
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
     614,     0,    -1,   149,    -1,    -1,   617,   615,   609,   616,
      -1,   617,   149,    -1,    -1,   149,    -1,   618,    -1,  1424,
      -1,   960,    -1,  1017,    -1,  1019,    -1,   667,    -1,   630,
      -1,  1020,    -1,  1009,    -1,  1430,    -1,   637,    -1,   619,
      -1,  1256,    -1,  1288,    -1,  1208,    -1,  1210,    -1,   623,
      -1,  1294,    -1,  1398,    -1,  1389,    -1,   628,    -1,  1220,
      -1,  1494,    -1,  1311,    -1,  1314,    -1,  1381,    -1,  1025,
      -1,  1033,    -1,   810,    -1,  1040,    -1,   621,    -1,  1307,
      -1,  1433,    -1,  1028,    -1,  1012,    -1,  1223,    -1,  1303,
      -1,   702,    -1,  1396,    -1,  1431,    -1,  1432,    -1,  1052,
      -1,  1364,    -1,   695,    -1,  1274,    -1,   998,    -1,  1001,
      -1,  1267,    -1,  1495,    -1,  1387,    -1,  1248,    -1,  1313,
      -1,  1486,    -1,   620,   381,  1358,    -1,   115,    -1,   136,
      -1,   381,  1358,   183,   622,    -1,  1355,    -1,   610,  1360,
      -1,    -1,   162,  1358,   624,   625,    -1,    -1,   562,   626,
      -1,   626,   605,   627,    -1,   627,    -1,   610,  1360,    -1,
      -1,   201,   629,  1360,    -1,    -1,    56,   287,   530,   631,
     632,    -1,   633,    -1,   632,   605,   633,    -1,   274,   153,
    1355,    -1,   288,   153,  1355,    -1,   277,   153,  1355,    -1,
     278,   153,  1188,    -1,   273,   153,  1188,    -1,   285,   153,
    1188,    -1,   281,   153,  1355,    -1,   280,   153,  1355,    -1,
     282,   153,  1355,    -1,   283,   153,  1355,    -1,   284,   153,
    1355,    -1,   286,   153,  1188,    -1,   289,   153,  1343,    -1,
     215,   153,   603,   634,   604,    -1,   636,    -1,    -1,   635,
      -1,   634,   605,   635,    -1,  1188,    -1,   275,   153,  1355,
      -1,   276,   153,  1190,    -1,   411,   153,  1355,    -1,   412,
     153,  1188,    -1,    -1,    94,   861,   513,   864,  1351,   638,
     799,    -1,    -1,    94,   938,   218,  1358,   942,   348,  1351,
     639,   603,   955,   604,   943,    -1,    -1,    94,   939,   218,
    1358,   941,   348,  1351,   640,   603,   955,   604,   944,    -1,
      -1,    94,   940,   218,  1358,   941,   348,  1351,   641,   603,
     955,   604,   945,    -1,    -1,    94,   102,   864,  1358,   642,
     858,    -1,    -1,    94,   643,  1452,    -1,    94,   559,   660,
    1414,    -1,    94,   264,   195,   762,    -1,    94,   511,   759,
      -1,    94,   644,    -1,   454,  1360,   180,   105,   585,  1360,
     353,   603,   645,   604,    -1,   646,    -1,   645,   605,   646,
      -1,   559,  1355,    -1,   204,  1355,    -1,   102,  1355,    -1,
     363,  1355,    -1,   372,  1355,    -1,   470,  1355,    -1,   378,
    1188,    -1,    -1,  1069,   160,   864,   661,   648,   348,   443,
     649,   654,   651,   656,   135,   657,    -1,    -1,   161,  1073,
    1160,   650,   652,   653,    -1,    22,  1073,    -1,    -1,   144,
      -1,   129,   348,   466,    -1,   129,    -1,    -1,   489,  1073,
      -1,    -1,   148,  1073,    -1,    -1,   655,    -1,   348,    77,
     382,    -1,   348,    77,   337,   382,    -1,    -1,    73,  1355,
      -1,    -1,   658,   659,    -1,   708,    -1,   710,    -1,   706,
      -1,   727,    -1,   745,    -1,   747,    -1,   742,    -1,   712,
      -1,   714,    -1,   715,    -1,   716,    -1,   717,    -1,   719,
      -1,    -1,  1358,   611,  1358,    -1,  1358,    -1,    -1,   662,
     664,    -1,    -1,   663,   665,    -1,    73,  1355,    -1,   243,
     485,    -1,   339,   485,    -1,    87,   485,    -1,   397,   485,
     105,    -1,   314,   485,   105,    -1,   666,    -1,   664,    -1,
     127,    -1,  1079,   127,    -1,   485,   447,   120,    -1,   485,
     447,   230,    -1,    -1,    49,   661,   668,   669,    -1,    -1,
     603,   670,   604,    -1,    -1,   671,    -1,   671,   605,  1073,
      -1,  1073,    -1,    -1,   673,    -1,   673,   605,   675,    -1,
     675,    -1,    -1,  1358,   674,   910,    -1,    -1,   677,    -1,
     677,   605,   678,    -1,   678,    -1,   679,   674,  1358,   910,
      -1,    -1,   231,    -1,   362,    -1,   222,    -1,    -1,   680,
     705,   609,    -1,   705,   609,    -1,   681,   705,   609,    -1,
      -1,   682,   683,   609,    -1,    -1,   118,   703,   684,   910,
     704,    -1,   118,  1358,    80,   181,   691,    -1,    -1,   118,
     688,   198,   181,   685,   689,   705,    -1,   118,  1358,    99,
     181,   686,    -1,    -1,   687,  1052,    -1,   164,    -1,    89,
      -1,   690,    -1,   689,   605,   690,    -1,   694,    -1,  1188,
      -1,   692,    -1,   477,   693,  1356,    -1,    -1,   567,    -1,
     691,    -1,  1358,    -1,   478,    -1,  1079,   182,    -1,   476,
      -1,   463,   696,   698,    -1,  1358,    -1,   692,    -1,    -1,
     696,    -1,    -1,   456,   699,    -1,   701,   153,   700,    -1,
     699,   605,   701,   153,   700,    -1,  1342,    -1,  1100,    -1,
    1347,    -1,    63,    -1,   498,    -1,    84,    -1,    86,    -1,
      85,    -1,    54,    -1,   444,    -1,   515,    -1,    72,    -1,
     100,    -1,   305,    -1,   322,    -1,   426,   697,   698,    -1,
    1358,    -1,   703,   605,  1358,    -1,    -1,   119,  1073,    -1,
     708,    -1,   710,    -1,   706,    -1,   727,    -1,   745,    -1,
     747,    -1,   742,    -1,   712,    -1,   714,    -1,   715,    -1,
     716,    -1,   717,    -1,   719,    -1,    -1,   213,   707,   722,
     147,   213,    -1,    -1,   709,   618,    -1,    -1,   432,   711,
    1073,    -1,    -1,   713,   751,    -1,   248,  1359,    -1,   237,
    1359,    -1,   351,  1358,    -1,    -1,   172,   720,  1358,   228,
     718,   721,    -1,    65,  1358,    -1,    -1,   333,   183,    -1,
     183,    -1,  1358,    -1,   721,   605,  1358,    -1,    -1,    -1,
      -1,   723,  1073,   522,   724,   681,   725,   726,    -1,    -1,
     143,   722,    -1,   142,   681,    -1,   728,    -1,   731,    -1,
      -1,    -1,    52,   729,  1073,   730,   733,   741,   147,    52,
      -1,    -1,    52,   732,   734,   741,   147,    52,    -1,   735,
      -1,   733,   735,    -1,   738,    -1,   734,   738,    -1,    -1,
      -1,   578,   736,  1073,   737,   522,   681,    -1,    -1,    -1,
     578,   739,  1073,   740,   522,   681,    -1,    -1,   142,   681,
      -1,    -1,  1359,   612,   743,   751,   744,    -1,    -1,  1359,
      -1,    -1,  1359,   612,   746,   749,   744,    -1,    -1,   748,
     749,    -1,    -1,    30,   750,   682,   680,   147,    -1,   270,
     681,   147,   270,    -1,    -1,    -1,   580,   752,  1073,   135,
     753,   681,   147,   580,    -1,    -1,   421,   681,   555,   754,
    1073,   147,   421,    -1,    29,    -1,     8,    -1,   224,    -1,
     556,    -1,   123,    -1,   784,   786,    -1,   784,    56,   781,
     765,    -1,   784,     6,   781,   760,   769,    -1,    -1,   561,
     264,   195,  1358,    -1,   784,     6,   781,   772,    -1,   784,
     136,   781,   772,    -1,   785,   764,   775,    -1,   785,   764,
     778,    -1,     6,   782,    -1,     6,   783,    -1,    -1,   766,
     767,    -1,   768,    -1,   767,   768,    -1,   767,   605,   768,
      -1,   787,    -1,   788,    -1,   789,    -1,   770,    -1,   771,
      -1,   770,   771,    -1,   770,   605,   771,    -1,   787,    -1,
     788,    -1,   789,    -1,   790,    -1,   793,    -1,   795,    -1,
     797,    -1,   794,    -1,   773,    -1,   774,    -1,   773,   774,
      -1,   773,   605,   774,    -1,   787,    -1,   788,    -1,   789,
      -1,   795,    -1,   797,    -1,   776,    -1,   777,    -1,   776,
     777,    -1,   776,   605,   777,    -1,   787,    -1,   791,    -1,
     792,    -1,   793,    -1,   795,    -1,   797,    -1,   794,    -1,
     779,    -1,   780,    -1,   779,   780,    -1,   779,   605,   780,
      -1,   787,    -1,   795,    -1,   797,    -1,   104,  1355,    -1,
     545,  1355,    -1,   404,  1355,    -1,  1358,    -1,  1358,    -1,
     398,    -1,   400,    -1,   337,     4,    -1,   220,  1240,   798,
      -1,    24,  1240,   798,    -1,   294,  1240,   798,    -1,   167,
    1240,   798,    -1,   546,  1240,   798,    -1,   405,  1240,   798,
      -1,   334,  1240,  1189,    -1,    73,  1240,  1355,    -1,  1281,
     151,  1240,   872,    -1,    -1,   797,    -1,   575,    -1,   340,
      -1,  1189,    -1,   210,    -1,   603,   800,    -1,   865,   805,
     802,    -1,   253,  1351,    -1,   603,   253,  1351,   604,    -1,
     878,   604,   865,   805,   802,    -1,    -1,   805,   854,   604,
     801,  1437,    -1,    -1,    -1,  1322,   857,   854,   803,  1434,
      -1,    -1,  1322,   857,   603,   854,   604,   804,  1437,    -1,
     806,    -1,    -1,   807,    -1,    -1,   371,   809,   808,   812,
      -1,    -1,    -1,   371,   811,   812,    -1,    46,   813,   822,
     823,   830,    -1,   815,   241,   603,   816,   604,    -1,    -1,
     815,   199,   814,   820,    -1,   396,   820,    -1,   396,   819,
      -1,   258,   820,    -1,   258,   819,    -1,    -1,   255,    -1,
      -1,   817,    -1,   818,    -1,   817,   605,   818,    -1,  1358,
      -1,    70,   603,   816,   604,    -1,   603,  1069,   828,  1070,
     604,    -1,   603,  1069,   828,  1070,   604,    -1,    -1,   370,
    1189,    -1,    -1,    -1,   502,    46,   815,   199,   821,   824,
     829,    -1,    -1,   502,    46,   815,   241,   603,   826,   604,
     825,   829,    -1,   827,    -1,   826,   605,   827,    -1,  1358,
      -1,  1076,    -1,    -1,   501,  1189,    -1,    -1,   603,   831,
     604,    -1,   832,    -1,   831,   605,   832,    -1,    -1,   371,
     833,   834,   835,   851,   846,    -1,  1358,    -1,    -1,    -1,
     566,   250,   521,   836,   838,    -1,    -1,   566,   231,   837,
     839,    -1,   298,    -1,   841,    -1,   841,    -1,   603,   840,
     604,    -1,   841,    -1,   840,   605,   841,    -1,    -1,    -1,
     603,   842,   844,   843,   604,    -1,   845,    -1,   844,   605,
     845,    -1,   298,    -1,  1076,    -1,    -1,   603,   847,   604,
      -1,   848,    -1,   847,   605,   848,    -1,    -1,   502,   849,
     850,   851,    -1,  1360,    -1,    -1,   852,    -1,   852,   853,
      -1,   853,    -1,   511,  1240,  1360,    -1,  1281,   151,  1240,
     872,    -1,   334,  1240,  1189,    -1,   293,  1240,  1191,    -1,
     311,  1240,  1191,    -1,   105,   128,  1240,  1355,    -1,   218,
     128,  1240,  1355,    -1,    73,  1240,  1355,    -1,    -1,    -1,
     448,   855,  1063,  1067,   856,   876,    -1,    -1,    18,    -1,
      -1,   859,    -1,   860,    -1,   859,   860,    -1,   871,    -1,
     870,    -1,    -1,   862,    -1,   863,    -1,   863,   862,    -1,
     516,    -1,    -1,   213,  1079,   163,    -1,    -1,   867,    -1,
     868,    -1,   868,   866,    -1,   868,    -1,   868,   867,    -1,
     868,   605,   867,    -1,   151,  1240,   872,    -1,   293,  1240,
    1190,    -1,   311,  1240,  1190,    -1,    26,  1240,  1188,    -1,
     372,  1240,  1355,    -1,    73,  1240,  1355,    -1,    25,  1240,
    1190,    -1,   364,  1240,  1188,    -1,   364,  1240,   119,    -1,
      60,  1240,  1188,    -1,   514,  1240,  1188,    -1,   122,  1240,
    1188,    -1,   439,  1240,   874,    -1,    -1,   550,  1240,   869,
     603,  1302,   604,    -1,   870,    -1,   871,    -1,   225,  1240,
     875,    -1,   105,   128,  1240,  1355,    -1,   218,   128,  1240,
    1355,    -1,   511,  1358,    -1,   495,   131,    -1,   495,   303,
      -1,    81,  1240,  1355,    -1,   240,  1240,  1188,    -1,   921,
     912,  1240,   914,    -1,   921,    68,  1240,   920,    -1,  1360,
      -1,  1360,    -1,   119,    -1,   175,    -1,   140,    -1,    78,
      -1,   406,    -1,    76,    -1,   339,    -1,   174,    -1,   244,
      -1,  1183,    -1,  1062,  1066,    -1,   497,    -1,   401,    -1,
     117,    -1,   229,    -1,   879,    -1,   880,    -1,   879,   605,
     880,    -1,   881,    -1,   882,    -1,   887,   883,    -1,   887,
     927,    -1,   933,   957,   942,   603,   955,   604,   943,    -1,
     939,   936,   957,   941,   603,   955,   604,   944,    -1,   940,
     936,   957,   941,   603,   955,   604,   945,    -1,   885,   934,
     957,   942,   603,   955,   604,   943,    -1,   885,   180,   241,
     957,   603,   955,   604,   927,    -1,   885,   884,    -1,    -1,
     884,    -1,    61,   603,  1073,   604,    -1,    -1,   886,    -1,
      83,   957,    -1,    -1,  1350,   888,   889,   907,    -1,   897,
     905,   901,    -1,   898,   906,   901,    -1,   177,   899,   901,
      -1,    38,    -1,    38,   904,    -1,    43,    -1,    42,    -1,
     893,   904,   924,    -1,   893,   924,    -1,   894,   904,   925,
      -1,   894,   925,    -1,    33,   904,    -1,    33,    -1,   895,
     904,   924,    -1,   896,   904,   925,    -1,   568,   904,    -1,
     592,   905,   901,    -1,   109,    -1,   526,    -1,   523,    -1,
     106,    -1,   527,    -1,    40,   905,    -1,   892,    -1,   299,
      -1,   266,    -1,   269,   568,    -1,   269,   895,   924,    -1,
     529,   924,    -1,   520,   905,   924,    -1,   301,   924,    -1,
     267,   924,    -1,   117,   899,   901,    -1,   344,   899,   901,
      -1,   175,   899,   901,    -1,    -1,   152,   890,   603,   959,
     604,   924,    -1,    -1,   456,   891,   603,   959,   604,   924,
      -1,   269,   924,    -1,   452,    -1,   190,    -1,   189,    -1,
     376,    -1,   319,    -1,   257,    -1,   318,    -1,   377,    -1,
     320,    -1,    59,    -1,   328,    -1,   325,    59,    -1,   893,
     572,    -1,   569,    -1,   325,   569,    -1,   345,    -1,   328,
     569,    -1,   325,    59,   572,    -1,   328,   572,    -1,   229,
      -1,   528,    -1,   468,    -1,   300,    -1,    32,    -1,   401,
      -1,   134,    -1,   134,   380,    -1,    -1,   904,    -1,   900,
      -1,   603,   343,   605,   343,   604,    -1,    -1,   902,    -1,
     902,   903,    -1,   903,    -1,   464,    -1,   554,    -1,   593,
      -1,   603,   268,   604,    -1,   603,   541,   604,    -1,   603,
     116,   604,    -1,   603,   343,   604,    -1,    -1,   904,    -1,
      -1,   900,    -1,    -1,   908,    -1,   908,   909,    -1,   909,
      -1,   342,    -1,  1079,   342,    -1,   119,   911,    -1,   145,
      -1,   145,   181,  1350,    -1,   348,   556,   338,  1072,    -1,
      25,    -1,   452,   119,   567,    -1,   926,   241,    -1,   551,
      -1,   551,   241,    -1,    73,  1355,    -1,    68,   918,    -1,
     889,   919,    -1,   338,  1072,    -1,  1341,    -1,    59,   456,
      -1,    58,    -1,  1360,    -1,    33,    -1,   913,    -1,   119,
      -1,    -1,   912,   914,    -1,  1360,    -1,    33,    -1,   916,
      -1,   119,    -1,  1360,    -1,    -1,    68,   920,    -1,   918,
      -1,   119,    -1,    -1,   119,    -1,    20,    -1,    33,    20,
      -1,    20,    33,    -1,   548,    -1,   548,    33,    -1,    33,
     548,    -1,    -1,   922,    -1,   923,    -1,    47,    -1,   912,
     913,   925,    -1,    33,    -1,    33,   912,   913,    -1,    -1,
      33,    -1,    -1,   384,    -1,   407,  1351,   928,   930,   931,
      -1,    -1,   603,   929,   604,    -1,   929,   605,  1358,    -1,
    1358,    -1,    -1,   290,   184,    -1,   290,   368,    -1,   290,
     465,    -1,    -1,   348,   556,   932,    -1,   348,   123,   932,
      -1,   348,   556,   932,   348,   123,   932,    -1,   348,   123,
     932,   348,   556,   932,    -1,   429,    -1,    50,    -1,   456,
     342,    -1,   339,     5,    -1,   456,   119,    -1,   935,    -1,
     384,   241,    -1,   551,   936,    -1,   241,    -1,   218,    -1,
      -1,   935,    -1,   239,    -1,   218,    -1,   217,    -1,    -1,
     551,    -1,   185,    -1,   474,    -1,    -1,   941,    -1,   941,
     949,    -1,    -1,   946,    -1,    -1,   948,    -1,    -1,   947,
      -1,   951,    -1,   946,   951,    -1,   952,    -1,   947,   952,
      -1,   953,    -1,   948,   953,    -1,   562,   954,    -1,   539,
     954,    -1,   240,  1240,  1188,    -1,    73,  1355,    -1,   950,
      -1,   949,    -1,   950,    -1,   950,    -1,   581,   367,  1354,
      -1,    45,    -1,   441,    -1,   199,    -1,   955,   605,   956,
    1181,    -1,   956,  1181,    -1,  1358,    -1,  1358,   603,   343,
     604,    -1,    -1,  1350,    -1,    -1,   611,  1358,    -1,  1339,
      -1,   959,   605,  1339,    -1,    -1,    13,   994,   513,  1351,
     961,   972,    -1,    -1,    13,   102,   971,   962,   859,    -1,
      13,   102,  1358,   557,   105,   128,   324,    -1,    -1,    13,
     386,   661,   963,   662,    -1,    -1,    13,   186,   661,   964,
     662,    -1,    -1,    13,  1460,  1455,   965,  1462,    -1,    -1,
      13,  1455,   966,  1462,    -1,    -1,    13,  1455,   160,   661,
     967,   968,   969,   651,   656,   970,    -1,    13,   511,   761,
      -1,    13,   264,   195,   763,    -1,    13,   511,   758,    -1,
      13,   511,   757,    -1,    13,   454,  1360,   353,   603,   645,
     604,    -1,    -1,   348,   443,   649,    -1,   655,    -1,   348,
     443,   649,   655,    -1,    -1,   417,   530,   661,    -1,    -1,
     135,   657,    -1,    -1,  1358,    -1,    -1,   130,   511,    -1,
     216,   511,    -1,   987,   806,    -1,   987,   976,    -1,   976,
      -1,   807,    -1,   978,    -1,   136,   371,   985,    -1,   402,
     371,  1027,   977,    -1,    -1,   352,   371,  1027,   977,   973,
    1027,    -1,    14,   371,  1027,   977,    -1,    -1,    61,   371,
     977,   974,  1022,    -1,    -1,   419,   371,  1027,   977,   975,
    1014,    -1,    66,   371,  1027,  1189,    -1,   537,   371,   977,
      -1,   981,    -1,   416,   369,    -1,    12,    -1,   985,    -1,
      -1,     6,   371,  1027,   979,   980,    -1,    -1,   603,   831,
     604,    -1,   370,  1189,    -1,    -1,   418,   371,  1027,   982,
     983,    -1,    -1,    -1,   985,   984,   228,   603,   831,   604,
      -1,   986,    -1,   985,   605,   986,    -1,  1358,    -1,   989,
      -1,   987,   605,   989,    -1,     6,   993,    -1,   988,   881,
     996,    -1,     6,   882,    -1,   988,   603,   878,   604,    -1,
      -1,    56,   993,  1350,   990,   887,   996,    -1,    -1,    -1,
     315,   993,  1350,   991,   889,   907,   992,   996,    -1,   136,
     993,  1350,   995,    -1,   136,   180,   241,   957,    -1,   136,
     384,   241,    -1,   136,   935,  1350,    -1,   129,   239,    -1,
     144,   239,    -1,    13,   993,  1350,   456,   119,  1341,    -1,
      13,   993,  1350,   136,   119,    -1,   417,   997,  1351,    -1,
      91,   530,   912,   914,   919,    -1,   866,    -1,   179,    -1,
    1174,    -1,    -1,    71,    -1,    -1,   214,    -1,    -1,   429,
      -1,    50,    -1,    -1,     8,  1358,    -1,   174,    -1,    -1,
     530,    -1,   153,    -1,    18,    -1,    -1,   490,   466,  1003,
     999,  1007,    -1,   494,   466,  1003,    -1,    -1,   466,   490,
    1003,  1000,  1007,    -1,   466,   494,  1003,    -1,   490,   532,
    1002,    -1,    -1,   581,    82,   469,    -1,    -1,  1004,  1005,
      -1,  1006,    -1,  1005,   605,  1006,    -1,    -1,   486,    -1,
     413,    -1,    -1,   555,  1008,    -1,   636,    -1,  1008,   605,
     636,    -1,    -1,    60,  1383,  1010,  1214,  1011,    -1,    -1,
     395,    -1,   166,    -1,    -1,   419,  1027,  1383,  1013,  1214,
    1014,    -1,    -1,  1015,    -1,  1016,    -1,  1016,  1015,    -1,
     395,    -1,   166,    -1,   560,    -1,    -1,    14,  1027,  1383,
    1018,  1214,    -1,    34,  1355,    -1,    -1,    61,  1383,  1021,
    1214,  1022,    -1,    -1,  1023,    -1,  1024,    -1,  1024,  1023,
      -1,   395,    -1,   170,    -1,   302,    -1,   166,    -1,    57,
      -1,   181,   557,    -1,    -1,   352,  1027,  1383,  1026,  1214,
      -1,    -1,   341,    -1,   260,    -1,    -1,   417,  1383,  1029,
    1031,    -1,   417,   559,   660,  1030,    -1,  1361,   530,  1361,
      -1,  1030,   605,  1361,   530,  1361,    -1,  1032,    -1,  1031,
     605,  1032,    -1,  1351,   530,  1351,    -1,    -1,    48,   218,
    1034,  1035,   231,  1039,    -1,  1036,    -1,  1038,    -1,  1037,
      -1,  1036,   605,  1037,    -1,  1351,  1048,    -1,  1351,  1046,
    1048,    -1,  1358,    -1,   119,    -1,    -1,   259,   218,   228,
      48,  1041,  1042,    -1,  1045,    -1,  1043,    -1,  1044,    -1,
    1043,   605,  1044,    -1,  1351,  1048,  1051,    -1,  1351,  1046,
    1048,  1051,    -1,    -1,   371,   809,  1047,   603,   977,   604,
      -1,    -1,  1049,  1050,    -1,    -1,   935,   603,  1156,   604,
      -1,    -1,   214,   247,    -1,  1053,    -1,   448,  1056,    -1,
     603,  1054,   604,  1437,    -1,   448,  1058,    -1,   603,  1054,
     604,    -1,   448,  1135,    -1,   603,  1055,   604,    -1,    -1,
    1058,  1057,  1434,    -1,    -1,    -1,  1059,  1063,  1067,  1060,
    1061,  1066,    -1,  1177,  1183,    -1,  1203,    -1,  1062,    -1,
    1203,  1062,    -1,  1062,  1203,    -1,   183,  1117,  1166,  1171,
    1168,  1177,  1183,  1194,    -1,   183,   137,  1166,  1183,    -1,
      -1,  1064,    -1,  1064,  1065,    -1,  1065,    -1,  1451,    -1,
     483,    -1,   481,    -1,    -1,   181,   556,    -1,   263,   231,
     458,   313,    -1,  1067,   605,  1068,    -1,  1068,    -1,   598,
      -1,  1069,  1345,  1070,    -1,  1069,  1073,  1070,  1071,    -1,
      -1,    -1,    -1,    18,  1358,    -1,    18,  1355,    -1,  1358,
      -1,  1355,    -1,    -1,   603,   604,    -1,  1073,  1077,  1073,
      -1,  1073,   590,  1073,    -1,  1073,  1078,  1073,    -1,   337,
    1073,    -1,  1074,   234,   536,    -1,  1074,   234,  1079,   536,
      -1,  1074,   234,   169,    -1,  1074,   234,  1079,   169,    -1,
    1074,   234,   552,    -1,  1074,   234,  1079,   552,    -1,  1074,
      -1,  1074,   234,   342,    -1,  1074,   234,  1079,   342,    -1,
    1074,   154,  1075,    -1,  1074,  1081,  1075,    -1,  1074,  1081,
    1082,   603,  1446,   604,    -1,  1075,    -1,  1076,   231,   603,
    1446,   604,    -1,  1076,  1079,   231,   603,  1446,   604,    -1,
    1076,   231,   603,  1073,   604,    -1,  1076,   231,   603,  1073,
     605,  1110,   604,    -1,  1076,  1079,   231,   603,  1073,   604,
      -1,  1076,  1079,   231,   603,  1073,   605,  1110,   604,    -1,
    1076,    31,  1076,    16,  1075,    -1,  1076,  1079,    31,  1076,
      16,  1075,    -1,  1076,   472,   253,  1076,    -1,  1076,   253,
    1083,  1170,    -1,  1076,  1079,   253,  1083,  1170,    -1,  1076,
     408,  1076,    -1,  1076,  1079,   408,  1076,    -1,  1076,    -1,
    1076,   594,  1076,    -1,  1076,   595,  1076,    -1,  1076,   459,
    1076,    -1,  1076,   460,  1076,    -1,  1076,   597,  1076,    -1,
    1076,   596,  1076,    -1,  1076,   597,   227,  1073,  1160,    -1,
    1076,   596,   227,  1073,  1160,    -1,  1076,   598,  1076,    -1,
    1076,   599,  1076,    -1,  1076,   600,  1076,    -1,  1076,   133,
    1076,    -1,  1076,   316,  1076,    -1,  1076,   601,  1076,    -1,
    1083,    -1,   359,    -1,   356,    -1,    16,    -1,    15,    -1,
     337,    -1,   336,    -1,   606,    -1,   336,    -1,   153,    -1,
     187,    -1,   197,    -1,   245,    -1,   272,    -1,   330,    -1,
      12,    -1,    17,    -1,  1347,    -1,  1084,    -1,  1085,    -1,
    1088,    -1,  1086,    -1,  1083,    68,  1360,    -1,  1342,    -1,
    1340,    -1,  1100,    -1,  1096,    -1,  1083,   358,  1083,    -1,
     597,  1083,    -1,   596,  1083,    -1,   602,  1083,    -1,  1080,
    1083,    -1,   603,  1446,   604,    -1,   603,  1073,   604,    -1,
     603,  1073,   605,  1110,   604,    -1,   440,   603,  1073,   605,
    1110,   604,    -1,   163,   603,  1446,   604,    -1,   607,  1358,
    1073,   608,    -1,   290,  1111,     9,   603,  1076,  1090,   604,
      -1,    33,  1083,    -1,    53,   603,  1073,    18,  1108,   604,
      -1,    52,  1113,  1115,  1114,   147,    -1,    91,   603,  1073,
     605,  1108,   604,    -1,    91,   603,  1073,   562,   913,   604,
      -1,   119,   603,  1347,   604,    -1,   566,   603,  1348,   604,
      -1,   227,  1073,  1160,   597,  1073,    -1,    59,   603,  1110,
     604,    -1,    59,   603,  1110,   562,   913,   604,    -1,    98,
    1072,    -1,   109,   603,  1073,   604,    -1,   114,   603,  1073,
     604,    -1,   209,   603,  1073,   604,    -1,   224,   603,  1073,
     605,  1073,   605,  1073,   605,  1073,   604,    -1,   227,   603,
    1073,   605,  1073,   604,    -1,   227,   603,  1073,   605,  1073,
     605,  1110,   604,    -1,   249,   603,  1073,   605,  1073,   604,
      -1,   310,   603,  1073,   604,    -1,   317,   603,  1073,   604,
      -1,   434,   603,  1073,   605,  1073,   604,    -1,   446,   603,
    1073,   604,    -1,   526,   603,  1073,   604,    -1,   523,   603,
    1073,   604,    -1,   523,   603,  1073,   605,  1073,   604,    -1,
     535,   603,  1073,   604,    -1,   535,   603,   246,  1073,   183,
    1073,   604,    -1,   535,   603,   531,  1073,   183,  1073,   604,
      -1,   535,   603,    44,  1073,   183,  1073,   604,    -1,   535,
     603,   246,   183,  1073,   604,    -1,   535,   603,   531,   183,
    1073,   604,    -1,   535,   603,    44,   183,  1073,   604,    -1,
     535,   603,  1073,   183,  1073,   604,    -1,   559,   603,   604,
      -1,   592,   603,  1073,   604,    -1,     7,   603,  1073,   605,
    1073,   604,    -1,     7,   603,  1073,   605,   227,  1073,  1160,
     604,    -1,    97,  1072,    -1,   101,  1072,    -1,   101,   603,
    1073,   604,    -1,   107,   603,  1073,   605,   227,  1073,  1160,
     604,    -1,   108,   603,  1073,   605,   227,  1073,  1160,   604,
      -1,   168,   603,  1160,   183,  1073,   604,    -1,   191,   603,
    1162,   605,  1073,   604,    -1,   338,  1072,    -1,   338,   603,
    1073,   604,    -1,   379,   603,  1076,   231,  1073,   604,    -1,
     499,   603,  1073,   605,  1073,   604,    -1,   499,   603,  1073,
     605,   227,  1073,  1160,   604,    -1,   503,   603,  1073,   605,
    1073,   605,  1073,   604,    -1,   503,   603,  1073,   605,  1073,
     604,    -1,   503,   603,  1073,   183,  1073,   181,  1073,   604,
      -1,   503,   603,  1073,   183,  1073,   604,    -1,   509,  1072,
      -1,   509,   603,  1073,   604,    -1,   524,   603,  1161,   605,
    1073,   605,  1073,   604,    -1,   525,   603,  1161,   605,  1073,
     605,  1073,   604,    -1,   563,  1072,    -1,   565,  1072,    -1,
     564,  1072,    -1,    20,   603,  1073,   604,    -1,    58,   603,
    1073,   604,    -1,    66,   603,  1110,   604,    -1,    69,   603,
    1073,   604,    -1,   102,   603,   604,    -1,   213,   603,  1073,
     605,  1073,   605,  1073,   604,    -1,   306,   603,  1073,   604,
      -1,   316,   603,  1073,   605,  1073,   604,    -1,   347,   603,
    1073,   604,    -1,   372,   603,  1073,   604,    -1,   393,   603,
    1073,   604,    -1,   421,   603,  1073,   605,  1073,   604,    -1,
     422,   603,  1073,   605,  1073,   605,  1073,   604,    -1,   537,
     603,  1073,   605,  1073,   604,    -1,   577,   603,  1073,   604,
      -1,   577,   603,  1073,   605,  1073,   604,    -1,  1087,    -1,
      87,   603,  1073,   605,  1073,   604,    -1,   189,   603,  1110,
     604,    -1,   257,   603,  1110,   604,    -1,   318,   603,  1110,
     604,    -1,   319,   603,  1110,   604,    -1,   320,   603,  1110,
     604,    -1,   376,   603,  1073,   605,  1073,   604,    -1,   377,
     603,  1110,   604,    -1,    -1,  1354,   603,  1089,  1093,   604,
      -1,  1358,   611,  1358,   603,  1109,   604,    -1,  1091,  1092,
      -1,   231,    42,   313,    -1,    -1,   231,   326,   243,   313,
      -1,    -1,   581,   394,   165,    -1,    -1,  1094,    -1,  1095,
      -1,  1094,   605,  1095,    -1,  1069,  1073,  1070,  1071,    -1,
      27,   603,  1106,   604,    -1,    27,   603,   132,  1106,   604,
      -1,    36,   603,  1106,   604,    -1,    37,   603,  1106,   604,
      -1,    39,   603,  1106,   604,    -1,    92,   603,  1165,   598,
     604,    -1,    92,   603,  1106,   604,    -1,    -1,    -1,    92,
     603,   132,  1097,  1110,  1098,   604,    -1,   312,   603,  1106,
     604,    -1,   312,   603,   132,  1106,   604,    -1,   295,   603,
    1106,   604,    -1,   295,   603,   132,  1106,   604,    -1,   493,
     603,  1106,   604,    -1,   571,   603,  1106,   604,    -1,   492,
     603,  1106,   604,    -1,   573,   603,  1106,   604,    -1,   504,
     603,  1106,   604,    -1,   504,   603,   132,  1106,   604,    -1,
      -1,   196,   603,  1103,  1099,  1110,  1105,  1104,   604,    -1,
      -1,   610,  1101,  1102,    -1,  1360,   457,  1073,    -1,  1360,
      -1,   610,  1373,  1360,   958,    -1,    -1,   132,    -1,    -1,
     450,  1339,    -1,    -1,  1178,    -1,    -1,  1165,  1107,  1073,
      -1,    33,   905,    -1,    59,   905,   924,    -1,   328,   905,
      -1,   464,    -1,   464,   229,    -1,   554,    -1,   554,   229,
      -1,   109,    -1,   526,    -1,   106,    -1,   117,   899,    -1,
      -1,  1110,    -1,  1073,    -1,  1110,   605,  1073,    -1,  1112,
      -1,   603,  1112,   604,    -1,  1347,    -1,  1112,   605,  1347,
      -1,    -1,  1073,    -1,    -1,   142,  1073,    -1,   578,  1073,
     522,  1073,    -1,  1115,   578,  1073,   522,  1073,    -1,  1129,
      -1,  1120,    -1,  1119,    -1,  1116,    -1,   607,  1358,  1116,
     608,    -1,  1118,    -1,  1119,   605,  1118,    -1,  1116,  1128,
    1116,    -1,  1116,   496,  1129,    -1,    -1,  1116,  1128,  1116,
     348,  1121,  1073,    -1,    -1,  1116,   496,  1129,   348,  1122,
    1073,    -1,    -1,  1116,  1128,  1116,   562,  1123,   603,  1159,
     604,    -1,  1116,   326,   238,  1129,    -1,    -1,  1116,   249,
    1145,   238,  1116,   348,  1124,  1073,    -1,    -1,  1116,   249,
    1145,   238,  1129,  1125,   562,   603,  1159,   604,    -1,  1116,
     326,   249,  1145,   238,  1129,    -1,    -1,  1116,   434,  1145,
     238,  1116,   348,  1126,  1073,    -1,    -1,  1116,   434,  1145,
     238,  1129,  1127,   562,   603,  1159,   604,    -1,  1116,   326,
     434,  1145,   238,  1129,    -1,   238,    -1,   221,   238,    -1,
      95,   238,    -1,    -1,  1130,  1351,  1164,  1154,    -1,  1144,
    1143,  1140,    -1,   603,  1143,  1131,   604,  1164,    -1,  1138,
    1438,    -1,    -1,    -1,  1131,   550,  1442,  1132,  1443,  1133,
    1438,    -1,  1135,    -1,    -1,    -1,  1136,  1449,  1067,  1137,
     876,  1066,    -1,    -1,  1143,  1139,  1119,    -1,    -1,    -1,
    1141,  1063,  1067,  1142,   876,    -1,    -1,   448,    -1,    -1,
     360,    -1,    -1,   181,   238,    -1,   181,   357,    46,    -1,
     181,   195,    46,    -1,   179,    -1,   214,    -1,    -1,  1147,
     935,  1146,  1149,   603,  1158,   604,    -1,    -1,   561,   935,
    1146,  1150,   603,  1156,   604,    -1,  1148,    -1,  1151,  1148,
      -1,    -1,    -1,  1153,  1151,    -1,    -1,  1155,  1152,    -1,
      -1,  1158,    -1,  1358,    -1,   384,    -1,  1157,    -1,  1158,
     605,  1157,    -1,  1358,    -1,  1159,   605,  1358,    -1,  1161,
      -1,   110,    -1,   111,    -1,   112,    -1,   113,    -1,   206,
      -1,   207,    -1,   208,    -1,   308,    -1,   309,    -1,   445,
      -1,   591,    -1,   114,    -1,   577,    -1,   209,    -1,   310,
      -1,   317,    -1,   393,    -1,   446,    -1,   306,    -1,   592,
      -1,   109,    -1,   526,    -1,   106,    -1,   523,    -1,    -1,
      18,    -1,   153,    -1,    -1,  1163,  1358,    -1,    -1,    12,
      -1,    -1,    -1,   579,  1167,  1073,    -1,    -1,    -1,   200,
    1169,  1073,    -1,   158,  1083,    -1,    -1,    -1,   195,    46,
    1172,  1173,    -1,  1172,   605,  1346,  1181,    -1,  1346,  1181,
      -1,    -1,   582,    -1,   583,    -1,   357,    46,  1175,    -1,
    1175,   605,  1176,    -1,  1176,    -1,  1348,  1181,    -1,    -1,
    1178,    -1,    -1,   357,    46,  1179,  1180,    -1,  1180,   605,
    1346,  1181,    -1,  1346,  1181,    -1,    -1,    19,    -1,   124,
      -1,    -1,  1184,    -1,    -1,  1184,    -1,   254,  1185,    -1,
    1186,    -1,  1186,   605,  1186,    -1,  1186,   346,  1186,    -1,
    1358,    -1,  1340,    -1,   541,    -1,   268,    -1,   343,    -1,
      -1,   254,  1186,    -1,   343,    -1,   202,    -1,   268,    -1,
     541,    -1,   116,    -1,   176,    -1,   343,    -1,   202,    -1,
     268,    -1,   541,    -1,  1192,    -1,   343,    -1,   541,    -1,
     268,    -1,   116,    -1,   176,    -1,   343,    -1,   541,    -1,
     268,    -1,  1192,    -1,  1193,    -1,   116,    -1,   176,    -1,
      -1,    -1,   386,  1358,  1195,   603,  1196,   604,    -1,    -1,
    1197,    -1,  1197,   605,  1198,    -1,  1198,    -1,  1069,  1073,
    1070,    -1,    -1,  1200,  1201,    -1,  1201,   605,  1202,    -1,
    1202,    -1,   610,  1360,    -1,  1360,    -1,    -1,   228,  1204,
    1205,    -1,    -1,    -1,   361,  1357,  1206,   915,  1207,  1323,
    1326,    -1,   138,  1357,    -1,  1199,    -1,    -1,   135,  1209,
    1110,    -1,    -1,   136,  1219,  1383,  1218,  1211,  1214,   995,
      -1,    -1,   136,   218,  1358,   348,  1351,  1212,    -1,   136,
     102,  1218,  1358,    -1,   136,   186,  1218,  1358,   611,  1358,
      -1,   136,   186,  1218,  1358,    -1,   136,   386,  1218,   661,
      -1,   136,   559,   660,  1413,    -1,    -1,   136,   574,  1218,
    1213,  1214,   995,    -1,   136,   160,  1218,   661,    -1,   136,
     534,  1218,   661,    -1,   136,   511,   784,   795,   796,    -1,
     136,   264,   195,   785,   795,   796,    -1,   136,   454,  1218,
    1360,    -1,  1215,    -1,  1214,   605,  1215,    -1,  1351,    -1,
    1217,    -1,  1216,   605,  1217,    -1,  1352,    -1,    -1,   213,
     163,    -1,    -1,   516,    -1,    -1,    -1,   224,  1221,  1226,
     994,  1228,  1222,  1230,  1246,    -1,    -1,    -1,   422,  1224,
    1227,  1228,  1225,  1230,    -1,    -1,   271,    -1,   121,    -1,
     203,    -1,  1255,    -1,   121,    -1,   228,  1229,    -1,  1229,
      -1,  1215,    -1,  1233,    -1,   603,   604,  1233,    -1,   603,
    1232,   604,  1233,    -1,    -1,   456,  1231,  1237,    -1,  1232,
     605,  1344,    -1,  1344,    -1,   566,  1236,    -1,   567,  1236,
      -1,    -1,   854,  1234,  1434,    -1,    -1,   603,   854,   604,
    1235,  1437,    -1,  1236,   605,  1241,    -1,  1241,    -1,  1237,
     605,  1238,    -1,  1238,    -1,  1348,  1239,  1245,    -1,   153,
      -1,   457,    -1,    -1,  1239,    -1,    -1,   603,  1242,  1243,
     604,    -1,    -1,  1244,    -1,  1244,   605,  1245,    -1,  1245,
      -1,  1073,    -1,   119,    -1,    -1,    -1,   348,   139,  1247,
     241,   556,  1253,    -1,    -1,    -1,   556,  1249,  1255,   994,
    1117,   456,  1251,  1250,  1166,  1177,  1187,    -1,  1251,   605,
    1252,    -1,  1252,    -1,  1348,  1239,  1245,    -1,  1253,   605,
    1254,    -1,  1254,    -1,  1348,  1239,  1245,    -1,    -1,   271,
      -1,    -1,   123,  1257,  1265,  1258,    -1,    -1,   183,  1351,
    1259,  1166,  1177,  1187,    -1,    -1,  1262,  1260,   183,  1117,
    1166,    -1,    -1,   183,  1216,  1261,   562,  1117,  1166,    -1,
    1263,    -1,  1262,   605,  1263,    -1,  1358,  1264,    -1,  1358,
     611,  1358,  1264,    -1,    -1,   611,   598,    -1,    -1,  1266,
    1265,    -1,   395,    -1,   271,    -1,   214,    -1,    -1,   537,
    1269,  1268,  1215,    -1,    -1,   513,    -1,    -1,  1271,    -1,
    1272,    -1,  1271,   605,  1272,    -1,    93,    -1,   303,    -1,
      41,   232,    -1,    88,   508,    -1,   365,   171,    -1,   233,
      -1,   507,    -1,   473,    -1,    12,    -1,    -1,   181,   394,
     343,    -1,    -1,   461,  1275,  1276,    -1,   103,  1287,    -1,
    1283,   510,  1282,  1287,    -1,  1283,   533,  1282,  1287,    -1,
     159,  1282,  1287,    -1,   513,   491,  1282,  1287,    -1,   351,
     510,  1282,  1287,    -1,   374,    -1,   151,   873,  1279,    -1,
     151,    12,  1279,    -1,  1283,    70,  1284,  1351,  1282,  1287,
      -1,  1280,   265,    -1,   466,   205,    -1,    -1,    34,   159,
    1285,  1286,  1277,  1182,    -1,    -1,   410,   159,  1285,  1286,
    1278,  1182,    -1,   937,  1284,  1351,  1282,  1166,    -1,  1281,
     150,    -1,    23,    -1,    90,    -1,   385,    -1,    92,   603,
     598,   604,   576,    -1,    92,   603,   598,   604,   156,    -1,
     576,  1182,    -1,   156,  1182,    -1,   390,    -1,   389,  1270,
    1273,  1182,    -1,  1372,   491,  1287,    -1,  1283,   388,    -1,
    1372,   570,  1287,    -1,   912,  1287,    -1,    69,  1287,    -1,
     194,    -1,   194,   181,  1361,    -1,    94,   102,   864,  1358,
      -1,    94,   513,  1351,    -1,    94,   574,  1351,    -1,   287,
     491,    -1,   466,   491,    -1,    94,   386,   661,    -1,    94,
     186,   661,    -1,    94,   534,   661,    -1,   386,   491,  1287,
      -1,   186,   491,  1287,    -1,   386,    67,   661,    -1,   186,
      67,   661,    -1,    94,   160,   661,    -1,   491,    -1,   321,
      -1,   265,    -1,   287,    -1,    33,    -1,    -1,   495,    -1,
      -1,  1284,  1358,    -1,    -1,   184,    -1,   183,    -1,   231,
      -1,    -1,   231,  1355,    -1,    -1,   183,  1190,    -1,    -1,
     253,  1355,    -1,   579,  1073,    -1,    -1,  1291,  1351,  1289,
    1293,    -1,    -1,  1291,  1292,  1290,  1052,    -1,   124,    -1,
     125,    -1,    -1,   166,    -1,   370,    -1,    -1,  1339,    -1,
    1358,    -1,    -1,   178,  1027,  1295,  1296,    -1,    -1,    -1,
    1383,  1297,  1302,  1298,  1299,    -1,  1300,    -1,    -1,   581,
     399,   263,    -1,  1300,   605,  1301,    -1,  1301,    -1,   155,
     265,    -1,   151,   265,    -1,   188,   265,    -1,   467,   265,
      -1,    33,   265,    -1,   409,   265,    -1,   394,    48,    -1,
     205,    -1,   385,    -1,   265,    -1,   491,    -1,   466,    -1,
     287,    -1,   126,    -1,   427,    -1,    -1,  1214,    -1,    -1,
     425,  1304,  1305,    -1,  1305,   605,  1306,    -1,  1306,    -1,
     466,    -1,   287,    -1,   394,    48,    -1,    -1,   392,  1308,
    1309,    -1,  1280,   265,  1310,    -1,   530,  1355,    -1,    29,
    1073,    -1,   242,  1312,  1073,    -1,    -1,    81,    -1,   394,
      -1,   561,  1358,    -1,    -1,    -1,    -1,    -1,   259,  1319,
    1315,  1321,  1320,   219,  1357,  1316,  1322,   228,   513,  1351,
    1317,   915,  1318,  1329,  1323,  1326,  1330,  1332,  1335,    -1,
     105,    -1,   589,    -1,    -1,   260,    -1,    -1,    79,    -1,
     271,    -1,    -1,   422,    -1,   214,    -1,    -1,    70,  1324,
      -1,  1324,  1325,    -1,  1325,    -1,   518,    46,  1339,    -1,
     355,   146,    46,  1339,    -1,   146,    46,  1339,    -1,   157,
      46,  1339,    -1,    -1,   256,  1327,    -1,  1327,  1328,    -1,
    1328,    -1,   518,    46,  1339,    -1,   488,    46,  1339,    -1,
      -1,   438,   211,    46,  1339,    -1,    -1,   214,   343,  1331,
      -1,   256,    -1,   438,    -1,    -1,   603,  1333,   604,    -1,
     603,   604,    -1,  1333,   605,  1334,    -1,  1334,    -1,  1348,
      -1,   610,  1360,    -1,    -1,   456,  1336,    -1,  1336,   605,
    1337,    -1,  1337,    -1,  1348,  1239,  1069,  1245,  1070,    -1,
     519,    -1,   327,    -1,   544,   519,    -1,  1338,  1356,    -1,
    1356,    -1,   202,    -1,    35,    -1,   366,    -1,  1342,    -1,
     597,  1343,    -1,   596,  1343,    -1,  1338,    -1,  1343,    -1,
     342,    -1,   169,    -1,   536,    -1,   202,    -1,    35,    -1,
     544,   202,    -1,   544,    35,    -1,   109,  1338,    -1,   526,
    1338,    -1,   523,  1338,    -1,   343,    -1,   268,    -1,   541,
      -1,   116,    -1,   176,    -1,  1348,    -1,  1345,    -1,  1358,
     611,   598,    -1,  1358,   611,  1358,   611,   598,    -1,  1073,
      -1,  1358,    -1,  1349,    -1,  1358,    -1,  1349,    -1,  1358,
     611,  1358,    -1,   611,  1358,   611,  1358,    -1,  1358,   611,
    1358,   611,  1358,    -1,  1358,    -1,  1358,   611,  1358,   611,
    1358,    -1,  1358,   611,  1358,    -1,   611,  1358,    -1,  1358,
      -1,  1358,   611,  1358,    -1,   611,  1358,    -1,  1358,  1264,
      -1,  1358,   611,  1358,  1264,    -1,  1358,    -1,   210,    -1,
     212,    -1,   519,    -1,   519,    -1,   519,    -1,  1354,    -1,
    1362,    -1,  1354,    -1,  1363,    -1,  1358,    -1,  1355,    -1,
     252,    -1,  1360,    -1,  1360,   610,  1360,    -1,    98,  1072,
      -1,  1363,    -1,    20,    -1,    28,    -1,    30,    -1,    47,
      -1,    48,    -1,    58,    -1,    60,    -1,    65,    -1,    73,
      -1,    75,    -1,    87,    -1,   115,    -1,   135,    -1,   147,
      -1,   162,    -1,   178,    -1,   198,    -1,   201,    -1,   204,
      -1,   226,    -1,   243,    -1,   339,    -1,   351,    -1,   353,
      -1,   363,    -1,   367,    -1,   371,    -1,   378,    -1,   381,
      -1,   416,    -1,   419,    -1,   425,    -1,   428,    -1,   435,
      -1,   442,    -1,   447,    -1,   454,    -1,   464,    -1,   470,
      -1,   466,    -1,   471,    -1,   490,    -1,   494,    -1,   537,
      -1,   548,    -1,   549,    -1,   585,    -1,   588,    -1,   557,
      -1,     5,    -1,     7,    -1,     8,    -1,     9,    -1,    10,
      -1,    11,    -1,    17,    -1,    22,    -1,    23,    -1,    25,
      -1,    24,    -1,    26,    -1,    27,    -1,    34,    -1,    38,
      -1,    41,    -1,    43,    -1,    42,    -1,    45,    -1,    51,
      -1,    54,    -1,    55,    -1,    57,    -1,    62,    -1,    64,
      -1,    63,    -1,    66,    -1,    67,    -1,    69,    -1,    72,
      -1,    70,    -1,    74,    -1,    76,    -1,    77,    -1,    78,
      -1,    79,    -1,    81,    -1,    82,    -1,    84,    -1,    86,
      -1,    85,    -1,    88,    -1,    90,    -1,    93,    -1,    96,
      -1,   100,    -1,   105,    -1,   104,    -1,   106,    -1,   109,
      -1,   114,    -1,   120,    -1,   122,    -1,   126,    -1,   128,
      -1,   129,    -1,   130,    -1,   131,    -1,   138,    -1,   139,
      -1,   140,    -1,   148,    -1,   152,    -1,   151,    -1,   150,
      -1,   155,    -1,   156,    -1,   158,    -1,   160,    -1,   159,
      -1,   161,    -1,   165,    -1,   166,    -1,   167,    -1,   171,
      -1,   170,    -1,   182,    -1,   144,    -1,   184,    -1,   173,
      -1,   174,    -1,   175,    -1,   188,    -1,   190,    -1,   189,
      -1,   191,    -1,   194,    -1,   192,    -1,   199,    -1,   205,
      -1,   209,    -1,   211,    -1,   215,    -1,   230,    -1,   216,
      -1,   217,    -1,   220,    -1,   232,    -1,   233,    -1,   235,
      -1,   236,    -1,   225,    -1,   240,    -1,   244,    -1,   247,
      -1,   250,    -1,   251,    -1,   257,    -1,   258,    -1,   260,
      -1,   262,    -1,   264,    -1,   265,    -1,   293,    -1,   287,
      -1,   289,    -1,   274,    -1,   278,    -1,   275,    -1,   276,
      -1,   288,    -1,   277,    -1,   279,    -1,   273,    -1,   285,
      -1,   281,    -1,   280,    -1,   282,    -1,   283,    -1,   284,
      -1,   291,    -1,   292,    -1,   294,    -1,   296,    -1,   297,
      -1,   302,    -1,   303,    -1,   304,    -1,   305,    -1,   306,
      -1,   307,    -1,   310,    -1,   311,    -1,   315,    -1,   313,
      -1,   317,    -1,   318,    -1,   319,    -1,   320,    -1,   321,
      -1,   322,    -1,   324,    -1,   323,    -1,   325,    -1,   328,
      -1,   329,    -1,   333,    -1,   332,    -1,   340,    -1,   334,
      -1,   335,    -1,   345,    -1,   346,    -1,   347,    -1,   349,
      -1,   350,    -1,   364,    -1,   365,    -1,   368,    -1,   369,
      -1,   370,    -1,   372,    -1,   373,    -1,   375,    -1,   374,
      -1,   376,    -1,   377,    -1,   382,    -1,   383,    -1,   385,
      -1,   387,    -1,   388,    -1,   389,    -1,   390,    -1,   391,
      -1,   393,    -1,   394,    -1,   395,    -1,   398,    -1,   402,
      -1,   403,    -1,   405,    -1,   404,    -1,   406,    -1,   409,
      -1,   410,    -1,   411,    -1,   412,    -1,   413,    -1,   415,
      -1,   418,    -1,   420,    -1,   423,    -1,   427,    -1,   430,
      -1,   431,    -1,   436,    -1,   437,    -1,   438,    -1,   439,
      -1,   440,    -1,   441,    -1,   443,    -1,   444,    -1,   446,
      -1,   452,    -1,   451,    -1,   453,    -1,   465,    -1,   458,
      -1,   462,    -1,   467,    -1,   469,    -1,   472,    -1,   473,
      -1,   481,    -1,   480,    -1,   483,    -1,   486,    -1,   489,
      -1,   491,    -1,   495,    -1,   497,    -1,   498,    -1,   499,
      -1,   500,    -1,   502,    -1,   501,    -1,   505,    -1,   506,
      -1,   507,    -1,   508,    -1,   515,    -1,   510,    -1,   514,
      -1,   511,    -1,   516,    -1,   517,    -1,   520,    -1,   521,
      -1,   532,    -1,   533,    -1,   523,    -1,   524,    -1,   525,
      -1,   526,    -1,   538,    -1,   539,    -1,   540,    -1,   186,
      -1,   542,    -1,   543,    -1,   546,    -1,   545,    -1,   552,
      -1,   555,    -1,   559,    -1,   560,    -1,   570,    -1,   574,
      -1,   567,    -1,   576,    -1,   575,    -1,   577,    -1,   584,
      -1,   587,    -1,   589,    -1,   592,    -1,    -1,   456,  1366,
    1365,  1367,    -1,    -1,   354,    -1,  1368,    -1,  1367,   605,
    1368,    -1,    -1,  1369,  1374,    -1,  1371,    -1,   192,    -1,
     260,    -1,   453,    -1,    -1,   349,    -1,    -1,   192,    -1,
     260,    -1,   453,    -1,    -1,   192,   611,    -1,   260,   611,
      -1,   453,   611,    -1,  1375,    -1,  1371,  1376,    -1,  1370,
    1377,  1239,  1380,    -1,  1370,   532,   235,   251,  1378,    -1,
     610,  1360,  1239,  1073,    -1,   610,   610,  1373,  1377,  1239,
    1380,    -1,   912,   917,    -1,   323,  1239,  1073,    -1,   323,
     914,   919,    -1,   372,  1239,  1379,    -1,   372,   181,  1361,
    1239,  1379,    -1,  1358,    -1,  1358,   611,  1358,    -1,   119,
     611,  1358,    -1,   399,   542,    -1,   399,    74,    -1,   420,
     399,    -1,   451,    -1,   519,    -1,   372,   603,   519,   604,
      -1,   347,   603,   519,   604,    -1,  1073,    -1,   119,    -1,
     348,    -1,    12,    -1,    33,    -1,    -1,   263,  1383,  1382,
    1384,    -1,   513,    -1,   510,    -1,  1385,    -1,  1384,   605,
    1385,    -1,  1351,  1164,  1386,    -1,   399,    -1,   586,    -1,
     271,   586,    -1,   399,   260,    -1,    -1,   553,  1388,  1383,
      -1,   198,  1351,   351,  1164,    -1,   198,  1353,    65,    -1,
      -1,   198,  1353,   399,  1390,  1391,  1166,  1183,    -1,  1392,
      -1,  1358,  1393,    -1,   174,    -1,   333,    -1,   174,    -1,
     333,    -1,   383,    -1,   244,    -1,    -1,  1395,  1394,   603,
    1244,   604,    -1,   153,    -1,   187,    -1,   245,    -1,   197,
      -1,   272,    -1,   433,   660,  1397,    -1,  1401,   348,  1400,
    1412,   183,  1414,    -1,  1401,   348,   186,  1412,   183,  1414,
      -1,  1401,   348,   386,  1412,   183,  1414,    -1,    12,  1402,
     605,   193,   354,   183,  1414,    -1,   391,   348,  1361,   183,
    1414,    -1,   193,   660,  1399,    -1,  1401,   348,  1400,  1412,
     530,  1414,  1419,  1420,    -1,  1401,   348,   186,  1412,   530,
    1414,  1419,  1420,    -1,  1401,   348,   386,  1412,   530,  1414,
    1419,  1420,    -1,   391,   348,  1361,   530,  1414,  1421,    -1,
      -1,   513,    -1,  1403,    -1,    12,  1402,    -1,    -1,   385,
      -1,  1404,    -1,  1403,   605,  1404,    -1,    -1,   448,  1405,
    1416,    -1,    -1,   224,  1406,  1416,    -1,    -1,   556,  1407,
    1416,    -1,    -1,   407,  1408,  1416,    -1,   123,    -1,   558,
      -1,   218,    -1,    13,    -1,    94,    -1,   136,    -1,   162,
      -1,   415,    -1,   462,    -1,   387,    -1,   173,    -1,   193,
     354,    -1,   461,   103,    -1,   505,    -1,    94,   516,   510,
      -1,   263,   510,    -1,   423,   466,    -1,   423,    64,    -1,
      94,   574,    -1,   461,   574,    -1,    94,   437,    -1,    13,
     437,    -1,    94,   559,    -1,   160,    -1,   534,    -1,    94,
     511,    -1,    -1,    16,    -1,  1411,  1409,  1410,    -1,  1411,
      -1,   500,   519,    -1,   236,   519,    -1,    62,   519,    -1,
     598,    -1,  1358,   611,   598,    -1,   598,   611,   598,    -1,
    1351,    -1,  1361,    -1,  1413,   605,  1361,    -1,  1415,    -1,
    1414,   605,  1415,    -1,  1361,   211,    46,   519,    -1,  1361,
     211,    46,   372,   519,    -1,  1361,   211,   581,  1360,    -1,
    1361,   211,   581,  1360,    18,  1355,    -1,  1361,    -1,    -1,
     603,  1417,   604,    -1,  1417,   605,  1418,    -1,  1418,    -1,
    1358,    -1,    -1,   424,  1410,    -1,   424,   487,    -1,   424,
     587,    -1,   424,   335,    -1,    -1,   581,  1422,    -1,    -1,
     581,   193,   354,    -1,  1422,  1423,    -1,  1423,    -1,   193,
     354,    -1,   292,  1188,    -1,   296,  1188,    -1,   291,  1188,
      -1,   297,  1188,    -1,    -1,    30,  1425,  1426,    -1,    -1,
     584,    -1,    -1,    16,   339,    55,    -1,    16,    55,    -1,
      -1,   414,    -1,   339,   414,    -1,    -1,   442,    -1,    75,
    1426,  1427,  1428,    -1,   435,  1426,  1427,  1428,    -1,   435,
    1426,   530,  1429,  1358,    -1,   442,  1358,    -1,   414,   442,
    1358,    -1,    -1,  1435,    -1,    -1,   550,  1442,  1436,  1053,
      -1,    -1,  1435,    -1,  1439,    -1,    -1,  1439,    -1,    -1,
    1440,  1441,    -1,  1178,  1182,    -1,  1184,    -1,    -1,   132,
      -1,    12,    -1,   448,  1134,    -1,   603,  1055,   604,    -1,
    1443,  1438,    -1,    -1,  1444,   550,  1442,  1445,  1443,  1438,
      -1,  1447,  1444,  1448,    -1,    -1,    -1,    -1,  1450,    -1,
    1450,  1451,    -1,  1451,    -1,   496,    -1,   203,    -1,   132,
      -1,   484,    -1,   479,    -1,   480,    -1,   482,    -1,    12,
      -1,  1457,  1453,    -1,  1456,  1454,    -1,  1458,  1455,  1462,
      -1,  1462,    -1,  1470,    -1,  1481,    -1,  1475,    -1,   647,
      -1,  1462,    -1,  1470,    -1,  1481,    -1,  1475,    -1,  1474,
      -1,   647,    -1,  1456,    -1,  1457,    -1,    -1,   120,   153,
    1361,    -1,  1459,    -1,  1459,  1460,    -1,  1460,    -1,   359,
     422,    -1,    11,   153,   543,    -1,    11,   153,   304,    -1,
      11,   153,   517,    -1,    -1,   485,   447,   120,    -1,   485,
     447,   230,    -1,    -1,  1461,   574,  1351,  1463,  1464,    18,
    1466,    -1,    -1,   603,  1465,   604,    -1,  1358,    -1,  1465,
     605,  1358,    -1,    -1,  1467,  1468,  1469,    -1,   448,  1056,
      -1,   603,  1054,   604,  1437,    -1,    -1,   581,    61,   354,
      -1,   581,    51,    61,   354,    -1,   581,   260,    61,   354,
      -1,    -1,    -1,    -1,   534,  1069,   661,   755,   756,   348,
    1069,  1471,  1351,   181,  1069,  1472,   141,   440,  1473,   705,
      -1,    10,  1069,   186,  1358,   431,   877,   471,  1355,    -1,
    1069,   186,  1358,   431,   877,   471,  1355,    -1,    -1,    -1,
      -1,    -1,    -1,  1069,   186,   661,   603,  1476,   672,   604,
    1477,   431,  1478,   910,  1479,   663,  1480,   705,    -1,    -1,
      -1,    -1,    -1,   386,  1069,   661,  1482,   603,  1483,   676,
     604,  1484,   663,  1485,   705,    -1,   588,  1488,  1487,  1489,
      -1,   588,   147,  1487,  1491,    -1,   588,   381,  1487,    -1,
     588,    75,  1487,  1490,    -1,   588,   435,  1487,    -1,   588,
     403,    -1,  1339,    -1,  1339,   605,  1339,    -1,  1339,   605,
    1339,   605,  1188,    -1,    30,    -1,   490,    -1,    -1,   238,
      -1,   430,    -1,    -1,   350,   373,    -1,    -1,    -1,   506,
    1492,  1493,    -1,    -1,   181,   307,    -1,   226,   375,  1358,
     471,  1355,    -1,   549,   375,  1358,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1656,  1656,  1669,  1668,  1693,  1700,  1702,  1706,  1707,
    1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,
    1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,
    1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,
    1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,  1761,
    1762,  1766,  1776,  1777,  1781,  1791,  1798,  1809,  1808,  1819,
    1821,  1825,  1826,  1830,  1843,  1842,  1862,  1861,  1878,  1879,
    1883,  1887,  1891,  1895,  1899,  1903,  1908,  1912,  1916,  1920,
    1924,  1928,  1934,  1965,  1970,  1973,  1975,  1976,  1980,  1986,
    1990,  2006,  2010,  2022,  2021,  2063,  2062,  2074,  2072,  2085,
    2083,  2095,  2094,  2107,  2106,  2114,  2118,  2122,  2126,  2133,
    2146,  2147,  2151,  2155,  2159,  2163,  2167,  2171,  2175,  2183,
    2182,  2214,  2213,  2220,  2227,  2228,  2233,  2238,  2247,  2253,
    2259,  2261,  2268,  2269,  2273,  2279,  2288,  2289,  2297,  2297,
    2355,  2356,  2357,  2358,  2359,  2360,  2361,  2362,  2363,  2364,
    2365,  2366,  2367,  2372,  2386,  2402,  2421,  2422,  2426,  2427,
    2432,  2434,  2436,  2438,  2440,  2442,  2444,  2450,  2451,  2452,
    2456,  2460,  2468,  2467,  2480,  2482,  2485,  2487,  2491,  2495,
    2502,  2504,  2508,  2509,  2514,  2533,  2559,  2561,  2565,  2566,
    2570,  2596,  2597,  2598,  2599,  2603,  2604,  2608,  2609,  2614,
    2617,  2644,  2643,  2708,  2724,  2723,  2771,  2797,  2797,  2820,
    2821,  2826,  2828,  2833,  2856,  2869,  2873,  2890,  2891,  2895,
    2899,  2908,  2915,  2922,  2932,  2947,  2970,  2976,  2977,  2983,
    2986,  2990,  2998,  3018,  3020,  3038,  3044,  3046,  3048,  3050,
    3052,  3054,  3056,  3058,  3060,  3062,  3064,  3066,  3071,  3086,
    3101,  3119,  3120,  3124,  3125,  3126,  3127,  3128,  3129,  3130,
    3131,  3132,  3133,  3134,  3135,  3136,  3141,  3140,  3147,  3147,
    3204,  3203,  3232,  3232,  3246,  3299,  3342,  3363,  3362,  3384,
    3403,  3405,  3406,  3410,  3430,  3453,  3455,  3471,  3453,  3490,
    3492,  3493,  3497,  3498,  3503,  3509,  3502,  3530,  3529,  3545,
    3546,  3550,  3551,  3556,  3560,  3555,  3581,  3585,  3580,  3604,
    3614,  3619,  3618,  3654,  3655,  3660,  3659,  3692,  3692,  3707,
    3706,  3742,  3754,  3756,  3753,  3783,  3782,  3803,  3805,  3810,
    3812,  3814,  3831,  3836,  3842,  3849,  3850,  3858,  3864,  3873,
    3879,  3885,  3886,  3890,  3890,  3895,  3896,  3897,  3901,  3902,
    3903,  3907,  3911,  3912,  3913,  3917,  3918,  3919,  3920,  3921,
    3922,  3923,  3924,  3928,  3932,  3933,  3934,  3938,  3939,  3940,
    3941,  3942,  3946,  3950,  3951,  3952,  3956,  3957,  3958,  3959,
    3960,  3961,  3962,  3966,  3970,  3971,  3972,  3976,  3977,  3978,
    3983,  3991,  3999,  4007,  4019,  4031,  4036,  4041,  4049,  4057,
    4065,  4073,  4081,  4089,  4097,  4110,  4123,  4136,  4138,  4142,
    4147,  4160,  4161,  4212,  4213,  4216,  4231,  4249,  4254,  4252,
    4259,  4261,  4260,  4264,  4263,  4269,  4306,  4307,  4312,  4311,
    4330,  4349,  4348,  4365,  4369,  4377,  4376,  4379,  4381,  4383,
    4385,  4390,  4391,  4396,  4397,  4401,  4402,  4406,  4425,  4435,
    4446,  4455,  4456,  4472,  4474,  4473,  4478,  4476,  4487,  4488,
    4492,  4510,  4526,  4527,  4543,  4558,  4580,  4581,  4586,  4585,
    4609,  4619,  4641,  4640,  4658,  4657,  4677,  4699,  4703,  4732,
    4744,  4745,  4750,  4761,  4749,  4786,  4787,  4791,  4804,  4825,
    4838,  4864,  4865,  4870,  4869,  4906,  4911,  4912,  4916,  4917,
    4921,  4923,  4929,  4931,  4933,  4935,  4937,  4939,  4949,  4964,
    4948,  4978,  4979,  4983,  4984,  4988,  4989,  4993,  4994,  4998,
    4999,  5003,  5004,  5008,  5012,  5013,  5016,  5018,  5022,  5023,
    5027,  5028,  5029,  5033,  5039,  5044,  5049,  5054,  5059,  5064,
    5069,  5084,  5090,  5095,  5100,  5105,  5111,  5110,  5136,  5137,
    5138,  5143,  5148,  5153,  5155,  5157,  5159,  5165,  5173,  5191,
    5208,  5231,  5245,  5246,  5247,  5248,  5249,  5250,  5254,  5255,
    5256,  5260,  5261,  5265,  5266,  5267,  5268,  5273,  5280,  5281,
    5285,  5286,  5290,  5291,  5298,  5303,  5309,  5315,  5321,  5339,
    5345,  5347,  5351,  5355,  5356,  5360,  5365,  5364,  5387,  5388,
    5389,  5390,  5395,  5399,  5404,  5409,  5413,  5418,  5423,  5429,
    5434,  5440,  5444,  5449,  5454,  5456,  5458,  5460,  5473,  5475,
    5480,  5485,  5497,  5502,  5507,  5512,  5514,  5516,  5518,  5520,
    5522,  5524,  5526,  5529,  5528,  5533,  5532,  5536,  5538,  5547,
    5548,  5549,  5554,  5555,  5556,  5557,  5558,  5562,  5566,  5567,
    5571,  5572,  5576,  5577,  5578,  5579,  5580,  5584,  5585,  5586,
    5587,  5588,  5592,  5597,  5599,  5605,  5606,  5608,  5613,  5622,
    5623,  5627,  5628,  5632,  5633,  5634,  5638,  5639,  5640,  5641,
    5644,  5645,  5649,  5650,  5654,  5655,  5659,  5660,  5664,  5665,
    5666,  5667,  5668,  5669,  5676,  5677,  5683,  5689,  5695,  5701,
    5702,  5719,  5740,  5746,  5751,  5752,  5756,  5764,  5768,  5769,
    5773,  5774,  5778,  5787,  5791,  5792,  5796,  5807,  5808,  5812,
    5813,  5817,  5818,  5823,  5824,  5828,  5835,  5844,  5852,  5863,
    5864,  5865,  5866,  5867,  5868,  5873,  5881,  5882,  5886,  5888,
    5892,  5904,  5905,  5909,  5916,  5929,  5930,  5932,  5934,  5940,
    5945,  5951,  5957,  5964,  5974,  5975,  5976,  5977,  5978,  5982,
    5986,  5987,  5991,  5992,  5996,  5997,  6001,  6002,  6003,  6007,
    6008,  6012,  6016,  6029,  6041,  6042,  6046,  6047,  6051,  6052,
    6056,  6057,  6061,  6062,  6066,  6067,  6071,  6072,  6076,  6077,
    6081,  6083,  6087,  6088,  6092,  6096,  6097,  6110,  6111,  6112,
    6116,  6117,  6121,  6127,  6141,  6142,  6146,  6147,  6151,  6152,
    6160,  6159,  6198,  6197,  6211,  6223,  6222,  6241,  6240,  6259,
    6258,  6277,  6271,  6291,  6290,  6323,  6328,  6333,  6338,  6343,
    6353,  6354,  6355,  6356,  6360,  6361,  6373,  6374,  6378,  6379,
    6382,  6384,  6385,  6386,  6388,  6390,  6391,  6400,  6401,  6405,
    6414,  6412,  6426,  6440,  6439,  6453,  6451,  6465,  6472,  6483,
    6487,  6494,  6498,  6503,  6502,  6518,  6520,  6525,  6533,  6532,
    6548,  6552,  6551,  6563,  6564,  6568,  6583,  6584,  6588,  6597,
    6601,  6606,  6611,  6610,  6621,  6630,  6620,  6645,  6654,  6658,
    6667,  6676,  6682,  6688,  6697,  6706,  6725,  6746,  6751,  6755,
    6763,  6764,  6768,  6769,  6773,  6774,  6775,  6779,  6780,  6781,
    6785,  6786,  6787,  6788,  6797,  6796,  6807,  6815,  6814,  6824,
    6833,  6842,  6843,  6850,  6850,  6856,  6857,  6861,  6862,  6863,
    6867,  6868,  6884,  6885,  6890,  6889,  6901,  6902,  6903,  6908,
    6907,  6929,  6930,  6934,  6935,  6939,  6940,  6941,  6946,  6945,
    6967,  6976,  6975,  7002,  7003,  7007,  7008,  7012,  7013,  7014,
    7015,  7016,  7017,  7022,  7021,  7043,  7044,  7045,  7050,  7049,
    7055,  7062,  7067,  7075,  7076,  7080,  7094,  7093,  7106,  7107,
    7111,  7112,  7116,  7126,  7136,  7137,  7142,  7141,  7152,  7153,
    7157,  7158,  7162,  7172,  7183,  7182,  7190,  7190,  7201,  7202,
    7207,  7208,  7217,  7226,  7227,  7231,  7236,  7241,  7246,  7251,
    7250,  7270,  7278,  7270,  7285,  7286,  7287,  7288,  7289,  7293,
    7300,  7307,  7309,  7320,  7321,  7325,  7326,  7354,  7384,  7386,
    7392,  7402,  7403,  7404,  7419,  7426,  7452,  7458,  7464,  7465,
    7466,  7467,  7468,  7472,  7473,  7478,  7529,  7536,  7579,  7585,
    7591,  7597,  7603,  7609,  7615,  7621,  7625,  7631,  7637,  7643,
    7649,  7655,  7659,  7665,  7675,  7681,  7689,  7695,  7705,  7711,
    7720,  7730,  7736,  7746,  7752,  7761,  7765,  7771,  7777,  7783,
    7789,  7795,  7801,  7807,  7813,  7819,  7825,  7831,  7837,  7843,
    7849,  7853,  7854,  7858,  7859,  7863,  7864,  7868,  7869,  7873,
    7874,  7875,  7876,  7877,  7878,  7882,  7883,  7887,  7888,  7889,
    7890,  7891,  7892,  7904,  7905,  7906,  7907,  7908,  7914,  7918,
    7924,  7930,  7936,  7942,  7944,  7951,  7958,  7964,  7966,  7975,
    7982,  7990,  7996,  8003,  8009,  8023,  8030,  8046,  8052,  8058,
    8066,  8072,  8078,  8084,  8090,  8105,  8117,  8123,  8129,  8135,
    8141,  8147,  8153,  8159,  8165,  8171,  8177,  8183,  8189,  8195,
    8201,  8207,  8213,  8221,  8242,  8249,  8255,  8262,  8269,  8276,
    8283,  8290,  8296,  8302,  8309,  8316,  8322,  8329,  8335,  8341,
    8347,  8353,  8359,  8377,  8387,  8393,  8399,  8406,  8413,  8428,
    8434,  8440,  8446,  8452,  8459,  8465,  8471,  8477,  8483,  8495,
    8501,  8507,  8513,  8519,  8531,  8537,  8553,  8559,  8566,  8573,
    8580,  8587,  8594,  8598,  8618,  8617,  8685,  8717,  8719,  8724,
    8725,  8729,  8730,  8734,  8735,  8739,  8746,  8754,  8780,  8786,
    8792,  8798,  8804,  8810,  8819,  8826,  8828,  8825,  8835,  8846,
    8852,  8858,  8864,  8870,  8876,  8882,  8888,  8894,  8901,  8900,
    8919,  8918,  8933,  8943,  8951,  8967,  8968,  8973,  8978,  8983,
    8986,  8999,  8998,  9015,  9017,  9019,  9021,  9023,  9025,  9027,
    9029,  9031,  9033,  9035,  9040,  9041,  9045,  9052,  9060,  9061,
    9065,  9072,  9080,  9081,  9085,  9086,  9090,  9098,  9109,  9110,
    9119,  9130,  9131,  9137,  9138,  9158,  9160,  9164,  9162,  9179,
    9177,  9195,  9193,  9200,  9209,  9207,  9225,  9224,  9234,  9245,
    9243,  9262,  9261,  9272,  9283,  9284,  9285,  9297,  9297,  9311,
    9351,  9402,  9406,  9411,  9403,  9423,  9443,  9451,  9443,  9460,
    9459,  9482,  9499,  9482,  9506,  9510,  9536,  9537,  9542,  9545,
    9546,  9547,  9551,  9552,  9557,  9556,  9562,  9561,  9569,  9570,
    9573,  9575,  9575,  9579,  9579,  9584,  9585,  9589,  9591,  9596,
    9597,  9601,  9612,  9625,  9626,  9627,  9628,  9629,  9630,  9631,
    9632,  9633,  9634,  9635,  9636,  9640,  9641,  9642,  9643,  9644,
    9645,  9646,  9647,  9648,  9652,  9653,  9654,  9655,  9658,  9660,
    9661,  9665,  9666,  9674,  9676,  9680,  9682,  9681,  9695,  9698,
    9697,  9712,  9718,  9733,  9735,  9739,  9741,  9746,  9747,  9767,
    9792,  9796,  9797,  9801,  9814,  9816,  9821,  9820,  9855,  9857,
    9862,  9863,  9864,  9869,  9875,  9879,  9880,  9884,  9891,  9898,
    9905,  9915,  9948,  9952,  9958,  9964,  9974,  9978,  9988,  9989,
    9990,  9991,  9992,  9993,  9997,  9998,  9999, 10000, 10001, 10005,
   10006, 10007, 10008, 10009, 10013, 10014, 10015, 10016, 10020, 10025,
   10026, 10029, 10032, 10031, 10062, 10063, 10067, 10068, 10072, 10084,
   10084, 10094, 10095, 10099, 10118, 10151, 10150, 10163, 10171, 10162,
   10173, 10185, 10197, 10196, 10214, 10213, 10224, 10224, 10240, 10247,
   10270, 10291, 10303, 10308, 10307, 10317, 10323, 10330, 10335, 10340,
   10350, 10351, 10355, 10366, 10367, 10371, 10382, 10383, 10387, 10388,
   10396, 10404, 10395, 10414, 10421, 10413, 10431, 10443, 10444, 10452,
   10456, 10457, 10468, 10469, 10473, 10482, 10483, 10484, 10486, 10485,
   10496, 10497, 10501, 10502, 10504, 10503, 10507, 10506, 10512, 10513,
   10517, 10518, 10522, 10532, 10533, 10537, 10538, 10543, 10542, 10556,
   10557, 10561, 10566, 10574, 10575, 10583, 10585, 10585, 10593, 10601,
   10592, 10623, 10624, 10628, 10636, 10637, 10641, 10651, 10652, 10659,
   10658, 10674, 10673, 10685, 10684, 10696, 10695, 10709, 10710, 10714,
   10727, 10743, 10744, 10748, 10749, 10753, 10754, 10755, 10760, 10759,
   10781, 10783, 10786, 10788, 10791, 10792, 10795, 10799, 10803, 10807,
   10811, 10815, 10819, 10823, 10827, 10835, 10838, 10848, 10847, 10860,
   10867, 10875, 10883, 10891, 10899, 10907, 10914, 10916, 10918, 10927,
   10931, 10936, 10935, 10941, 10940, 10945, 10954, 10961, 10966, 10971,
   10976, 10978, 10980, 10982, 10984, 10986, 10993, 11001, 11003, 11011,
   11018, 11025, 11035, 11042, 11048, 11057, 11065, 11069, 11073, 11080,
   11087, 11093, 11100, 11107, 11112, 11117, 11125, 11127, 11129, 11134,
   11135, 11138, 11140, 11144, 11145, 11149, 11150, 11154, 11155, 11159,
   11160, 11164, 11165, 11168, 11170, 11177, 11188, 11187, 11200, 11199,
   11209, 11210, 11214, 11215, 11216, 11220, 11221, 11222, 11237, 11236,
   11249, 11258, 11248, 11260, 11264, 11265, 11279, 11280, 11285, 11287,
   11289, 11291, 11293, 11295, 11297, 11299, 11301, 11303, 11305, 11307,
   11309, 11311, 11313, 11318, 11319, 11324, 11323, 11333, 11334, 11338,
   11339, 11340, 11345, 11344, 11355, 11359, 11363, 11375, 11385, 11386,
   11387, 11393, 11405, 11417, 11427, 11437, 11404, 11445, 11446, 11450,
   11451, 11455, 11456, 11468, 11472, 11473, 11474, 11477, 11479, 11483,
   11484, 11488, 11493, 11500, 11505, 11512, 11514, 11518, 11519, 11523,
   11528, 11536, 11537, 11540, 11542, 11550, 11552, 11556, 11557, 11558,
   11562, 11564, 11569, 11570, 11579, 11580, 11584, 11585, 11589, 11602,
   11626, 11638, 11649, 11668, 11676, 11688, 11703, 11724, 11725, 11726,
   11734, 11735, 11736, 11743, 11749, 11755, 11761, 11767, 11796, 11824,
   11825, 11826, 11830, 11840, 11850, 11856, 11865, 11880, 11881, 11885,
   11894, 11910, 11914, 11961, 11965, 11983, 11987, 12066, 12091, 12122,
   12123, 12139, 12149, 12153, 12159, 12165, 12175, 12181, 12190, 12200,
   12201, 12231, 12247, 12263, 12280, 12281, 12292, 12293, 12304, 12305,
   12306, 12310, 12327, 12349, 12364, 12365, 12366, 12367, 12368, 12369,
   12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379,
   12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389,
   12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399,
   12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409,
   12410, 12411, 12412, 12413, 12423, 12424, 12425, 12426, 12427, 12428,
   12429, 12430, 12431, 12432, 12433, 12434, 12435, 12436, 12437, 12438,
   12439, 12440, 12441, 12442, 12443, 12444, 12445, 12446, 12447, 12448,
   12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458,
   12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468,
   12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478,
   12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488,
   12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498,
   12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508,
   12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518,
   12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528,
   12529, 12530, 12531, 12532, 12533, 12534, 12535, 12536, 12537, 12538,
   12539, 12540, 12541, 12542, 12543, 12544, 12545, 12546, 12547, 12548,
   12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558,
   12559, 12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568,
   12569, 12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578,
   12579, 12580, 12581, 12582, 12583, 12584, 12585, 12586, 12587, 12588,
   12589, 12590, 12591, 12592, 12593, 12594, 12595, 12596, 12597, 12598,
   12599, 12600, 12601, 12602, 12603, 12604, 12605, 12606, 12607, 12608,
   12609, 12610, 12611, 12612, 12613, 12614, 12615, 12616, 12617, 12618,
   12619, 12620, 12621, 12622, 12623, 12624, 12625, 12626, 12627, 12628,
   12629, 12630, 12631, 12632, 12633, 12634, 12635, 12636, 12637, 12638,
   12639, 12640, 12641, 12642, 12643, 12644, 12645, 12646, 12647, 12648,
   12649, 12650, 12651, 12652, 12653, 12654, 12655, 12656, 12657, 12658,
   12659, 12660, 12661, 12662, 12663, 12664, 12665, 12666, 12667, 12668,
   12669, 12670, 12671, 12672, 12673, 12674, 12675, 12676, 12677, 12678,
   12679, 12680, 12681, 12682, 12683, 12684, 12685, 12686, 12687, 12688,
   12689, 12690, 12691, 12692, 12693, 12694, 12695, 12696, 12697, 12698,
   12699, 12700, 12707, 12706, 12721, 12722, 12726, 12727, 12731, 12731,
   12813, 12814, 12815, 12816, 12820, 12821, 12825, 12826, 12827, 12828,
   12832, 12833, 12834, 12835, 12839, 12840, 12844, 12886, 12905, 12916,
   12929, 12943, 12958, 12977, 13004, 13017, 13044, 13087, 13101, 13102,
   13103, 13104, 13108, 13109, 13118, 13130, 13131, 13132, 13138, 13144,
   13156, 13155, 13171, 13172, 13176, 13177, 13181, 13194, 13195, 13196,
   13197, 13202, 13201, 13221, 13233, 13246, 13245, 13278, 13279, 13283,
   13284, 13288, 13289, 13290, 13291, 13293, 13292, 13305, 13306, 13307,
   13308, 13309, 13315, 13320, 13326, 13337, 13348, 13352, 13362, 13367,
   13374, 13386, 13398, 13407, 13409, 13413, 13414, 13421, 13423, 13427,
   13428, 13433, 13432, 13436, 13435, 13439, 13438, 13442, 13441, 13444,
   13445, 13446, 13447, 13448, 13449, 13450, 13451, 13452, 13453, 13454,
   13455, 13456, 13457, 13458, 13459, 13460, 13461, 13462, 13463, 13464,
   13465, 13466, 13467, 13468, 13469, 13473, 13474, 13478, 13479, 13483,
   13493, 13503, 13516, 13531, 13544, 13557, 13569, 13574, 13582, 13587,
   13595, 13624, 13631, 13639, 13647, 13653, 13657, 13661, 13662, 13666,
   13693, 13695, 13699, 13703, 13707, 13714, 13715, 13719, 13720, 13724,
   13725, 13729, 13730, 13736, 13742, 13748, 13758, 13757, 13767, 13768,
   13773, 13774, 13775, 13780, 13781, 13782, 13786, 13787, 13791, 13803,
   13812, 13822, 13831, 13845, 13846, 13851, 13850, 13866, 13867, 13868,
   13871, 13873, 13877, 13877, 13901, 13902, 13906, 13907, 13908, 13912,
   13916, 13923, 13926, 13924, 13940, 13947, 13968, 13985, 13987, 13991,
   13992, 13996, 13997, 14005, 14006, 14007, 14008, 14014, 14020, 14030,
   14032, 14034, 14039, 14040, 14041, 14042, 14043, 14047, 14048, 14049,
   14050, 14051, 14052, 14062, 14063, 14068, 14081, 14094, 14096, 14098,
   14103, 14108, 14110, 14112, 14118, 14119, 14121, 14127, 14126, 14144,
   14145, 14149, 14154, 14162, 14162, 14187, 14188, 14193, 14194, 14196,
   14198, 14216, 14222, 14227, 14209, 14289, 14307, 14332, 14364, 14368,
   14376, 14399, 14328, 14464, 14488, 14497, 14505, 14463, 14526, 14530,
   14534, 14538, 14542, 14546, 14553, 14560, 14567, 14577, 14578, 14582,
   14583, 14584, 14588, 14589, 14594, 14596, 14595, 14601, 14602, 14606,
   14616
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADDDATE_SYM", "AFTER_SYM", "AGAINST", "AGGREGATE_SYM",
  "ALGORITHM_SYM", "ALL", "ALTER", "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM",
  "ANY_SYM", "AS", "ASC", "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM",
  "AUTHORS_SYM", "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM", "CHECKSUM_SYM",
  "CHECK_SYM", "CIPHER_SYM", "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_SYM", "COLUMN_NAME_SYM", "COMMENT_SYM", "COMMITTED_SYM",
  "COMMIT_SYM", "COMPACT_SYM", "COMPLETION_SYM", "COMPRESSED_SYM",
  "CONCURRENT", "CONDITION_SYM", "CONNECTION_SYM", "CONSISTENT_SYM",
  "CONSTRAINT", "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM",
  "CONSTRAINT_SCHEMA_SYM", "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM",
  "CONTRIBUTORS_SYM", "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE",
  "CROSS", "CUBE_SYM", "CURDATE", "CURRENT_USER", "CURSOR_SYM",
  "CURSOR_NAME_SYM", "CURTIME", "DATABASE", "DATABASES", "DATAFILE_SYM",
  "DATA_SYM", "DATETIME", "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL",
  "DATE_SYM", "DAY_HOUR_SYM", "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM",
  "DAY_SECOND_SYM", "DAY_SYM", "DEALLOCATE_SYM", "DECIMAL_NUM",
  "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT", "DEFINER_SYM", "DELAYED_SYM",
  "DELAY_KEY_WRITE_SYM", "DELETE_SYM", "DESC", "DESCRIBE", "DES_KEY_FILE",
  "DETERMINISTIC_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD",
  "DISK_SYM", "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP",
  "DUAL_SYM", "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM",
  "ELSE", "ELSEIF_SYM", "ENABLE_SYM", "ENC_SYM", "ENCLOSED", "END",
  "ENDS_SYM", "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQ",
  "EQUAL_SYM", "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM",
  "EVENTS_SYM", "EVENT_SYM", "EVERY_SYM", "EXECUTE_SYM", "EXISTS",
  "EXIT_SYM", "EXPANSION_SYM", "EXTENDED_SYM", "EXTENT_SIZE_SYM",
  "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM", "FETCH_SYM",
  "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM", "FLOAT_SYM",
  "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM", "FROM",
  "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT", "GLOBAL_SYM",
  "GRANT", "GRANTS", "GROUP_SYM", "GROUP_CONCAT_SYM", "GT_SYM",
  "HANDLER_SYM", "HASH_SYM", "HAVING", "HELP_SYM", "HEX_NUM",
  "HIGH_PRIORITY", "HOST_SYM", "HOSTS_SYM", "HOUR_MICROSECOND_SYM",
  "HOUR_MINUTE_SYM", "HOUR_SECOND_SYM", "HOUR_SYM", "IDENT",
  "IDENTIFIED_SYM", "IDENT_QUOTED", "IF", "IGNORE_SYM",
  "IGNORE_SERVER_IDS_SYM", "IMPORT", "INDEXES", "INDEX_SYM", "INFILE",
  "INITIAL_SIZE_SYM", "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM",
  "INSERT", "INSERT_METHOD", "INSTALL_SYM", "INTERVAL_SYM", "INTO",
  "INT_SYM", "INVOKER_SYM", "IN_SYM", "IO_SYM", "IPC_SYM", "IS",
  "ISOLATION", "ISSUER_SYM", "ITERATE_SYM", "JOIN_SYM", "KEYS",
  "KEY_BLOCK_SIZE", "KEY_SYM", "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM",
  "LE", "LEADING", "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM",
  "LEX_HOSTNAME", "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING",
  "LIST_SYM", "LOAD", "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM",
  "LOGFILE_SYM", "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM",
  "LONG_SYM", "LOOP_SYM", "LOW_PRIORITY", "LT", "MASTER_CONNECT_RETRY_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH", "MAX_CONNECTIONS_PER_HOUR",
  "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE_SYM", "MAX_SYM",
  "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM",
  "MEDIUMBLOB", "MEDIUMINT", "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM",
  "MERGE_SYM", "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM", "NATIONAL_SYM",
  "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM", "NE", "NEG",
  "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM", "NOT2_SYM",
  "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM", "NO_WRITE_TO_BINLOG",
  "NULL_SYM", "NUM", "NUMERIC_SYM", "NVARCHAR_SYM", "OFFSET_SYM",
  "OLD_PASSWORD", "ON", "ONE_SHOT_SYM", "ONE_SYM", "OPEN_SYM", "OPTIMIZE",
  "OPTIONS_SYM", "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM",
  "OR_OR_SYM", "OR_SYM", "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM",
  "PACK_KEYS_SYM", "PAGE_SYM", "PARAM_MARKER", "PARSER_SYM", "PARTIAL",
  "PARTITIONING_SYM", "PARTITIONS_SYM", "PARTITION_SYM", "PASSWORD",
  "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM", "POINT_SYM", "POLYGON",
  "PORT_SYM", "POSITION_SYM", "PRECISION", "PREPARE_SYM", "PRESERVE_SYM",
  "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES", "PROCEDURE_SYM", "PROCESS",
  "PROCESSLIST_SYM", "PROFILE_SYM", "PROFILES_SYM", "PROXY_SYM", "PURGE",
  "QUARTER_SYM", "QUERY_SYM", "QUICK", "RANGE_SYM", "READS_SYM",
  "READ_ONLY_SYM", "READ_SYM", "READ_WRITE_SYM", "REAL", "REBUILD_SYM",
  "RECOVER_SYM", "REDOFILE_SYM", "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM",
  "REFERENCES", "REGEXP", "RELAY", "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM",
  "RELAY_LOG_POS_SYM", "RELAY_THREAD", "RELEASE_SYM", "RELOAD",
  "REMOVE_SYM", "RENAME", "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM",
  "REPEAT_SYM", "REPLACE", "REPLICATION", "REQUIRE_SYM", "RESET_SYM",
  "RESIGNAL_SYM", "RESOURCES", "RESTORE_SYM", "RESTRICT", "RESUME_SYM",
  "RETURNS_SYM", "RETURN_SYM", "REVOKE", "RIGHT", "ROLLBACK_SYM",
  "ROLLUP_SYM", "ROUTINE_SYM", "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM",
  "RTREE_SYM", "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLOW", "SMALLINT",
  "SNAPSHOT_SYM", "SOCKET_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM",
  "SPATIAL_SYM", "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM",
  "SQLWARNING_SYM", "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM", "STOP_SYM", "STORAGE_SYM",
  "STRAIGHT_JOIN", "STRING_SYM", "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM",
  "SUBJECT_SYM", "SUBPARTITIONS_SYM", "SUBPARTITION_SYM", "SUBSTRING",
  "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM", "SWAPS_SYM", "SWITCHES_SYM",
  "SYSDATE", "TABLES", "TABLESPACE", "TABLE_REF_PRIORITY", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM", "TRUNCATE_SYM",
  "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM", "ULONGLONG_NUM",
  "UNCOMMITTED_SYM", "UNDEFINED_SYM", "UNDERSCORE_CHARSET", "UNDOFILE_SYM",
  "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM", "UNICODE_SYM", "UNINSTALL_SYM",
  "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM", "UNLOCK_SYM", "UNSIGNED",
  "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM", "USAGE", "USER", "USE_FRM",
  "USE_SYM", "USING", "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM",
  "VALUES", "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES",
  "VARIANCE_SYM", "VARYING", "VAR_SAMP_SYM", "VIEW_SYM", "WAIT_SYM",
  "WARNINGS", "WEEK_SYM", "WHEN_SYM", "WHERE", "WHILE_SYM", "WITH",
  "WITH_CUBE_SYM", "WITH_ROLLUP_SYM", "WORK_SYM", "WRAPPER_SYM",
  "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM", "XOR", "YEAR_MONTH_SYM",
  "YEAR_SYM", "ZEROFILL", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'",
  "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'",
  "'.'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "execute", "$@2", "execute_using",
  "execute_var_list", "execute_var_ident", "help", "$@3", "change", "$@4",
  "master_defs", "master_def", "ignore_server_id_list", "ignore_server_id",
  "master_file_def", "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10",
  "server_def", "server_options_list", "server_option", "event_tail",
  "$@11", "ev_schedule_time", "$@12", "opt_ev_status", "ev_starts",
  "ev_ends", "opt_ev_on_completion", "ev_on_completion", "opt_ev_comment",
  "ev_sql_stmt", "$@13", "ev_sql_stmt_inner", "clear_privileges",
  "sp_name", "sp_a_chistics", "sp_c_chistics", "sp_chistic",
  "sp_c_chistic", "sp_suid", "call", "$@14", "opt_sp_cparam_list",
  "opt_sp_cparams", "sp_cparams", "sp_fdparam_list", "sp_fdparams",
  "sp_init_param", "sp_fdparam", "sp_pdparam_list", "sp_pdparams",
  "sp_pdparam", "sp_opt_inout", "sp_proc_stmts", "sp_proc_stmts1",
  "sp_decls", "sp_decl", "$@15", "$@16", "sp_cursor_stmt", "$@17",
  "sp_handler_type", "sp_hcond_list", "sp_hcond_element", "sp_cond",
  "sqlstate", "opt_value", "sp_hcond", "signal_stmt", "signal_value",
  "opt_signal_value", "opt_set_signal_information",
  "signal_information_item_list", "signal_allowed_expr",
  "signal_condition_information_item_name", "resignal_stmt",
  "sp_decl_idents", "sp_opt_default", "sp_proc_stmt", "sp_proc_stmt_if",
  "$@18", "sp_proc_stmt_statement", "$@19", "sp_proc_stmt_return", "$@20",
  "sp_proc_stmt_unlabeled", "$@21", "sp_proc_stmt_leave",
  "sp_proc_stmt_iterate", "sp_proc_stmt_open", "sp_proc_stmt_fetch",
  "$@22", "sp_proc_stmt_close", "sp_opt_fetch_noise", "sp_fetch_list",
  "sp_if", "$@23", "$@24", "$@25", "sp_elseifs", "case_stmt_specification",
  "simple_case_stmt", "$@26", "$@27", "searched_case_stmt", "$@28",
  "simple_when_clause_list", "searched_when_clause_list",
  "simple_when_clause", "$@29", "$@30", "searched_when_clause", "$@31",
  "$@32", "else_clause_opt", "sp_labeled_control", "$@33", "sp_opt_label",
  "sp_labeled_block", "$@34", "sp_unlabeled_block", "$@35",
  "sp_block_content", "$@36", "sp_unlabeled_control", "$@37", "$@38",
  "$@39", "trg_action_time", "trg_event", "change_tablespace_access",
  "change_tablespace_info", "tablespace_info", "opt_logfile_group_name",
  "alter_tablespace_info", "logfile_group_info",
  "alter_logfile_group_info", "add_log_file", "change_ts_option_list",
  "$@40", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create2",
  "create2a", "$@41", "create3", "$@42", "$@43", "opt_create_partitioning",
  "opt_partitioning", "partitioning", "$@44", "have_partitioning",
  "partition_entry", "$@45", "partition", "part_type_def", "$@46",
  "opt_linear", "part_field_list", "part_field_item_list",
  "part_field_item", "part_column_list", "part_func", "sub_part_func",
  "opt_num_parts", "opt_sub_part", "$@47", "$@48", "sub_part_field_list",
  "sub_part_field_item", "part_func_expr", "opt_num_subparts", "part_defs",
  "part_def_list", "part_definition", "$@49", "part_name",
  "opt_part_values", "$@50", "$@51", "part_func_max", "part_values_in",
  "part_value_list", "part_value_item", "$@52", "$@53",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@54", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@55", "$@56", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "opt_create_table_options", "create_table_options_space_separated",
  "create_table_options", "create_table_option", "$@57", "default_charset",
  "default_collation", "storage_engines", "known_storage_engines",
  "row_types", "merge_insert_types", "opt_select_from", "udf_type",
  "create_field_list", "field_list", "field_list_item", "column_def",
  "key_def", "opt_check_constraint", "check_constraint", "opt_constraint",
  "constraint", "field_spec", "$@58", "type", "$@59", "$@60",
  "spatial_type", "char", "nchar", "varchar", "nvarchar", "int_type",
  "real_type", "float_options", "precision", "field_options",
  "field_opt_list", "field_option", "field_length", "opt_field_length",
  "opt_precision", "opt_attribute", "opt_attribute_list", "attribute",
  "type_with_opt_collate", "now_or_signed_literal", "charset",
  "charset_name", "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident", "opt_component",
  "string_list", "alter", "$@61", "$@62", "$@63", "$@64", "$@65", "$@66",
  "$@67", "ev_alter_on_schedule_completion", "opt_ev_rename_to",
  "opt_ev_sql_stmt", "ident_or_empty", "alter_commands", "$@68", "$@69",
  "$@70", "remove_partitioning", "all_or_alt_part_name_list",
  "add_partition_rule", "$@71", "add_part_extra", "reorg_partition_rule",
  "$@72", "reorg_parts_rule", "$@73", "alt_part_name_list",
  "alt_part_name_item", "alter_list", "add_column", "alter_list_item",
  "$@74", "$@75", "$@76", "opt_column", "opt_ignore", "opt_restrict",
  "opt_place", "opt_to", "slave", "$@77", "$@78", "start",
  "start_transaction_opts", "slave_thread_opts", "$@79",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@80", "opt_checksum_type", "repair",
  "$@81", "opt_mi_repair_type", "mi_repair_types", "mi_repair_type",
  "analyze", "$@82", "binlog_base64_event", "check", "$@83",
  "opt_mi_check_type", "mi_check_types", "mi_check_type", "optimize",
  "$@84", "opt_no_write_to_binlog", "rename", "$@85", "rename_list",
  "table_to_table_list", "table_to_table", "keycache", "$@86",
  "keycache_list_or_parts", "keycache_list", "assign_to_keycache",
  "assign_to_keycache_parts", "key_cache_name", "preload", "$@87",
  "preload_list_or_parts", "preload_list", "preload_keys",
  "preload_keys_parts", "adm_partition", "$@88", "cache_keys_spec", "$@89",
  "cache_key_list_or_empty", "opt_ignore_leaves", "select", "select_init",
  "select_paren", "select_paren_derived", "select_init2", "$@90",
  "select_part2", "$@91", "$@92", "select_into", "select_from",
  "select_options", "select_option_list", "select_option",
  "select_lock_type", "select_item_list", "select_item", "remember_name",
  "remember_end", "select_alias", "optional_braces", "expr", "bool_pri",
  "predicate", "bit_expr", "or", "and", "not", "not2", "comp_op",
  "all_or_any", "simple_expr", "function_call_keyword",
  "function_call_nonkeyword", "function_call_conflict",
  "geometry_function", "function_call_generic", "@93", "fulltext_options",
  "opt_natural_language_mode", "opt_query_expansion", "opt_udf_expr_list",
  "udf_expr_list", "udf_expr", "sum_expr", "$@94", "$@95", "$@96",
  "variable", "$@97", "variable_aux", "opt_distinct",
  "opt_gconcat_separator", "opt_gorder_clause", "in_sum_expr", "$@98",
  "cast_type", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@99", "$@100", "$@101", "$@102", "$@103", "$@104", "$@105",
  "normal_join", "table_factor", "$@106", "select_derived_union", "$@107",
  "$@108", "select_init2_derived", "select_part2_derived", "$@109",
  "$@110", "select_derived", "$@111", "select_derived2", "$@112", "$@113",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@114",
  "$@115", "index_hints_list", "opt_index_hints_list", "$@116",
  "opt_key_definition", "$@117", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@118", "having_clause", "$@119", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@120", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "delete_limit_clause", "ulong_num",
  "real_ulong_num", "ulonglong_num", "real_ulonglong_num", "dec_num_error",
  "dec_num", "procedure_clause", "$@121", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@122",
  "select_var_list", "select_var_ident", "into", "$@123",
  "into_destination", "$@124", "$@125", "do", "$@126", "drop", "$@127",
  "$@128", "$@129", "table_list", "table_name", "table_alias_ref_list",
  "table_alias_ref", "if_exists", "opt_temporary", "insert", "$@130",
  "$@131", "replace", "$@132", "$@133", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@134", "fields", "insert_values", "$@135", "$@136", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@137", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@138", "update", "$@139", "$@140", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@141", "single_multi", "$@142", "$@143", "$@144", "table_wild_list",
  "table_wild_one", "opt_wild", "opt_delete_options", "opt_delete_option",
  "truncate", "$@145", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@146", "show_param",
  "$@147", "$@148", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@149", "$@150", "describe_command",
  "opt_extended_describe", "opt_describe_column", "flush", "$@151",
  "flush_options", "$@152", "$@153", "opt_with_read_lock",
  "flush_options_list", "flush_option", "opt_table_list", "reset", "$@154",
  "reset_options", "reset_option", "purge", "$@155", "purge_options",
  "purge_option", "kill", "kill_option", "use", "load", "$@156", "$@157",
  "$@158", "$@159", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "param_marker", "signed_literal",
  "literal", "NUM_literal", "insert_ident", "table_wild", "order_ident",
  "simple_ident", "simple_ident_nospvar", "simple_ident_q", "field_ident",
  "table_ident", "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user", "keyword", "keyword_sp",
  "set", "$@160", "opt_option", "option_value_list", "option_type_value",
  "$@161", "option_type", "option_type2", "opt_var_type",
  "opt_var_ident_type", "ext_option_value", "sys_option_value",
  "option_value", "internal_variable_name", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@162",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@163", "handler", "$@164", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@165",
  "handler_rkey_mode", "revoke", "revoke_command", "grant",
  "grant_command", "opt_table", "grant_privileges", "opt_privileges",
  "object_privilege_list", "object_privilege", "$@166", "$@167", "$@168",
  "$@169", "opt_and", "require_list", "require_list_element",
  "grant_ident", "user_list", "grant_list", "grant_user",
  "opt_column_list", "column_list", "column_list_id", "require_clause",
  "grant_options", "opt_grant_option", "grant_option_list", "grant_option",
  "begin", "$@170", "opt_work", "opt_chain", "opt_release",
  "opt_savepoint", "commit", "rollback", "savepoint", "release",
  "union_clause", "union_list", "$@171", "union_opt",
  "opt_union_order_or_limit", "union_order_or_limit", "$@172",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@173", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_replace_or_algorithm",
  "view_replace", "view_algorithm", "view_suid", "view_tail", "$@174",
  "view_list_opt", "view_list", "view_select", "$@175", "view_select_aux",
  "view_check_option", "trigger_tail", "$@176", "$@177", "$@178",
  "udf_tail", "sf_tail", "$@179", "$@180", "$@181", "$@182", "$@183",
  "sp_tail", "$@184", "$@185", "$@186", "$@187", "xa", "xid",
  "begin_or_start", "opt_join_or_resume", "opt_one_phase", "opt_suspend",
  "$@188", "opt_migrate", "install", "uninstall", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   124,    38,    45,    43,    42,    47,
      37,    94,   126,    40,    41,    44,    33,   123,   125,    59,
      64,    46,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   613,   614,   615,   614,   614,   616,   616,   617,   617,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   619,   620,   620,   621,   622,   622,   624,   623,   625,
     625,   626,   626,   627,   629,   628,   631,   630,   632,   632,
     633,   633,   633,   633,   633,   633,   633,   633,   633,   633,
     633,   633,   633,   633,   633,   634,   634,   634,   635,   636,
     636,   636,   636,   638,   637,   639,   637,   640,   637,   641,
     637,   642,   637,   643,   637,   637,   637,   637,   637,   644,
     645,   645,   646,   646,   646,   646,   646,   646,   646,   648,
     647,   650,   649,   649,   651,   651,   651,   651,   652,   652,
     653,   653,   654,   654,   655,   655,   656,   656,   658,   657,
     659,   659,   659,   659,   659,   659,   659,   659,   659,   659,
     659,   659,   659,   660,   661,   661,   662,   662,   663,   663,
     664,   664,   664,   664,   664,   664,   664,   665,   665,   665,
     666,   666,   668,   667,   669,   669,   670,   670,   671,   671,
     672,   672,   673,   673,   674,   675,   676,   676,   677,   677,
     678,   679,   679,   679,   679,   680,   680,   681,   681,   682,
     682,   684,   683,   683,   685,   683,   683,   687,   686,   688,
     688,   689,   689,   690,   691,   691,   692,   693,   693,   694,
     694,   694,   694,   694,   695,   696,   696,   697,   697,   698,
     698,   699,   699,   700,   700,   700,   701,   701,   701,   701,
     701,   701,   701,   701,   701,   701,   701,   701,   702,   703,
     703,   704,   704,   705,   705,   705,   705,   705,   705,   705,
     705,   705,   705,   705,   705,   705,   707,   706,   709,   708,
     711,   710,   713,   712,   714,   715,   716,   718,   717,   719,
     720,   720,   720,   721,   721,   723,   724,   725,   722,   726,
     726,   726,   727,   727,   729,   730,   728,   732,   731,   733,
     733,   734,   734,   736,   737,   735,   739,   740,   738,   741,
     741,   743,   742,   744,   744,   746,   745,   748,   747,   750,
     749,   751,   752,   753,   751,   754,   751,   755,   755,   756,
     756,   756,   757,   758,   759,   760,   760,   761,   761,   762,
     763,   764,   764,   766,   765,   767,   767,   767,   768,   768,
     768,   769,   770,   770,   770,   771,   771,   771,   771,   771,
     771,   771,   771,   772,   773,   773,   773,   774,   774,   774,
     774,   774,   775,   776,   776,   776,   777,   777,   777,   777,
     777,   777,   777,   778,   779,   779,   779,   780,   780,   780,
     781,   782,   783,   784,   785,   786,   786,   786,   787,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   796,   797,
     797,   798,   798,   799,   799,   799,   799,   800,   801,   800,
     802,   803,   802,   804,   802,   805,   806,   806,   808,   807,
     809,   811,   810,   812,   813,   814,   813,   813,   813,   813,
     813,   815,   815,   816,   816,   817,   817,   818,   819,   820,
     821,   822,   822,   823,   824,   823,   825,   823,   826,   826,
     827,   828,   829,   829,   830,   830,   831,   831,   833,   832,
     834,   835,   836,   835,   837,   835,   838,   838,   839,   839,
     840,   840,   842,   843,   841,   844,   844,   845,   845,   846,
     846,   847,   847,   849,   848,   850,   851,   851,   852,   852,
     853,   853,   853,   853,   853,   853,   853,   853,   855,   856,
     854,   857,   857,   858,   858,   859,   859,   860,   860,   861,
     861,   862,   862,   863,   864,   864,   865,   865,   866,   866,
     867,   867,   867,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   869,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   870,   871,
     872,   873,   874,   874,   874,   874,   874,   874,   875,   875,
     875,   876,   876,   877,   877,   877,   877,   878,   879,   879,
     880,   880,   881,   881,   882,   882,   882,   882,   882,   882,
     883,   883,   884,   885,   885,   886,   888,   887,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   889,   889,   890,   889,   891,   889,   889,   889,   892,
     892,   892,   892,   892,   892,   892,   892,   893,   894,   894,
     895,   895,   896,   896,   896,   896,   896,   897,   897,   897,
     897,   897,   898,   898,   898,   899,   899,   899,   900,   901,
     901,   902,   902,   903,   903,   903,   904,   904,   904,   904,
     905,   905,   906,   906,   907,   907,   908,   908,   909,   909,
     909,   909,   909,   909,   909,   909,   909,   909,   909,   909,
     909,   910,   911,   911,   912,   912,   913,   913,   914,   914,
     915,   915,   916,   916,   917,   917,   918,   919,   919,   920,
     920,   921,   921,   922,   922,   922,   923,   923,   923,   924,
     924,   924,   924,   924,   924,   924,   925,   925,   926,   926,
     927,   928,   928,   929,   929,   930,   930,   930,   930,   931,
     931,   931,   931,   931,   932,   932,   932,   932,   932,   933,
     934,   934,   935,   935,   936,   936,   937,   937,   937,   938,
     938,   939,   940,   941,   942,   942,   943,   943,   944,   944,
     945,   945,   946,   946,   947,   947,   948,   948,   949,   949,
     950,   950,   951,   951,   952,   953,   953,   954,   954,   954,
     955,   955,   956,   956,   957,   957,   958,   958,   959,   959,
     961,   960,   962,   960,   960,   963,   960,   964,   960,   965,
     960,   966,   960,   967,   960,   960,   960,   960,   960,   960,
     968,   968,   968,   968,   969,   969,   970,   970,   971,   971,
     972,   972,   972,   972,   972,   972,   972,   972,   972,   972,
     973,   972,   972,   974,   972,   975,   972,   972,   972,   972,
     976,   977,   977,   979,   978,   980,   980,   980,   982,   981,
     983,   984,   983,   985,   985,   986,   987,   987,   988,   989,
     989,   989,   990,   989,   991,   992,   989,   989,   989,   989,
     989,   989,   989,   989,   989,   989,   989,   989,   989,   989,
     993,   993,   994,   994,   995,   995,   995,   996,   996,   996,
     997,   997,   997,   997,   999,   998,   998,  1000,   998,   998,
    1001,  1002,  1002,  1004,  1003,  1005,  1005,  1006,  1006,  1006,
    1007,  1007,  1008,  1008,  1010,  1009,  1011,  1011,  1011,  1013,
    1012,  1014,  1014,  1015,  1015,  1016,  1016,  1016,  1018,  1017,
    1019,  1021,  1020,  1022,  1022,  1023,  1023,  1024,  1024,  1024,
    1024,  1024,  1024,  1026,  1025,  1027,  1027,  1027,  1029,  1028,
    1028,  1030,  1030,  1031,  1031,  1032,  1034,  1033,  1035,  1035,
    1036,  1036,  1037,  1038,  1039,  1039,  1041,  1040,  1042,  1042,
    1043,  1043,  1044,  1045,  1047,  1046,  1049,  1048,  1050,  1050,
    1051,  1051,  1052,  1053,  1053,  1054,  1054,  1055,  1055,  1057,
    1056,  1059,  1060,  1058,  1061,  1061,  1061,  1061,  1061,  1062,
    1062,  1063,  1063,  1064,  1064,  1065,  1065,  1065,  1066,  1066,
    1066,  1067,  1067,  1067,  1068,  1068,  1069,  1070,  1071,  1071,
    1071,  1071,  1071,  1072,  1072,  1073,  1073,  1073,  1073,  1073,
    1073,  1073,  1073,  1073,  1073,  1073,  1074,  1074,  1074,  1074,
    1074,  1074,  1075,  1075,  1075,  1075,  1075,  1075,  1075,  1075,
    1075,  1075,  1075,  1075,  1075,  1075,  1076,  1076,  1076,  1076,
    1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,  1076,
    1076,  1077,  1077,  1078,  1078,  1079,  1079,  1080,  1080,  1081,
    1081,  1081,  1081,  1081,  1081,  1082,  1082,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,  1083,
    1083,  1083,  1083,  1083,  1083,  1083,  1083,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,  1084,
    1084,  1084,  1084,  1084,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1086,
    1086,  1086,  1086,  1086,  1086,  1086,  1086,  1086,  1086,  1086,
    1086,  1086,  1086,  1086,  1086,  1086,  1087,  1087,  1087,  1087,
    1087,  1087,  1087,  1087,  1089,  1088,  1088,  1090,  1090,  1091,
    1091,  1092,  1092,  1093,  1093,  1094,  1094,  1095,  1096,  1096,
    1096,  1096,  1096,  1096,  1096,  1097,  1098,  1096,  1096,  1096,
    1096,  1096,  1096,  1096,  1096,  1096,  1096,  1096,  1099,  1096,
    1101,  1100,  1102,  1102,  1102,  1103,  1103,  1104,  1104,  1105,
    1105,  1107,  1106,  1108,  1108,  1108,  1108,  1108,  1108,  1108,
    1108,  1108,  1108,  1108,  1109,  1109,  1110,  1110,  1111,  1111,
    1112,  1112,  1113,  1113,  1114,  1114,  1115,  1115,  1116,  1116,
    1117,  1118,  1118,  1119,  1119,  1120,  1120,  1121,  1120,  1122,
    1120,  1123,  1120,  1120,  1124,  1120,  1125,  1120,  1120,  1126,
    1120,  1127,  1120,  1120,  1128,  1128,  1128,  1130,  1129,  1129,
    1129,  1131,  1132,  1133,  1131,  1134,  1136,  1137,  1135,  1139,
    1138,  1141,  1142,  1140,  1143,  1144,  1145,  1145,  1146,  1146,
    1146,  1146,  1147,  1147,  1149,  1148,  1150,  1148,  1151,  1151,
    1152,  1153,  1152,  1155,  1154,  1156,  1156,  1157,  1157,  1158,
    1158,  1159,  1159,  1160,  1160,  1160,  1160,  1160,  1160,  1160,
    1160,  1160,  1160,  1160,  1160,  1161,  1161,  1161,  1161,  1161,
    1161,  1161,  1161,  1161,  1162,  1162,  1162,  1162,  1163,  1163,
    1163,  1164,  1164,  1165,  1165,  1166,  1167,  1166,  1168,  1169,
    1168,  1170,  1170,  1171,  1171,  1172,  1172,  1173,  1173,  1173,
    1174,  1175,  1175,  1176,  1177,  1177,  1179,  1178,  1180,  1180,
    1181,  1181,  1181,  1182,  1182,  1183,  1183,  1184,  1185,  1185,
    1185,  1186,  1186,  1186,  1186,  1186,  1187,  1187,  1188,  1188,
    1188,  1188,  1188,  1188,  1189,  1189,  1189,  1189,  1189,  1190,
    1190,  1190,  1190,  1190,  1191,  1191,  1191,  1191,  1192,  1193,
    1193,  1194,  1195,  1194,  1196,  1196,  1197,  1197,  1198,  1200,
    1199,  1201,  1201,  1202,  1202,  1204,  1203,  1206,  1207,  1205,
    1205,  1205,  1209,  1208,  1211,  1210,  1212,  1210,  1210,  1210,
    1210,  1210,  1210,  1213,  1210,  1210,  1210,  1210,  1210,  1210,
    1214,  1214,  1215,  1216,  1216,  1217,  1218,  1218,  1219,  1219,
    1221,  1222,  1220,  1224,  1225,  1223,  1226,  1226,  1226,  1226,
    1227,  1227,  1228,  1228,  1229,  1230,  1230,  1230,  1231,  1230,
    1232,  1232,  1233,  1233,  1234,  1233,  1235,  1233,  1236,  1236,
    1237,  1237,  1238,  1239,  1239,  1240,  1240,  1242,  1241,  1243,
    1243,  1244,  1244,  1245,  1245,  1246,  1247,  1246,  1249,  1250,
    1248,  1251,  1251,  1252,  1253,  1253,  1254,  1255,  1255,  1257,
    1256,  1259,  1258,  1260,  1258,  1261,  1258,  1262,  1262,  1263,
    1263,  1264,  1264,  1265,  1265,  1266,  1266,  1266,  1268,  1267,
    1269,  1269,  1270,  1270,  1271,  1271,  1272,  1272,  1272,  1272,
    1272,  1272,  1272,  1272,  1272,  1273,  1273,  1275,  1274,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1277,  1276,  1278,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,  1276,
    1276,  1276,  1276,  1276,  1276,  1276,  1279,  1279,  1279,  1280,
    1280,  1281,  1281,  1282,  1282,  1283,  1283,  1284,  1284,  1285,
    1285,  1286,  1286,  1287,  1287,  1287,  1289,  1288,  1290,  1288,
    1291,  1291,  1292,  1292,  1292,  1293,  1293,  1293,  1295,  1294,
    1297,  1298,  1296,  1296,  1299,  1299,  1300,  1300,  1301,  1301,
    1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,  1301,
    1301,  1301,  1301,  1302,  1302,  1304,  1303,  1305,  1305,  1306,
    1306,  1306,  1308,  1307,  1309,  1310,  1310,  1311,  1312,  1312,
    1312,  1313,  1315,  1316,  1317,  1318,  1314,  1319,  1319,  1320,
    1320,  1321,  1321,  1321,  1322,  1322,  1322,  1323,  1323,  1324,
    1324,  1325,  1325,  1325,  1325,  1326,  1326,  1327,  1327,  1328,
    1328,  1329,  1329,  1330,  1330,  1331,  1331,  1332,  1332,  1332,
    1333,  1333,  1334,  1334,  1335,  1335,  1336,  1336,  1337,  1338,
    1338,  1338,  1338,  1339,  1339,  1339,  1340,  1341,  1341,  1341,
    1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,  1342,
    1342,  1342,  1343,  1343,  1343,  1343,  1343,  1344,  1344,  1345,
    1345,  1346,  1347,  1347,  1348,  1348,  1349,  1349,  1349,  1350,
    1350,  1350,  1350,  1351,  1351,  1351,  1352,  1352,  1353,  1354,
    1354,  1355,  1356,  1357,  1358,  1358,  1359,  1359,  1360,  1360,
    1360,  1361,  1361,  1361,  1362,  1362,  1362,  1362,  1362,  1362,
    1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,
    1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,
    1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,
    1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,  1362,
    1362,  1362,  1362,  1362,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,  1363,
    1363,  1363,  1365,  1364,  1366,  1366,  1367,  1367,  1369,  1368,
    1370,  1370,  1370,  1370,  1371,  1371,  1372,  1372,  1372,  1372,
    1373,  1373,  1373,  1373,  1374,  1374,  1375,  1375,  1376,  1376,
    1376,  1376,  1376,  1376,  1376,  1377,  1377,  1377,  1378,  1378,
    1378,  1378,  1379,  1379,  1379,  1380,  1380,  1380,  1380,  1380,
    1382,  1381,  1383,  1383,  1384,  1384,  1385,  1386,  1386,  1386,
    1386,  1388,  1387,  1389,  1389,  1390,  1389,  1391,  1391,  1392,
    1392,  1393,  1393,  1393,  1393,  1394,  1393,  1395,  1395,  1395,
    1395,  1395,  1396,  1397,  1397,  1397,  1397,  1397,  1398,  1399,
    1399,  1399,  1399,  1400,  1400,  1401,  1401,  1402,  1402,  1403,
    1403,  1405,  1404,  1406,  1404,  1407,  1404,  1408,  1404,  1404,
    1404,  1404,  1404,  1404,  1404,  1404,  1404,  1404,  1404,  1404,
    1404,  1404,  1404,  1404,  1404,  1404,  1404,  1404,  1404,  1404,
    1404,  1404,  1404,  1404,  1404,  1409,  1409,  1410,  1410,  1411,
    1411,  1411,  1412,  1412,  1412,  1412,  1413,  1413,  1414,  1414,
    1415,  1415,  1415,  1415,  1415,  1416,  1416,  1417,  1417,  1418,
    1419,  1419,  1419,  1419,  1419,  1420,  1420,  1421,  1421,  1422,
    1422,  1423,  1423,  1423,  1423,  1423,  1425,  1424,  1426,  1426,
    1427,  1427,  1427,  1428,  1428,  1428,  1429,  1429,  1430,  1431,
    1431,  1432,  1433,  1434,  1434,  1436,  1435,  1437,  1437,  1437,
    1438,  1438,  1440,  1439,  1441,  1441,  1442,  1442,  1442,  1443,
    1443,  1444,  1445,  1444,  1446,  1447,  1448,  1449,  1449,  1450,
    1450,  1451,  1451,  1451,  1451,  1451,  1451,  1451,  1451,  1452,
    1452,  1452,  1453,  1453,  1453,  1453,  1453,  1454,  1454,  1454,
    1454,  1454,  1454,  1455,  1455,  1456,  1457,  1458,  1458,  1458,
    1459,  1460,  1460,  1460,  1461,  1461,  1461,  1463,  1462,  1464,
    1464,  1465,  1465,  1467,  1466,  1468,  1468,  1469,  1469,  1469,
    1469,  1471,  1472,  1473,  1470,  1474,  1474,  1476,  1477,  1478,
    1479,  1480,  1475,  1482,  1483,  1484,  1485,  1481,  1486,  1486,
    1486,  1486,  1486,  1486,  1487,  1487,  1487,  1488,  1488,  1489,
    1489,  1489,  1490,  1490,  1491,  1492,  1491,  1493,  1493,  1494,
    1495
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     4,     1,     2,     0,     4,     0,
       2,     3,     1,     2,     0,     3,     0,     5,     1,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     5,     1,     0,     1,     3,     1,     3,
       3,     3,     3,     0,     7,     0,    12,     0,    12,     0,
      12,     0,     6,     0,     3,     4,     4,     3,     2,    10,
       1,     3,     2,     2,     2,     2,     2,     2,     2,     0,
      13,     0,     6,     2,     0,     1,     3,     1,     0,     2,
       0,     2,     0,     1,     3,     4,     0,     2,     0,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     3,     1,     0,     2,     0,     2,
       2,     2,     2,     2,     3,     3,     1,     1,     1,     2,
       3,     3,     0,     4,     0,     3,     0,     1,     3,     1,
       0,     1,     3,     1,     0,     3,     0,     1,     3,     1,
       4,     0,     1,     1,     1,     0,     3,     2,     3,     0,
       3,     0,     5,     5,     0,     7,     5,     0,     2,     1,
       1,     1,     3,     1,     1,     1,     3,     0,     1,     1,
       1,     1,     2,     1,     3,     1,     1,     0,     1,     0,
       2,     3,     5,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       3,     0,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     5,     0,     2,
       0,     3,     0,     2,     2,     2,     2,     0,     6,     2,
       0,     2,     1,     1,     3,     0,     0,     0,     7,     0,
       2,     2,     1,     1,     0,     0,     8,     0,     6,     1,
       2,     1,     2,     0,     0,     6,     0,     0,     6,     0,
       2,     0,     5,     0,     1,     0,     5,     0,     2,     0,
       5,     4,     0,     0,     8,     0,     7,     1,     1,     1,
       1,     1,     2,     4,     5,     0,     4,     4,     4,     3,
       3,     2,     2,     0,     2,     1,     2,     3,     1,     1,
       1,     1,     1,     2,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       1,     1,     1,     1,     2,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     2,     3,     1,     1,     1,
       2,     2,     2,     1,     1,     1,     1,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     3,     2,     4,     5,     0,     5,
       0,     0,     5,     0,     7,     1,     0,     1,     0,     4,
       0,     0,     3,     5,     5,     0,     4,     2,     2,     2,
       2,     0,     1,     0,     1,     1,     3,     1,     4,     5,
       5,     0,     2,     0,     0,     7,     0,     9,     1,     3,
       1,     1,     0,     2,     0,     3,     1,     3,     0,     6,
       1,     0,     0,     5,     0,     4,     1,     1,     1,     3,
       1,     3,     0,     0,     5,     1,     3,     1,     1,     0,
       3,     1,     3,     0,     4,     1,     0,     1,     2,     1,
       3,     4,     3,     3,     3,     4,     4,     3,     0,     0,
       6,     0,     1,     0,     1,     1,     2,     1,     1,     0,
       1,     1,     2,     1,     0,     3,     0,     1,     1,     2,
       1,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     0,     6,     1,     1,
       3,     4,     4,     2,     2,     2,     3,     3,     4,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     2,     2,     7,     8,     8,     8,     8,     2,
       0,     1,     4,     0,     1,     2,     0,     4,     3,     3,
       3,     1,     2,     1,     1,     3,     2,     3,     2,     2,
       1,     3,     3,     2,     3,     1,     1,     1,     1,     1,
       2,     1,     1,     1,     2,     3,     2,     3,     2,     2,
       3,     3,     3,     0,     6,     0,     6,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     1,     2,     1,     2,     3,     2,     1,     1,     1,
       1,     1,     1,     1,     2,     0,     1,     1,     5,     0,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       0,     1,     0,     1,     0,     1,     2,     1,     1,     2,
       2,     1,     3,     4,     1,     3,     2,     1,     2,     2,
       2,     2,     2,     1,     2,     1,     1,     1,     1,     1,
       0,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     0,     1,     1,     2,     2,     1,     2,     2,     0,
       1,     1,     1,     3,     1,     3,     0,     1,     0,     1,
       5,     0,     3,     3,     1,     0,     2,     2,     2,     0,
       3,     3,     6,     6,     1,     1,     2,     2,     2,     1,
       2,     2,     1,     1,     0,     1,     1,     1,     1,     0,
       1,     1,     1,     0,     1,     2,     0,     1,     0,     1,
       0,     1,     1,     2,     1,     2,     1,     2,     2,     2,
       3,     2,     1,     1,     1,     1,     3,     1,     1,     1,
       4,     2,     1,     4,     0,     1,     0,     2,     1,     3,
       0,     6,     0,     5,     7,     0,     5,     0,     5,     0,
       5,     0,     4,     0,    10,     3,     4,     3,     3,     7,
       0,     3,     1,     4,     0,     3,     0,     2,     0,     1,
       0,     2,     2,     2,     2,     1,     1,     1,     3,     4,
       0,     6,     4,     0,     5,     0,     6,     4,     3,     1,
       2,     1,     1,     0,     5,     0,     3,     2,     0,     5,
       0,     0,     6,     1,     3,     1,     1,     3,     2,     3,
       2,     4,     0,     6,     0,     0,     8,     4,     4,     3,
       3,     2,     2,     6,     5,     3,     5,     1,     1,     1,
       0,     1,     0,     1,     0,     1,     1,     0,     2,     1,
       0,     1,     1,     1,     0,     5,     3,     0,     5,     3,
       3,     0,     3,     0,     2,     1,     3,     0,     1,     1,
       0,     2,     1,     3,     0,     5,     0,     1,     1,     0,
       6,     0,     1,     1,     2,     1,     1,     1,     0,     5,
       2,     0,     5,     0,     1,     1,     2,     1,     1,     1,
       1,     1,     2,     0,     5,     0,     1,     1,     0,     4,
       4,     3,     5,     1,     3,     3,     0,     6,     1,     1,
       1,     3,     2,     3,     1,     1,     0,     6,     1,     1,
       1,     3,     3,     4,     0,     6,     0,     2,     0,     4,
       0,     2,     1,     2,     4,     2,     3,     2,     3,     0,
       3,     0,     0,     6,     2,     1,     1,     2,     2,     8,
       4,     0,     1,     2,     1,     1,     1,     1,     0,     2,
       4,     3,     1,     1,     3,     4,     0,     0,     0,     2,
       2,     1,     1,     0,     2,     3,     3,     3,     2,     3,
       4,     3,     4,     3,     4,     1,     3,     4,     3,     3,
       6,     1,     5,     6,     5,     7,     6,     8,     5,     6,
       4,     4,     5,     3,     4,     1,     3,     3,     3,     3,
       3,     3,     5,     5,     3,     3,     3,     3,     3,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     3,     2,     2,
       2,     2,     3,     3,     5,     6,     4,     4,     7,     2,
       6,     5,     6,     6,     4,     4,     5,     4,     6,     2,
       4,     4,     4,    10,     6,     8,     6,     4,     4,     6,
       4,     4,     4,     6,     4,     7,     7,     7,     6,     6,
       6,     6,     3,     4,     6,     8,     2,     2,     4,     8,
       8,     6,     6,     2,     4,     6,     6,     8,     8,     6,
       8,     6,     2,     4,     8,     8,     2,     2,     2,     4,
       4,     4,     4,     3,     8,     4,     6,     4,     4,     4,
       6,     8,     6,     4,     6,     1,     6,     4,     4,     4,
       4,     4,     6,     4,     0,     5,     6,     2,     3,     0,
       4,     0,     3,     0,     1,     1,     3,     4,     4,     5,
       4,     4,     4,     5,     4,     0,     0,     7,     4,     5,
       4,     5,     4,     4,     4,     4,     4,     5,     0,     8,
       0,     3,     3,     1,     4,     0,     1,     0,     2,     0,
       1,     0,     3,     2,     3,     2,     1,     2,     1,     2,
       1,     1,     1,     2,     0,     1,     1,     3,     1,     3,
       1,     3,     0,     1,     0,     2,     4,     5,     1,     1,
       1,     1,     4,     1,     3,     3,     3,     0,     6,     0,
       6,     0,     8,     4,     0,     8,     0,    10,     6,     0,
       8,     0,    10,     6,     1,     2,     2,     0,     4,     3,
       5,     2,     0,     0,     7,     1,     0,     0,     6,     0,
       3,     0,     0,     5,     0,     1,     0,     1,     0,     2,
       3,     3,     1,     1,     0,     7,     0,     7,     1,     2,
       0,     0,     2,     0,     2,     0,     1,     1,     1,     1,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     1,
       1,     0,     2,     0,     1,     0,     0,     3,     0,     0,
       3,     2,     0,     0,     4,     4,     2,     0,     1,     1,
       3,     3,     1,     2,     0,     1,     0,     4,     4,     2,
       0,     1,     1,     0,     1,     0,     1,     2,     1,     3,
       3,     1,     1,     1,     1,     1,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     0,     6,     0,     1,     3,     1,     3,     0,
       2,     3,     1,     2,     1,     0,     3,     0,     0,     7,
       2,     1,     0,     3,     0,     7,     0,     6,     4,     6,
       4,     4,     4,     0,     6,     4,     4,     5,     6,     4,
       1,     3,     1,     1,     3,     1,     0,     2,     0,     1,
       0,     0,     8,     0,     0,     6,     0,     1,     1,     1,
       1,     1,     2,     1,     1,     1,     3,     4,     0,     3,
       3,     1,     2,     2,     0,     3,     0,     5,     3,     1,
       3,     1,     3,     1,     1,     0,     1,     0,     4,     0,
       1,     3,     1,     1,     1,     0,     0,     6,     0,     0,
      11,     3,     1,     3,     3,     1,     3,     0,     1,     0,
       4,     0,     6,     0,     5,     0,     6,     1,     3,     2,
       4,     0,     2,     0,     2,     1,     1,     1,     0,     4,
       0,     1,     0,     1,     1,     3,     1,     1,     2,     2,
       2,     1,     1,     1,     1,     0,     3,     0,     3,     2,
       4,     4,     3,     4,     4,     1,     3,     3,     6,     2,
       2,     0,     6,     0,     6,     5,     2,     1,     1,     1,
       5,     5,     2,     2,     1,     4,     3,     2,     3,     2,
       2,     1,     3,     4,     3,     3,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     1,     1,     1,
       1,     0,     1,     0,     2,     0,     1,     1,     1,     0,
       2,     0,     2,     0,     2,     2,     0,     4,     0,     4,
       1,     1,     0,     1,     1,     0,     1,     1,     0,     4,
       0,     0,     5,     1,     0,     3,     3,     1,     2,     2,
       2,     2,     2,     2,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     1,     0,     3,     3,     1,     1,
       1,     2,     0,     3,     3,     2,     2,     3,     0,     1,
       1,     2,     0,     0,     0,     0,    21,     1,     1,     0,
       1,     0,     1,     1,     0,     1,     1,     0,     2,     2,
       1,     3,     4,     3,     3,     0,     2,     2,     1,     3,
       3,     0,     4,     0,     3,     1,     1,     0,     3,     2,
       3,     1,     1,     2,     0,     2,     3,     1,     5,     1,
       1,     2,     2,     1,     1,     1,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     1,     1,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     1,     3,     4,     5,     1,
       5,     3,     2,     1,     3,     2,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     4,     0,     1,     1,     3,     0,     2,
       1,     1,     1,     1,     0,     1,     0,     1,     1,     1,
       0,     2,     2,     2,     1,     2,     4,     5,     4,     6,
       2,     3,     3,     3,     5,     1,     3,     3,     2,     2,
       2,     1,     1,     4,     4,     1,     1,     1,     1,     1,
       0,     4,     1,     1,     1,     3,     3,     1,     1,     2,
       2,     0,     3,     4,     3,     0,     7,     1,     2,     1,
       1,     1,     1,     1,     1,     0,     5,     1,     1,     1,
       1,     1,     3,     6,     6,     6,     7,     5,     3,     8,
       8,     8,     6,     0,     1,     1,     2,     0,     1,     1,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     2,     1,     3,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     2,     0,     1,     3,     1,     2,
       2,     2,     1,     3,     3,     1,     1,     3,     1,     3,
       4,     5,     4,     6,     1,     0,     3,     3,     1,     1,
       0,     2,     2,     2,     2,     0,     2,     0,     3,     2,
       1,     2,     2,     2,     2,     2,     0,     3,     0,     1,
       0,     3,     2,     0,     1,     2,     0,     1,     4,     4,
       5,     2,     3,     0,     1,     0,     4,     0,     1,     1,
       0,     1,     0,     2,     2,     1,     0,     1,     1,     2,
       3,     2,     0,     6,     3,     0,     0,     0,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     3,     1,     2,     1,
       2,     3,     3,     3,     0,     3,     3,     0,     7,     0,
       3,     1,     3,     0,     3,     2,     4,     0,     3,     4,
       4,     0,     0,     0,    16,     8,     7,     0,     0,     0,
       0,     0,    15,     0,     0,     0,     0,    12,     4,     4,
       3,     4,     3,     2,     1,     3,     5,     1,     1,     0,
       1,     1,     0,     2,     0,     0,     3,     0,     2,     5,
       3
};

/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,  2425,   975,  2356,     0,     0,     0,     0,     0,     0,
    2358,   113,    62,  1579,  1690,  1691,  1492,  1518,     2,     0,
     975,   163,     0,    74,  1520,     0,  1738,     0,     0,   975,
     441,     0,  1732,     0,     0,   975,  1523,  1725,   237,   163,
    2358,     0,  1021,  2184,  1617,     0,     0,     0,     0,  1600,
       0,  2241,  1568,     0,     0,     0,     0,     3,     8,    19,
       0,    38,    24,    28,    14,    18,    13,    51,    45,    36,
      10,    53,    54,    16,    42,    11,    12,    15,    34,    41,
      35,    37,    49,  1012,    22,    23,    29,    43,    58,    20,
      55,    52,    21,  1692,    25,    44,    39,    31,    59,    32,
      50,    33,    57,    27,    46,    26,     9,    17,    47,    48,
      40,    60,    30,    56,     0,   848,     0,     0,   913,     0,
       0,     0,     0,     0,   831,  2423,  2424,  2425,   977,   976,
       0,  2358,  1841,   960,   986,  1904,  1905,  1906,  1907,  1908,
    1909,  1910,  1855,  1911,  1912,  1914,  1913,  1915,  1916,  1856,
    1857,  1917,  1918,  1919,  1921,  1920,  1922,  1858,  1859,  1923,
    1924,  1925,  1926,  1860,  1861,  1927,  1929,  1928,  1862,  1930,
    1931,  1932,  1934,  1933,  1863,  1935,  1864,  1936,  1937,  1938,
    1939,  1940,  1941,  1942,  1944,  1943,  1865,  1945,  1946,  1947,
    1948,  1949,  1951,  1950,  1952,  1953,  1954,  1866,  1955,  1956,
    1957,  1958,  1959,  1960,  1961,  1867,  1962,  1963,  1964,  1981,
    1868,  1965,  1968,  1967,  1966,  1969,  1970,  1971,  1973,  1972,
    1974,  1869,  1975,  1976,  1977,  1979,  1978,  1983,  1984,  1985,
    1870,  1980,  1982,  2163,  1986,  1988,  1987,  1989,  1991,  1990,
    1871,  1992,  1872,  1873,  1993,  1994,  1839,  1995,  1840,  1996,
    1998,  1999,  2000,  2005,  1874,  1997,  2001,  2002,  2003,  2004,
    2006,  1875,  2007,  2008,  2009,  2010,  2011,  2012,  2013,  2014,
    2015,  2016,  2027,  2020,  2022,  2023,  2025,  2021,  2026,  2030,
    2029,  2031,  2032,  2033,  2028,  2018,  2024,  2019,  2034,  2035,
    2017,  2036,  2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,
    2045,  2046,  2048,  2047,  2049,  2050,  2051,  2052,  2053,  2054,
    2056,  2055,  2057,  2058,  2059,  2061,  2060,  2063,  2064,  1876,
    2062,  2065,  2066,  2067,  2068,  2069,  1877,  1878,  1879,  2070,
    2071,  1880,  2072,  2073,  2074,  1881,  2075,  2076,  2078,  2077,
    2079,  2080,  1882,  1883,  2081,  2082,  2083,  2084,  2085,  2086,
    2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2096,  2095,
    2097,  2098,  2099,  2100,  2101,  2102,  2103,  1884,  2104,  1885,
    2105,  2106,  1886,  2107,  1887,  2108,  2109,  1888,  2110,  2111,
    2112,  2113,  2114,  2115,  1889,  2116,  2117,  2118,  1890,  2120,
    2119,  2121,  1891,  2123,  2124,  1892,  2122,  1894,  2125,  2126,
    1893,  1895,  2127,  2128,  2130,  2129,  2131,  2132,  2133,  1896,
    2134,  1897,  2135,  2136,  2137,  2138,  2139,  2141,  2140,  2142,
    2143,  2144,  2145,  2147,  2149,  2148,  2146,  2150,  2151,  2152,
    2153,  2156,  2157,  2158,  2159,  2154,  2155,  1898,  2160,  2161,
    2162,  2164,  2165,  2167,  2166,  1899,  1900,  2168,  2169,  1903,
    2170,  2171,  2174,  2172,  2173,  2176,  2175,  2177,  2178,  1901,
    2179,  1902,  2180,  2181,   182,  1844,   165,  1845,  1854,     0,
    2233,  2232,   944,   961,  2359,  2360,   534,   781,     0,     0,
     782,     0,   533,   780,   163,  2425,   118,     0,   530,   531,
       0,     0,     0,  1593,     0,  1516,  1516,  1516,     0,     0,
    1516,  1516,     0,  1519,  1516,   163,  1516,     0,    67,  1698,
       0,     0,     0,     0,  1838,     0,  1526,     0,  1739,  1740,
       0,  1747,     0,  1748,  1742,  2230,     0,     0,     0,     0,
       0,   163,   978,     0,  1577,     0,   227,   236,   238,   239,
     235,     0,  2360,  2371,  1013,  1019,  1031,  2185,  2182,  1675,
     239,   933,   933,   933,   931,   933,  1601,  1598,     0,     0,
    1577,  1741,  2477,     0,     0,     0,  2473,     0,  2478,     0,
    1021,     0,     0,     1,     5,     0,     0,  1976,  2074,  1688,
    1686,  1833,     0,   822,   849,     0,   827,     0,   825,  1850,
    1849,  1848,     0,   838,   837,   835,     0,   403,     0,     0,
    2434,   829,   958,  2357,     0,   184,     0,    76,     0,     0,
       0,  2363,     0,     0,     0,     0,   117,     0,     0,     0,
     114,  1046,  1046,  2425,  2427,  2429,   534,   532,     0,     0,
       0,  1597,  1596,  1595,     0,  1593,  1905,  1855,  1916,     0,
    1806,     0,     0,     0,  1292,     0,  1860,     0,  1930,  1932,
    1865,     0,     0,  1053,  1053,  1053,     0,     0,     0,  1953,
    1954,  1815,     0,     0,     0,  1803,  1816,  1988,  1989,     0,
    1805,  1994,     0,     0,     0,     0,  2011,  1813,     0,     0,
    2043,  2045,     0,     0,  2049,  2050,  2051,  2052,  1790,  1108,
       0,  1053,  1802,  1812,  2067,  1796,  2075,  2079,  2080,     0,
    2089,     0,     0,     0,  2114,  2118,     0,     0,  2138,     0,
       0,  1053,  1789,  2156,  2157,  2158,  2159,     0,  1804,  1898,
    1814,     0,  2170,  1053,  1053,  1053,     0,     0,     0,  2177,
    2181,     0,     0,     0,  2395,  1107,     0,  1260,     0,  1286,
    1065,  1071,  1085,     0,  1100,  1118,  1119,  1121,  1215,  1120,
    1126,  1125,  1493,  1800,  1124,  1123,  1801,  1117,  1823,  1844,
    1822,     0,     0,     0,     0,     0,     0,     0,     0,  1671,
       0,     0,  1503,  1516,    69,     0,  2277,  2292,  2293,  2289,
    2294,  2312,  2295,  2299,     0,  2291,  2283,     0,  2298,     0,
    2287,  2296,     0,  2281,     0,  2297,  2302,  2313,  2285,  2290,
    2268,     0,  2275,  2279,  1835,  1398,  2244,  2245,     0,    75,
    1528,  1529,  1527,   912,     0,  1737,     0,  1751,     0,   973,
     451,   442,     0,  1670,  1669,     0,  1733,  2372,     0,     0,
     949,  1531,  1578,     0,  1530,  1730,     0,  1729,  1726,  1728,
     228,     0,     0,   258,  2277,     0,  2262,     0,  2366,  2363,
    2373,  2408,  2403,  2402,  2405,  2406,  1037,  2407,  1036,  2404,
    2401,  1046,  1032,  1034,  1035,  2188,  1637,     0,   715,     0,
    1683,  1638,     0,     0,  1683,     0,  1433,  1673,  1676,     0,
    2197,  1651,   778,   777,   776,  2198,  1669,     0,  1625,  1639,
       0,  1602,  1644,     0,  2199,     0,  1672,     0,  1433,  1683,
       0,  1618,     0,     0,     0,     0,   234,   927,   937,   929,
     924,     0,   930,   926,     0,  2490,  2242,   912,  1795,  1794,
    1842,  2474,  1793,  2482,  2484,  2470,  2472,  2479,  1015,     0,
    2377,     6,    61,     0,  1695,  2432,  2433,  2431,   731,     0,
    1053,  1851,  2426,   166,   836,     0,   404,   166,     0,     0,
       0,     0,     0,   405,   406,   342,   820,   833,     0,     0,
     832,  2434,     0,     0,   988,   990,   989,  1006,   186,   183,
     164,     0,   946,  1510,  1512,   963,  2362,     0,     0,  2364,
    2368,  1106,  1105,     0,   111,   116,     0,     0,     0,  2334,
     115,  2328,  2430,  1046,  1046,  1046,  2422,     0,  2410,  2417,
    2418,  2421,  2420,  2419,  2416,     0,  2409,  2412,  2413,  2415,
    2414,  2434,  2428,     0,   783,   783,   783,     0,  1580,  1583,
    1587,  1591,  1594,     0,     0,  1403,  1139,  1403,  1403,  1403,
    1293,     0,     0,     0,     0,     0,     0,     0,     0,  1403,
       0,  1176,  1149,     0,  1177,     0,     0,     0,     0,     0,
    1809,     0,     0,  2395,     0,     0,     0,  1265,     0,     0,
       0,  2395,     0,     0,     0,     0,     0,  1288,  1290,  1822,
    1403,     0,     0,  1403,     0,     0,     0,     0,     0,  1058,
       0,  1183,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,  1403,     0,     0,  1403,     0,  1192,
       0,  1811,     0,     0,     0,  1810,     0,     0,  1808,  1807,
    1791,     0,  1196,  1198,  1197,     0,  1403,  1403,     0,     0,
    1129,  1128,  1130,     0,     0,     0,     0,     0,     0,  1104,
    1103,  1102,  1101,     0,     0,     0,  1109,     0,  1110,  1111,
       0,  1112,  1113,  1114,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1131,     0,     0,     0,  1792,  1224,     0,
    1517,  1498,  1505,  1500,     0,  1671,  1501,  1509,   417,     0,
    1506,  2326,  1502,     0,  1494,     0,    68,     0,  1721,     0,
       0,     0,  1715,  1717,  1720,  1716,     0,     0,  1722,  1719,
       0,  1718,  1699,  1703,  1707,  1700,  2278,  2276,  2310,  2309,
    2314,     0,  2311,  2307,  2300,  2335,  2304,     0,  2335,  2306,
    2305,  2335,  2301,  2308,  2335,  2273,     0,  1399,  1400,     0,
    2243,     0,  1834,     0,     0,   996,  1752,  1753,  1749,  1398,
    2231,  2234,     0,   452,     0,     0,   461,     0,     0,    64,
      65,     0,   980,     0,   979,   983,     0,     0,     0,  1534,
    1524,  1533,  1731,     0,   226,   251,   246,   254,   248,   250,
     249,   255,   256,   257,   252,   247,   253,   240,     0,  2276,
       0,  2273,  2367,     0,  2369,  2386,  1020,  2374,  1043,  1022,
    1042,     0,  1033,  2183,  2186,  2194,  1679,   714,     0,     0,
    1650,     0,   534,     0,     0,     0,     0,     0,     0,  1619,
       0,     0,   571,     0,  1643,  1434,  1677,  1678,  1683,     0,
       0,  1683,     0,  1656,  1673,     0,  1683,  1614,     0,     0,
    1606,  1611,  1607,     0,  1613,  1612,  1615,  1603,  1604,  1679,
    1630,  1657,  1673,  1642,  1649,     0,  1629,  1636,     0,  1647,
    1673,  1673,  1683,  1683,   940,   939,   938,   934,   935,   940,
       0,  1599,  1327,     0,     0,  2471,  2485,  2469,  2480,  2481,
    2468,  1016,  2378,  1014,  2379,     0,     7,     4,  1689,  1687,
    1696,  1697,   732,   731,   525,   528,   527,     0,     0,  1853,
       0,   828,     0,  1671,   826,     0,     0,  1671,   353,  1671,
     407,   731,   840,     0,     0,   830,   959,     0,     0,   440,
    1006,   992,  1008,     0,   187,   189,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    77,    78,    94,   948,   947,     0,
     945,   971,   970,   968,     0,   969,   967,   962,   964,   965,
    2361,  2365,   535,   731,  1671,     0,   345,     0,     0,     0,
       0,     0,   534,     0,     0,  2411,   103,   784,     0,     0,
       0,  1585,  1513,  1581,  1515,  1833,     0,     0,     0,  1589,
       0,     0,  1404,  1403,     0,  1271,     0,     0,     0,     0,
    1294,     0,     0,     0,     0,     0,     0,     0,  1245,     0,
    1271,  1054,     0,  1203,     0,     0,     0,     0,     0,     0,
    1374,  1375,  1376,  1377,  1385,  1378,  1379,  1380,  1387,  1392,
    1381,  1382,  1388,  1389,  1390,  1383,  1391,  1386,  1384,  1393,
       0,  1373,     0,  1396,  1394,  1397,  1395,     0,  1266,  1258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1403,     0,     0,     0,  1403,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1403,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1172,     0,  1825,  1824,     0,     0,     0,     0,  1133,     0,
    1132,  1336,     0,  2380,  2396,     0,  2200,  1261,  1263,     0,
    1056,  1055,  1057,  1068,  1061,  1066,  1059,  1063,     0,  1115,
    1910,  1069,     0,     0,  1097,  2395,  1412,  1098,  1083,  1088,
    1089,     0,  1086,  1087,     0,  1091,     0,  1090,  1094,  1095,
    1096,  1099,     0,     0,     0,     0,  1122,  1127,  1287,  1046,
    1826,     0,  1496,   417,   420,   419,  1507,   418,  1555,     0,
     914,     0,     0,    70,    72,  1712,  1709,  1708,  1710,  1714,
    1713,  1711,     0,  1723,  2303,     0,  2284,     0,  2288,  2282,
    2286,     0,     0,  2274,     0,  2280,  1402,  1984,  2060,     0,
    1405,  2247,  1521,  2489,     0,  1750,     0,     0,     0,   974,
       0,  1046,   450,   449,   448,   447,     0,   463,   445,     0,
      66,     0,     0,  1734,     0,     0,     0,     0,   951,  1532,
       0,  1727,     0,     0,     0,     0,     0,     0,     0,  2370,
    2388,  2387,  2375,  1046,  1424,  1047,  1047,  1822,  2188,  2191,
    2192,  2195,  2193,     0,  2190,  2189,  2204,     0,  1681,  1684,
    1685,     0,     0,  1665,  1659,  1658,  1654,  1660,  1655,  1668,
    1667,  1666,  1627,  1626,  1444,  1445,  1443,  1437,  1438,  1442,
    1441,  1622,  1674,  1664,  1662,  1652,  1683,  1663,  1661,  1608,
    1609,  1610,     0,  1433,     0,  1681,  1683,  1673,     0,  1683,
    1683,  1646,  1648,     0,   928,   937,   925,   932,  1345,  1344,
       0,  1301,     0,  1303,  1300,  1299,  1298,     0,  1344,  2475,
    2483,  2487,     0,  1433,  2385,  2383,   526,  1555,  1555,     0,
    1852,     0,     0,     0,     0,     0,     0,     0,   167,   176,
       0,     0,   351,   352,  1555,   350,   393,   394,   397,   398,
     399,     0,     0,     0,     0,     0,     0,     0,     0,   120,
     400,  1555,  1555,   347,   373,   374,   377,   378,   379,   380,
     381,   343,     0,   348,   910,   910,     0,  1555,  1555,   910,
    1555,     0,     0,  1555,  1555,     0,     0,  1555,     0,     0,
     910,     0,  1555,   908,     0,     0,  1555,  1555,  1555,  1555,
     910,     0,     0,  1555,   440,  1555,     0,     0,   920,     0,
       0,  1555,     0,     0,  1555,     0,  1555,   856,   907,   538,
     558,   559,   821,   855,   857,   869,   436,     0,   886,   909,
       0,   842,   844,  2435,  2436,  2437,   995,   987,   994,   991,
    1006,  1004,   993,   773,   772,     0,  1007,   185,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1511,   972,
     966,   112,   731,  1555,  1555,  1555,  1555,   349,   382,   383,
     386,   387,   388,   389,   392,   390,   391,     0,     0,  1671,
       0,     0,  2329,     0,  2463,     0,     0,     0,   165,   536,
       0,     0,   785,     0,     0,     0,     0,     0,  1405,     0,
    1836,  1588,  1327,  1592,  1591,     0,  1199,     0,  1238,     0,
    1240,  1241,  1242,     0,     0,     0,     0,     0,  1200,     0,
    1147,  1201,  1202,     0,     0,     0,     0,  1244,     0,  1178,
       0,     0,  1150,  1151,  1144,  1136,     0,  1217,     0,     0,
    1152,     0,     0,     0,     0,     0,  1218,  1289,     0,  1291,
    1826,     0,  1250,  1205,  1157,     0,  1248,     0,  1158,  1219,
    1220,  1221,  1184,  1207,  1208,     0,  1223,     0,  1209,     0,
       0,     0,     0,  1160,  1254,  1252,     0,     0,     0,     0,
    1256,  1193,  1162,     0,     0,     0,  1161,     0,     0,     0,
       0,     0,     0,     0,  1164,     0,  1145,  1253,  1255,  1213,
       0,  1173,     0,  2389,  1335,  2397,  1336,     0,     0,  2391,
    2381,  2386,  2394,  1137,     0,     0,     0,     0,     0,  1827,
    1062,  1067,  1060,  1064,  2395,     0,     0,     0,     0,  1081,
    1080,     0,     0,     0,  2395,  1412,  1084,     0,     0,  1234,
    1235,  1284,     0,  1499,  1497,  1508,  1553,  1554,  1556,     0,
    2327,   916,   915,  1504,   914,    73,     0,  1706,  1724,  1701,
    2339,     0,  2338,     0,  2322,  2325,  1833,     0,     0,     0,
    2257,  2251,  2258,  2260,  2254,  2259,  2261,  2252,  2253,  2248,
    2255,  1406,  1435,     0,   997,   999,  1000,   998,  1006,     0,
       0,  2237,  2238,  2236,  2235,   453,     0,  1469,  1470,  1455,
    1456,  1454,  1457,   462,  1458,  1468,     0,   474,     0,   453,
    1736,  1735,     0,   981,   984,   985,   956,   955,   957,   950,
     952,   953,   518,  1538,     0,     0,     0,  1544,  1525,  1535,
       0,  1953,  2156,  2159,   241,   244,   243,   245,     0,     0,
       0,     0,     0,     0,  1041,  1327,  1485,  1038,  1026,  1435,
    1425,  1025,  1048,  1044,     0,  2187,     0,  2154,  2215,     0,
       0,     0,     0,     0,  2205,  1680,     0,  1631,     0,  1653,
       0,     0,  1624,     0,  1645,  1605,  1633,  1623,  1405,  1673,
    1620,  1621,   942,   941,   936,  1344,  1327,     0,     0,  1324,
    1346,     0,  1346,  1327,  1327,     0,  1327,  1398,  1341,     0,
       0,  2486,  1426,  2384,     0,     0,   824,   170,   173,   171,
       0,   172,     0,     0,   402,   401,     0,  1671,   395,   124,
     123,   125,   126,  1452,  1453,  1449,  1450,  1448,  1451,   128,
     127,   122,   839,     0,     0,     0,  1671,   375,   354,   355,
     358,   359,   360,   911,   814,   975,   890,     0,   604,   814,
     769,   774,   774,   888,     0,   975,     0,     0,     0,     0,
       0,   975,     0,     0,     0,  1555,     0,   901,   851,     0,
       0,     0,     0,     0,   902,     0,   852,  1555,     0,     0,
       0,     0,     0,   975,     0,     0,   438,     0,   975,   870,
     923,   922,   921,     0,   975,   975,     0,   564,   565,   563,
       0,     0,   556,   539,   731,   853,   437,   854,   603,     0,
     917,   600,   606,  1829,     0,     0,     0,   134,  2439,     0,
    1365,   188,    95,    84,    80,    99,  1462,  1463,  1461,  1459,
    1460,   100,    82,    83,    87,    86,    88,    89,    90,    85,
      91,    81,    92,   101,   102,    79,     0,     0,     0,     0,
    1671,   384,     0,     0,  1555,   344,   361,   362,   365,   366,
     367,   368,   369,   372,   370,   371,     0,  2330,  2332,     0,
       0,   338,   337,     0,   129,  2457,     0,     0,   603,   104,
     436,   537,   540,   807,   809,   808,   799,   798,   105,   107,
     109,  1514,  1591,  1327,  1424,  1834,  1405,     0,  1590,     0,
       0,  1239,  1272,     0,  1295,     0,  1141,   690,   690,  1282,
    1280,   675,   690,  1276,  1281,  1278,     0,   717,     0,   716,
       0,     0,     0,  1246,  1243,     0,     0,     0,     0,  1269,
       0,     0,     0,  1146,     0,  1229,  1251,  1249,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1257,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1134,  1046,  2398,  2400,  1017,     0,  2390,  2392,
    2201,  2202,  2203,   816,  1262,     0,  1078,  1074,     0,  1072,
    1411,  1093,  1092,     0,     0,     0,  1082,  1047,  1225,  1046,
       0,  1285,  1828,   416,   570,  1495,    71,  1704,  2336,     0,
    2347,     0,     0,     0,     0,     0,     0,     0,  2246,  1436,
    1565,     0,  1006,  1010,  1843,  1743,  2239,  2240,     0,   454,
     455,   457,  1047,   471,   451,     0,   443,   446,     0,     0,
     954,  1031,     0,  1557,  1542,  1549,  1543,     0,     0,     0,
    1541,  1818,  1817,  1824,  2373,     0,     0,  2267,     0,     0,
       0,  2376,  1405,  1405,  1479,     0,     0,  1023,  1028,  1024,
    1027,     0,  1045,  1052,  1051,  1819,  1826,     0,     0,     0,
       0,   719,   718,   727,     0,     0,     0,  2200,     0,   723,
     725,   724,  2210,   722,  1682,  1433,  1641,  1640,  1440,  1439,
    1616,  1433,  1635,  1683,     0,     0,  2380,  1339,     0,  1326,
    1325,  1347,     0,  1327,  1346,  1346,     0,  1306,  1305,  1569,
    1572,     0,  1304,  1363,  1329,  1031,  2476,  2488,     0,   730,
     729,   569,   726,   568,   175,   174,   180,   181,   422,   408,
     421,   396,   121,   409,   410,   376,     0,   356,   605,   815,
     873,     0,     0,     0,   774,   599,   814,   783,   775,   814,
     814,     0,     0,   549,   546,   892,   552,   871,   863,   872,
     883,   885,     0,   548,   566,     0,     0,   554,   814,   858,
     899,   900,   914,   543,     0,   579,   580,   578,   560,   567,
     544,   545,   894,     0,  1420,  1422,  1430,   551,   550,     0,
     547,     0,   905,   878,     0,   577,   575,   572,   574,   573,
     576,   555,   553,   868,     0,   910,   910,   887,     0,   587,
     588,   590,   591,  1832,     0,   919,   889,     0,   592,   601,
     593,     0,     0,     0,   144,     0,     0,   841,     0,   137,
     135,   146,     0,     0,     0,  1368,     0,  1369,  1366,  1367,
       0,    96,    98,   415,   414,   413,   412,   385,     0,     0,
       0,  1671,   363,  2331,     0,     0,  2464,   341,   339,   340,
       0,     0,   190,   585,   586,   584,   583,     0,   425,     0,
    1881,   423,     0,   435,     0,  1754,   731,   541,     0,     0,
       0,     0,  1405,  1446,  1837,  1584,     0,  1174,  1296,     0,
       0,   691,  1273,   739,     0,  1283,   677,   676,  1275,  1277,
    1279,  1140,  1148,  1216,  1143,  1142,     0,     0,     0,  1181,
    1182,  1267,  1270,     0,     0,  1154,     0,  1156,     0,     0,
    1231,  1206,  1222,  1185,  1210,     0,  1159,  1135,     0,  1186,
       0,  1191,  1189,     0,  1163,     0,     0,  1170,     0,  1168,
       0,  1169,     0,  1171,  1212,  1214,  1337,  2399,  1018,     0,
       0,  1264,  1070,     0,  1079,  1076,     0,  1073,  1048,  1236,
    1226,     0,  1702,  2337,     0,  2272,  2324,  2323,  2340,  2340,
    2340,     0,  1407,     0,  1522,  1001,  1006,  1010,     0,  1002,
    1754,   458,     0,     0,     0,   478,     0,   476,   444,   982,
    1046,  1539,  1551,     0,  1559,     0,     0,  1536,  1546,     0,
       0,     0,  1545,   242,     0,  2264,  2265,  2263,  1435,  1413,
       0,     0,  1491,     0,  1486,  1039,     0,  1050,  1049,     0,
    2217,     0,  2216,  2228,  2229,  2226,  2227,  2225,  2206,     0,
    2212,  2211,     0,     0,     0,  2222,  2213,     0,     0,  1632,
    1634,  1628,   943,  2386,  1398,  1331,  1327,  1302,  1327,  1313,
       0,     0,  1327,  1309,  1307,  1311,     0,  1405,     0,  1328,
    1360,  1046,  1821,  1427,  1430,   357,   875,     0,   814,   770,
     771,   783,     0,   783,   783,     0,     0,   862,     0,   963,
       0,   867,   727,   561,   898,   897,   562,     0,   860,     0,
    1431,  1432,  1423,   439,   859,   880,   865,  1723,   891,   603,
     918,   751,   671,   620,   611,   690,   614,   613,   657,   628,
     625,   675,   673,   643,   675,   675,   650,   649,   667,   653,
     633,   739,   739,   632,   670,   739,   654,   652,   656,     0,
     658,   675,   663,   651,   655,   672,   648,   645,   669,   690,
     627,   626,   629,   668,   739,     0,   661,   690,   694,   631,
     739,   746,     0,     0,   690,   692,  1831,   145,   133,     0,
       0,   843,   845,     0,     0,   846,  2441,     0,  2443,     0,
    1009,     0,    93,     0,     0,   346,   411,   364,  2333,     0,
     201,  1046,     0,     0,   191,   193,   194,     0,     0,     0,
     536,  1756,  1755,   424,   521,   542,     0,     0,     0,  1591,
    1586,     0,  1582,     0,  1297,     0,     0,     0,     0,   733,
     744,   742,   736,     0,   740,   741,  1274,     0,  1247,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1138,     0,
    1227,     0,     0,     0,     0,     0,     0,  1167,  1165,  1166,
    1435,  2380,   817,  1075,     0,  1237,     0,     0,     0,  2345,
    2345,  2345,  1564,  1563,     0,  1562,  1566,  1003,  1011,     0,
     456,   459,     0,     0,     0,   475,     0,   519,     0,     0,
       0,  1560,  1548,  2377,  1537,  1540,  1826,  2266,  1030,     0,
    1408,  1490,  1487,     0,  1480,  1482,  1484,     0,  1820,     0,
       0,  2221,  2207,   728,     0,     0,     0,     0,  2208,  1332,
    1330,  1340,     0,  1298,  1327,  1327,     0,  1298,     0,     0,
       0,  1571,  1424,  1573,  1364,     0,  1342,     0,  1429,     0,
       0,   874,     0,     0,     0,     0,     0,     0,   904,     0,
     917,   864,   884,   906,   694,   975,  1421,   879,   881,   951,
       0,   589,     0,   755,   619,   612,   630,   679,   674,     0,
     679,   679,   639,   657,   634,     0,   739,   647,   638,   659,
     662,   664,   666,   679,     0,   739,   636,   623,   679,   704,
       0,     0,     0,   701,   698,     0,   749,     0,   707,   607,
     695,   697,     0,     0,   660,   739,   616,   747,   746,   618,
     739,   746,   679,     0,   693,   679,     0,   131,   136,   147,
     148,   834,  2440,     0,  2438,     0,  1005,  1370,    97,     0,
       0,   204,   202,   203,     0,   197,   199,   194,  2451,     0,
    2458,     0,     0,  2456,   426,   428,   436,   522,     0,     0,
    1430,   812,     0,     0,  1447,  1175,   688,   686,   689,   687,
     735,   734,   738,     0,   737,   746,     0,  1179,  1180,  1268,
    1259,  1204,     0,  1155,  1228,     0,     0,  1211,  1187,  1190,
    1188,  1194,  1195,  1038,  1038,   581,  2393,  1077,  1705,  2348,
       0,     0,  2344,  2342,     0,  2343,  2341,  2315,     0,  2270,
    2271,  2269,  2256,     0,     0,     0,  1046,   464,     0,   481,
     480,   477,  1435,  1550,  1552,  1558,  1547,     0,  1409,  1424,
     720,  1483,     0,  1040,  2219,  2218,  2220,  2214,     0,     0,
       0,     0,  1314,     0,  1318,  1323,  1319,     0,  1310,  1308,
       0,  1446,  1352,  1353,     0,     0,  1358,  1362,  1435,  1430,
     877,     0,   602,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   903,  1797,   893,   895,   861,     0,   866,
     557,     0,   754,     0,   759,   683,   684,   685,   640,   680,
     682,     0,   642,   610,   635,   665,   641,     0,   637,   624,
     710,   709,  1053,   700,   713,     0,     0,     0,   708,   696,
     706,   699,   615,   617,   621,   622,   608,     0,   609,  1830,
     138,   847,   278,  2442,  1021,     0,  2447,   119,  2455,  2465,
     201,     0,     0,   142,     0,   192,   727,   195,  2377,  1754,
       0,   431,   786,     0,   811,     0,   788,   790,   745,   743,
       0,     0,  1230,  1232,  1338,   582,  2321,  2320,  2319,  2316,
       0,     0,     0,     0,     0,     0,  2346,  2350,  1561,     0,
       0,     0,   472,     0,   468,   470,     0,   506,   520,  1417,
    1430,     0,  1435,     0,  1488,  1481,  2224,  2223,  2209,  1333,
       0,     0,     0,     0,     0,  1371,  1570,  1348,  1348,  1359,
    1343,  1428,   876,     0,     0,   786,     0,     0,  1799,  1798,
     917,     0,   752,     0,   756,   757,   758,     0,   750,   681,
       0,   818,     0,   712,   702,  1053,   705,     0,   140,   304,
       0,   290,   276,     0,     0,     0,   280,   149,   152,   150,
       0,   151,   157,     0,   158,   159,   160,   161,   162,   153,
     302,   303,   156,   154,   155,     0,  1846,     0,  1847,  2445,
       0,     0,  2444,   168,   198,     0,     0,   134,   143,  2459,
     711,   429,   427,     0,  2373,     0,  1555,   106,   787,   803,
     802,   792,  1430,     0,     0,   108,   789,   805,   796,   110,
     791,   804,   794,   678,  1153,  2317,  2351,  2354,  2352,  2353,
    2355,  2349,     0,  1744,  1047,     0,   465,   466,     0,   484,
       0,  1555,     0,     0,  1555,  1555,  1555,  1555,   499,   507,
     509,     0,  1418,  1419,     0,  1414,  1416,  1410,  1471,   721,
    1757,  2380,  1315,     0,  1320,     0,  1312,     0,     0,  1356,
    1354,     0,   786,   594,   788,   790,   896,     0,   753,     0,
       0,   739,     0,   739,   703,   139,     0,   132,     0,     0,
     289,   292,     0,     0,   295,   285,   284,   286,     0,   279,
     278,   278,   332,   283,   329,   328,   321,  2377,     0,     0,
       0,  2466,   200,  1046,   146,     0,   433,   432,   801,     0,
     793,   810,   813,     0,   797,   795,  1567,  1575,     0,   720,
       0,   473,   472,   469,     0,   482,     0,  1555,  1555,     0,
       0,     0,     0,     0,   479,   508,  1555,  1430,     0,  1029,
       0,  1765,  1334,     0,     0,  1372,     0,  1349,     0,     0,
       0,   598,   597,   595,   596,     0,   765,     0,   764,     0,
     761,   760,   644,   819,   646,   141,   305,   316,   319,   311,
     291,     0,     0,     0,   281,   278,     0,   265,   263,   264,
     270,   271,   272,   273,   274,   275,   266,   269,   267,   268,
     278,     0,   209,     0,     0,  2446,     0,  2448,     0,   178,
     177,   169,     0,   278,  2452,     0,  2460,  2377,   800,   806,
       0,     0,  1745,   460,   467,   492,   485,   488,     0,   517,
       0,     0,  1466,  1464,  1465,   513,  1467,   514,   512,   510,
     503,     0,   501,     0,  1415,  1472,     0,     0,     0,     0,
    1758,  1760,     0,  1489,  1317,  1322,  1351,  1350,  1365,     0,
     882,   767,   768,   766,     0,     0,     0,     0,   278,   312,
       0,   287,     0,     0,     0,     0,   207,   335,     0,   205,
     323,   323,  2449,  2450,   179,  2467,     0,   148,   168,   434,
    1574,  1576,  1771,   492,     0,   490,     0,   486,   483,   487,
     515,   516,     0,   500,     0,   511,     0,     0,     0,     0,
       0,  1759,     0,     0,  1766,  1768,     0,     0,     0,     0,
     313,   319,   309,   317,   278,     0,     0,   277,   296,   331,
     208,     0,   333,     0,   278,     0,   322,   324,   326,     0,
     130,  2461,     0,  1757,   489,     0,   497,   493,   495,   498,
     506,   505,   502,  1046,  1763,  1764,     0,  1761,     0,     0,
    1767,  1357,  1355,   763,   762,     0,   310,     0,     0,   308,
     288,   293,   278,     0,   278,   220,   219,     0,   211,   259,
     330,     0,   210,  2453,   278,     0,  1765,   491,     0,     0,
     504,     0,     0,  1475,  1477,  1762,  1770,  1769,   314,     0,
     278,     0,   278,     0,   278,     0,     0,     0,     0,     0,
     206,   278,  2462,     0,  1773,   496,   494,  1047,  1473,  1046,
       0,   306,   278,   294,   299,   336,     0,   214,   260,   261,
       0,   217,  2454,  1772,     0,  1777,  1478,  1476,   278,   278,
     295,   298,   334,     0,     0,   212,   213,   225,   224,   216,
       0,     0,     0,  1784,   278,   278,   300,   233,   231,   278,
     221,   229,   223,     0,   230,   262,   218,  1775,  1776,  1774,
    1779,     0,     0,  1781,  1782,     0,  1746,     0,   215,   232,
    1783,  1778,     0,  1785,  1787,     0,   222,  1780,     0,  1046,
    1786,     0,  1047,  1788
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    56,   575,  1377,    57,    58,    59,    60,    61,  1249,
      62,   774,  1186,  1663,  1664,    63,   515,    64,   971,  1434,
    1435,  2840,  2841,  1436,    65,  1989,  2878,  2879,  2880,  1453,
     485,   486,  1848,  1849,   996,  2861,  2827,  3590,  2831,  3698,
    3827,  3737,  1921,  3165,  3591,  3592,  3707,   510,  1987,  1391,
    3851,  1828,  3951,  1829,    66,   605,   969,  1413,  1414,  3183,
    3184,  3422,  3185,  3414,  3415,  3416,  3417,  4074,  3925,  4019,
    4075,  4147,  4183,  4189,  4190,  4117,  4199,  4200,  4201,  4187,
     841,  4202,    67,   538,   539,   843,  1277,  2234,  1278,    68,
    4118,  4185,  3926,  3927,  3834,  3928,  3710,  3929,  3838,  3930,
    3713,  3931,  3932,  3933,  3934,  4066,  3935,  3833,  4110,  3922,
    3923,  4112,  4164,  4181,  3936,  3720,  3828,  4006,  3721,  3829,
    4061,  3918,  4062,  4105,  4160,  3919,  4007,  4108,  4010,  3937,
    3943,  4076,  3938,  3944,  3939,  3725,  3845,  3942,  3843,  3941,
    4114,  4071,  2473,  2860,   593,   594,   616,  1979,   595,   985,
     944,  1393,  1861,  1862,  2338,  2339,  2455,  2456,  2457,  1853,
    1854,  1855,  1967,  1968,  1969,  1835,  1836,  1837,  1397,  1832,
    1833,   596,   945,   955,  1856,  1857,  1858,  2461,  1971,  1972,
    1973,  1974,  1859,  1656,  1860,  2729,  2479,  2871,  3608,  3193,
    3744,  3957,  2872,  2873,  2406,  2789,  2386,    69,   527,   821,
    1246,  2208,  1247,  2618,  2619,  2620,  1702,  1703,  3487,  1707,
    2207,  3642,  3872,  3643,  3644,  2622,  3776,  2626,  2986,  2987,
    3264,  3489,  3647,  3968,  3874,  4038,  3966,  4034,  3967,  4036,
    4129,  4087,  4088,  3884,  3981,  3982,  4042,  4090,  3788,  3789,
    3790,  2227,  2631,  3492,  3428,  1961,  1383,  1384,   487,   488,
     489,   613,  2480,  1908,  2481,  2482,  2804,  1910,  1911,  2593,
    1311,  2801,  2778,  3463,  2867,  2808,  2809,  2810,  2811,  2812,
    2818,  2745,  2347,  2348,  2411,  2821,  3606,  3349,  3364,  3149,
    3150,  3151,  3152,  3153,  3154,  3155,  2895,  2896,  3558,  3559,
    3560,  2891,  2892,  3395,  3379,  3380,  3381,  3607,  3573,  3213,
    2672,  2673,  3654,  2681,  2682,  2720,  3030,  2721,  1387,  3214,
    3215,  3216,  3389,  3382,  2820,  3343,  3551,  3554,  3688,  3910,
    2349,  2746,  2350,  2749,   900,   490,  2351,  2352,  1467,  1468,
    3747,  3755,  3759,  3748,  3760,  3756,  3749,  3750,  3751,  3762,
    3758,  2486,  3429,  3430,  2738,  2951,  3690,    70,  1401,   938,
     947,   943,   961,   600,  1402,  1922,  2417,  3401,   583,  1912,
    3335,  3079,  3339,  1913,  2758,  1914,  3066,  3321,  1915,  3095,
    3337,  3548,  2759,  2760,  1916,  1917,  1918,  3078,  3087,  3680,
    2353,   123,  2153,  2816,  2393,    71,  1359,  1354,    72,   912,
     907,   908,  1357,  1358,  1794,  2283,    73,   608,  1440,    74,
    1257,  2219,  2220,  2221,    75,   962,    76,    77,   609,  1447,
    1448,  1449,    78,  1242,   130,    79,   829,  1252,  1254,  1255,
      80,   604,   963,   964,   965,   966,  1927,    81,  1694,  2184,
    2185,  2186,  2187,  1410,  2419,  1411,  1412,  1936,  2979,    82,
      83,   572,  2108,   544,   850,   545,   546,  1734,  2247,  3464,
     861,   862,   863,  2657,  1289,  1290,  1291,  2252,  2662,  1041,
     739,   740,   741,   742,  1134,  1135,  3383,   743,  1144,  1622,
     744,   745,   746,   747,   748,   749,  1649,  2919,  2920,  3230,
    2138,  2139,  2140,   750,  2026,  2906,  2039,   751,  1127,  1607,
    1539,  3222,  2911,  1484,  2009,  2516,  2590,  2102,  1066,  1067,
    1031,  2016,  1490,  1801,  1802,  1803,  1804,  1805,  3309,  3308,
    3310,  3660,  3513,  3662,  3517,  2294,  1806,  1807,  2695,  3511,
    3801,  2103,  2104,  2105,  3240,  2696,  3046,  2714,  2715,  3528,
    2285,  1808,  2702,  3809,  3525,  3526,  3900,  3899,  3527,  3314,
    3315,  3059,  3060,  2836,  2837,  2838,  3664,  1530,  1531,  1537,
    1229,  1230,  1485,  2182,  2607,  3499,  3651,  2129,  3280,  3649,
    3795,  1919,  2784,  2785,  2249,  2250,  2718,  3063,  3092,  1314,
    3465,  2609,  1767,  1768,  3202,  4188,  2730,  2431,  3975,  2204,
    2205,  3889,  4046,  4132,  4133,  4134,  3012,  3013,  3284,  3285,
    2251,  2654,  3014,  3500,  3800,    84,   494,    85,  1661,  2144,
    1183,  2158,   973,  1471,  1472,   762,   507,    86,   516,  2183,
      87,   534,  1720,   813,   833,  1260,  1261,  2228,  2632,  2639,
    2229,  2644,  3273,  2634,  2991,  2992,  2148,  2149,  2635,  2994,
    3270,  3254,  3255,  2974,  3484,    88,   560,  3057,  2709,  2710,
    3866,  3867,   834,    89,   493,  1018,  1998,  1477,  1997,  1019,
    1020,  2000,   634,   635,    90,   914,   557,  1336,  1337,  1338,
    1783,    91,   549,   901,  2685,  2691,  1762,   825,  1179,  1318,
     904,  1319,  1748,  2267,  1300,    92,   934,   933,    93,   579,
    1379,    94,   775,  1202,  1673,  2597,  2962,  1203,  1204,  2159,
      95,   535,   838,   839,    96,   529,   826,  1713,    97,   520,
      98,    99,   817,  2980,  3869,  4032,   524,  1696,  1238,  3194,
    3891,  3990,  3991,  3993,  4054,  4055,  4083,  4175,  4209,  4193,
    4212,  4213,  4216,  4223,  4224,   753,   921,   754,  3543,   755,
     756,  2640,  2641,  3064,   757,  2642,   758,  2739,   974,  1474,
     513,   465,   590,   922,  2615,   760,  3727,   941,   989,   467,
     468,   100,   865,   548,  1293,  1294,  1295,  1743,  1744,   905,
    2117,  1745,  1746,  2264,  2259,  3292,  3036,  3028,   101,   818,
     472,  1240,  1241,  2193,   102,   559,   103,  1231,  1690,  1691,
    2179,  2606,  2180,   104,   846,   105,   800,  1684,   801,  1207,
     802,   803,  1221,  1215,  1224,  1218,  3630,  3476,  3477,  2167,
    1182,   990,   991,  1676,  2161,  2162,  3249,  3479,  2965,  3636,
    3637,   106,   131,   475,   611,   980,  1283,   107,   108,   109,
     110,  1286,  1372,  2243,  1373,  2109,  1374,  1375,  1815,  1732,
    1603,  1604,  2949,  1124,  1125,  2112,  2563,  2564,   864,   620,
    1006,   998,   124,   125,   126,   623,   624,   127,   959,   960,
    2418,  2833,  3167,  3404,  3405,  3596,  3732,  1000,  3602,  4026,
    4151,  1001,  1002,  2862,  3604,  3855,  4028,  4124,  1003,  2470,
    3180,  3733,  3953,   111,   923,   569,  1370,  1365,  1367,  1811,
    2301,   112,   113
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -3560
static const int yypact[] =
{
    3590,  2194,    69, -3560,  -150,   162, 42448,   109,  1225,  1225,
     459,  2175, -3560, -3560, -3560, -3560, -3560,  2452, -3560, 42448,
      69, -3560, 23085, -3560, -3560,   682,   899,   179,  1225,    69,
   -3560, 42448, -3560,   629,  -151,    69, -3560, -3560, 37760, -3560,
     459, 42448, -3560,   775, -3560, 37760,  1168,  -114,   719,   688,
     935, -3560, -3560, 42448,  1923,  -146,  1320,  1187, -3560, -3560,
    1006, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, 23675, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560,  1222, 42448,  1278, 42448, -3560,  1151,
   42448, 36002, 42448,   929,  1317, -3560, -3560,  1368, -3560, -3560,
    1225,   459, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,   883, -3560, -3560,   995,
   -3560, -3560, -3560, -3560, -3560,  1549,  1394, -3560,  1422, 36002,
   -3560, 42448, -3560, -3560, -3560,   988, -3560,  1153, -3560,  1179,
    1488,  1538,  1566,    89, 11107,  1608,  1608,  1608, 42448,  1548,
    1608,  1608, 42448, -3560,  1608, -3560,  1608,  1225, -3560, -3560,
    4352, 42448,  1382,   184,   -93, 36002,  1520, 42448, -3560, -3560,
   11107, -3560,  1571, -3560, -3560, -3560,  1225,  1801,  1659,   937,
   42448, -3560, -3560,  1225,   187,   730,  1292, -3560, -3560,  1405,
   -3560,  4575,   197, -3560, -3560, -3560,  2040, -3560, -3560,  4544,
    1405, -3560, -3560, -3560,  1285, -3560, -3560, -3560, 42448,  1225,
    1598, -3560, -3560,   355,   355,   355, -3560,   355, -3560,   355,
   -3560,  -146,  1272, -3560, -3560,  1270, 42448,  -144,  -131, -3560,
   -3560,  1271,   659, -3560,  1329, 33072, -3560, 42448, -3560, -3560,
   -3560, -3560,  1540, -3560, -3560, -3560,  2254, -3560, 23085, 42448,
    1406, -3560, -3560, -3560, 23085,  1302, 42448, -3560, 23085, 23085,
     190,  1065,  1353, 42448, 42448,  1727, -3560,  1908, 33072,  1511,
   -3560,   260,  1129,  1368,  1917, -3560,  1394, -3560, 42448, 42448,
   42448, -3560, -3560, -3560, 38346,    89,  1334,  1344,  1351, 15356,
   -3560,  1355,  1360,  1362, 11107,  1364,  1367,  1370,  1391,  1399,
    1407,  1430,  1453,  1455,  1455,  1466,  1474,  1490,  1497,   880,
    1501, -3560,  1509,  1534,  1541, -3560, -3560,  1553,  1556,  1558,
   -3560,  1562,  1567,  1572, 11714,  1579,  1588, -3560, 20131,  1618,
    1622,  1628,  1635,  1641,  1644,  1647,  1652,  1678, -3560, -3560,
   11107,  1687, -3560, -3560,  1689, -3560,  1694,  1698,  1700,  1706,
    1714,  1720,  1722,  1724,  1726,  1733,  1742,  1744,  1746,  1752,
    1754,  1765, -3560,  1076,  1768,  1771,  1341,  1785, -3560,  1794,
   -3560,   392,  1804,  1455,  1455,  1455,  1813,  1827,  1831,  1857,
    1859, 15356, 15356, 15356, 11107, -3560, 42448, -3560, 42448,  1318,
    1611, -3560,  3181, 15356,   158, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,  1462,  1480, -3560, -3560, -3560, -3560, -3560,  1863,
    1338,  1834, 42448, 42448, 42448,  1792, 42448, 42448, 36002,  1517,
   42448, 33072, -3560,  1608,  1590,  3643,  1802,  1772,  1988, -3560,
   -3560, -3560, -3560, -3560,  1869, -3560, -3560,  1761, -3560,  1958,
   -3560, -3560,   174, -3560,   106, -3560, -3560, -3560, -3560, -3560,
   -3560,  1967,  1821, -3560, -3560,   132, -3560, -3560, 42448, -3560,
   -3560, -3560, -3560,  2259,  2005,  1318,  2443,   193, 23085, -3560,
    1251, -3560,  -197, -3560, -3560,  2229, -3560, -3560, 33072, 23085,
   -3560, -3560, -3560, 20721, -3560, -3560,  2453, -3560,  1907, -3560,
   -3560,  1480,  3259, -3560,  1802,  2179, -3560,  2183,  2091,  1065,
    1985, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,  1940,  2040, -3560, -3560, -3560, -3560,  2397, -3560,  2114,
       7, -3560,  1976,  2271,     7, 33658,  2329,   173, -3560,   375,
   -3560,  2407, -3560, -3560, -3560, -3560,  2104,  2106, -3560, -3560,
     402,  1603, -3560,  2441, -3560,    51, -3560,  2123,  2329,     7,
     173, -3560,  2354,  2475,   428,  -155, -3560, -3560,   650, -3560,
   -3560,  2546, -3560, -3560, 23085, -3560, -3560,  2259, -3560, -3560,
   -3560,  2042, -3560,  2301,  2156, -3560, -3560,    31, -3560,  2061,
     758,  2519, -3560,   -91, 34244, -3560, -3560, -3560,  2557,  2575,
    1455,  2080, -3560, -3560, -3560,  2723, -3560, -3560,  2130,  2631,
    2631,  2631,  2732, -3560, -3560, -3560, -3560, -3560,  2291,  2171,
   -3560,  1406, 23085,  2508,  2136, -3560, -3560,  2376, 11107, -3560,
   -3560,  4861,   243, -3560, -3560,   143, -3560,  2693,  2337, -3560,
   -3560, -3560, -3560,  2589, -3560, -3560,  2723,  2653,  2631,  2558,
    2170, -3560, -3560, -3560, -3560, -3560, -3560,   206, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560,   947, -3560, -3560, -3560, -3560,
   -3560,  1406, -3560, 23085, -3560, -3560, -3560, 23085, -3560,  2173,
   -3560,  2161, -3560, 11107, 11107,   309,  2708,  2768,  2768,  2768,
    1318,  2204, 11107, 11107, 11107, 11107, 11107, 11107, 11107,   316,
    2185, -3560, -3560,  8679, -3560,  2188, 11107, 11107,  2264, 11107,
    1480, 11107, 24265, -3560,  3501, 11107,   505,  2661, 11107, 11107,
   11107, 11107,  3313, 11107, 11107, 24265,  2785,  2191, -3560,  2186,
    1388, 11107, 11107,  1410, 11107, 11107, 11107, 11107, 11107, -3560,
    8679, -3560, 11107, 11107, 11107, 11107, 15356, 11107, 11107, 11107,
   11107, 11107, 11107,  2768,  2768, 11107, 11107,  1506,  8679, -3560,
   11107,  1480,  2296,  2296, 11107,  1480,  7465, 11107, -3560, -3560,
   -3560,  2195, -3560, -3560, -3560, 24265,  2768,  2768, 11107, 11107,
    2708,  2708,  2708,   147,  2198,   542, 11107, 25445,  2187, -3560,
   -3560, -3560, -3560, 11107, 11107, 11107, -3560, 15356, -3560, -3560,
    1938, -3560, -3560, -3560, 12321, 15356, 15356,  2203, 15356, 15356,
   15356, 15356, 15356,  2551, 15356, 15356, 15963, 16570, 15356, 15356,
   15356, 15356,  1142,  2708, 36002, 15356, 11107, -3560, -3560, 42448,
   -3560, -3560, -3560,  2196, 23085,  1517, -3560, -3560,   -73,  2658,
   -3560, -3560,  2209, 23085, -3560,  2208, -3560,  2554, -3560,  2556,
    2560,  2565, -3560, -3560, -3560, -3560,  2787,  2571, -3560, -3560,
    2572, -3560, -3560,  2235, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,  2331, -3560, -3560, -3560,  2239, -3560, 33072,  2239, -3560,
   -3560,  2239, -3560, -3560,  2239,   997,  4635, -3560, -3560, 42448,
   -3560, 43034, -3560, 20721,  -150, -3560, -3560, -3560,  2584,   233,
    2241, -3560, 23085, -3560,   110,   110,  2479,   827, 36002, -3560,
   -3560,   163,  2246,  2327,  2255, -3560,  2334, 23085, 23085, -3560,
   -3560, -3560, -3560,   730, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560,  2256,  2706,  2269,
   33072,  1024, -3560, 42448, -3560,  1685, -3560, -3560, -3560,  2273,
   -3560, 11107, -3560,  2276, -3560,   986,  2638, -3560,  -150, 11107,
   -3560,  2284,  1394, 42448, 42448, 42448, 23085, 42448, 23085, -3560,
     826,   826, -3560, 31314, -3560, -3560, -3560, -3560,     7, 42448,
   42448,     7, 33072, -3560,   173, 42448,     7, -3560,  2655,  2377,
   -3560, -3560, -3560,  2719, -3560, -3560,  2705,  2288, -3560,  2638,
   -3560, -3560,   173, -3560, -3560, 23085, -3560, -3560,   173, -3560,
     173,   173,     7,     7,  2339, -3560, -3560,  2297, -3560,  2339,
    2434, -3560,  -141,   355,  2534, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560,    64, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560,   167, -3560, -3560, -3560,  1464,  2782, -3560,
   36002,  2218,   834,  1008,  2218,   783,  -150,   400, -3560,   400,
   -3560,  3138,  2566,   214, 23085, -3560,  2314, 38932, 23085, -3560,
   -3560, -3560,  1195,  2318,  2330,  1318,  2781,  2783,  2784,  2786,
    2788,  2794,  2795,  2796,  2801,  2802,  2808,  2809,  2812,  2814,
    2818,  2819,  2820,  2821,  2333, -3560, -3560, -3560, -3560, 23085,
   -3560, -3560, -3560, -3560,  2383, -3560, -3560, -3560, -3560,  2165,
   -3560, -3560, -3560,   176,  2215,  2390,  2416,   120, 33072,  2792,
   42448, 42448,  1394, 42448, 42448, -3560, -3560,  -163,  2632,  2634,
    2636,  2374, -3560, -3560, -3560,  1527, 42448,  2806, 27798, -3560,
     304,   936, -3560,  2768,  2381, -3560,  2386,  2387,  2392, 11107,
      52,  1018,   982,  1537,  1120,   994,   330,   181, -3560,  2393,
    2403, -3560,  1000, -3560,   332,   349,  1033,  1035,  2401,  2404,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
    2827, -3560,  1260, -3560, -3560, -3560, -3560,  2411, -3560, -3560,
    1090,   379,   416,   209,  2421,   418,  1312,  1415,  2417, 24265,
   42448,  2768,  2418,  1097,  1110,  2768,  2420,   437,  1136,  1421,
    1468,  1475,  1141,  1149,  1177,   470,  1478,  2581,  1193,   498,
     512,   590,   706,  1199,  2423,  2425,   713,   205,  2768,  2426,
    1205,   275,  2428,  2429,  1214,  9286,  9893, 10500,   927,   764,
   -3560,  2439, -3560,  2186,  2440,  2444,   277,  1254, -3560, 11107,
   -3560, -3560,   687,   770,  2471,   192,    79, -3560,  2588, 42448,
    2075,   183, -3560, -3560, -3560, -3560, -3560, -3560,   728, -3560,
    2448, -3560,  2449,  1823,  2431, 11107,   175,  2431,  2772,  2167,
    2167, 15356,  2867,  1968, 11714,  1515, 11714,  1515,  2431,  2431,
    2431, -3560, 15356,  2451, 15356, 15356, -3560,  2708,  1318,  2455,
     879, 42448, -3560,   -73, -3560, -3560, -3560, -3560,   788, 33072,
     131, 23085, 36002,  2442, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,  4278, 23085, -3560, 42448, -3560,  2526, -3560, -3560,
   -3560, 21311, 21311, -3560, 21311, -3560, -3560,   553,   749,  2626,
    2481, -3560, -3560, -3560, 23085, -3560,  2845,   790, 23085,  2314,
    2462, -3560, -3560, -3560, -3560, -3560,  1089,  2567, -3560,  2465,
   -3560, 11107,  -150, -3560, 33072, 33072, 23085, 23085,   477, -3560,
    1354, -3560,  3259, 17177,  2877,  2888, 21311, 21311, 21311, -3560,
   -3560, -3560, -3560, -3560,  1328,  1318, -3560,  2464, -3560, -3560,
   -3560, -3560, -3560, 39518,   194, -3560, -3560,  -150,  2893, -3560,
    1318,  2473, 42448, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,   773, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,     7, -3560, -3560, -3560,
   -3560, -3560,  2684,  2329,  1603,  2893,     7,   173, 23085,     7,
       7, -3560, -3560,  1637, -3560,   650, -3560, -3560, -3560, -3560,
   42448,  2904,  2623, -3560,  2476, -3560, -3560, 23085, -3560,  2485,
   -3560,  2899,  3040,  2329, -3560, -3560, -3560,   788,   788,  2775,
   -3560,  -150,  2611,  2613,  2616,  2618,  2620,  2659, -3560, -3560,
    -150,  -150, -3560, -3560,   788, -3560,  1973, -3560, -3560, -3560,
   -3560,  -150,  -150,  -150,  -150,  1343,  -150,  -150,  1523, -3560,
   -3560,   788,   788, -3560,   231, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,   226, -3560,  2635,  3029,  2741,   788,   788,  3029,
     788,  2744,  2745,   788,   788,  2596,  2990,   788,  2880,  2619,
    1721,  2890,   788, -3560,  2621,  2999,   788,   788,   788,   788,
    3029,  2760,  3087,   788, -3560,   788,  2763,  2766,   124,  2767,
    2776,   788,   837, 42448,   788,  2777,   788, -3560, -3560,  5459,
   -3560, -3560, -3560, -3560, -3560, -3560,   668, 21903, -3560, -3560,
     844, -3560,  2722, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560,  2540, -3560, -3560, 11107,  2542,
    1343,  -150,  -150,   301,  -150,  1343,  -150,  -150,  -150,  -150,
    -150,  1343,  1343,  -150,  1244,  -150,  1343,  4861, -3560, -3560,
   -3560, -3560,   244,   788,   788,   788,   788, -3560,  2112, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, 36002,  2882,  2155,
     684, 36002, -3560, 42448, -3560,   360, 42448,  2547,  -135,  2944,
     422,   422, -3560, 23085, 23085, 23085, 42448,  2587,  2481, 27798,
   -3560, -3560,  -141, -3560,  2543, 12928, -3560,  2553, -3560, 11107,
   -3560, -3560, -3560,  1290, 11107, 11107,  3008,  1716, -3560, 34830,
   -3560, -3560, -3560, 11107, 34830,  1716, 11107, -3560,  2562, -3560,
    2934,  2940, -3560, -3560, -3560, -3560, 11107, -3560, 11107, 11107,
   -3560, 11107, 11107, 11107, 11107, 11107, -3560, -3560, 15356, -3560,
    2576,  2564, -3560, -3560, -3560,  2585, -3560, 11107, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, 11107, -3560, 11107, -3560, 11107,
   11107, 11107, 11107, -3560, -3560, -3560, 13535, 11107, 11107,  2592,
   -3560, -3560, -3560, 11107, 11107, 11107, -3560, 11107,  1029, 11107,
    1791, 11107,  2000, 11107, -3560, 11107, -3560, -3560, -3560, -3560,
   11107, -3560,  1525, -3560, -3560,  2105, -3560,   687,  2597, -3560,
   -3560,  1685, -3560, -3560,  2577,  2582,  2591, 36002, 11107, -3560,
   -3560, -3560, -3560, -3560, -3560, 15356,   283,  2599, 15356, -3560,
    2772,  3313,  3313,  1945, 11107,   175,  2772, 11107,  2602,  2603,
   -3560, 11107, 42448, -3560, -3560, -3560, -3560, -3560, -3560, 36002,
   -3560, -3560, -3560, -3560,   131, -3560,  2208, -3560,  2314, -3560,
   -3560,  1594, -3560, 33072,  2598, -3560,  2604,  2641,  2680,  2683,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,  2329,  1354, -3560,  2612, -3560, -3560,  2376,  2695,
    2630,  2958, -3560, -3560, -3560, 42448, 15356, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,  3174,  2622,  2625, 42448,
    1318, -3560,  2691, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,   784, -3560, -3560,  2633,  2633, 18949, -3560, -3560, -3560,
    3069,   -51,   -51,   -51, -3560, -3560, -3560, -3560,  2869, 33072,
    3041,  3043,  3052,   -91, -3560,   610, -3560,   149,  3011,  2329,
   -3560,  3057, 36588, -3560, 28384, -3560,  2637,  3010,  2639,   788,
   30728,  1016, 26034, 31900, -3560, -3560,   301, -3560,   307, -3560,
   31314, 31314, -3560,  2903, -3560, -3560, -3560, -3560,  2481,   173,
   -3560, -3560, -3560,  2642, -3560, -3560,   723,  3016,  3026, -3560,
    2889,    63,  2889,   723,   723, 24265,  -141,  2013, -3560,  1343,
    2959, -3560, -3560, -3560, 35416, 32486, -3560, -3560, -3560, -3560,
    3160, -3560,  3165,   865, -3560, -3560,  1102,  1008, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560,   783,  1102,  1102,   400, -3560,   141, -3560,
   -3560, -3560, -3560, -3560, 24855,    69, -3560,   198, -3560, 24855,
   -3560,  1195,  1195, -3560, 24855,    69,   301,  1343, 24855,  1343,
   40104,    69,  -150,  -150,  2143,   788,  1343, -3560, -3560,  3030,
   42448,  3031, 24855, 24855, -3560, 36002, -3560,   788,  1277,  1343,
     301,   301, 24855,    69, 24265,  1783, -3560,  -150,    69, -3560,
   -3560, -3560, -3560, 23085,    69,    69,  1888, -3560, -3560, -3560,
    1343, 40104, -3560, -3560,  5329, -3560, -3560, -3560, 18359, 42448,
     286,   856, -3560,  2662,    21,   288,  2746,  1528,  2675,  2676,
   40690,  1318,  1343, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,  -150,  1089,  1102,  1102,
    2215, -3560,  2927,  3086,   788, -3560,   216, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,  2764, -3560,  3266,  2855,
    2685, -3560, -3560,   738, -3560, -3560,   785, 23085, 17769, -3560,
    2919, -3560,  2260, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,  2681,  -141,  2945,  1607,  2481,  2703, -3560, 11714,
    1273, -3560,  1318, 11107,  1318,  1799, -3560,  2688,  2688, -3560,
   -3560,  2701,  2688,  3074, -3560,  3076,  2702, -3560,  2711, -3560,
    1346,  2714,  2716,  1462, -3560, 11107, 11107,  1348,  1356,   621,
     816,   825,   311, -3560,  1392,  2699, -3560, -3560,  1396,  1401,
    1413,  1460,   835,  1471,  1602, 11714,  1498,   973,   322, -3560,
    1519,   860,   884,  1531, 11107,  1544, 11107,  1584, 11107,  1586,
    1620,  1636, -3560,  1940,  2105, -3560, -3560,  2717, -3560, -3560,
   -3560, -3560, -3560,  2696,  1318,  2726, -3560, -3560, 11107, -3560,
     158, -3560, -3560, 15356,   328,  2728, -3560,  1318, -3560, -3560,
    2729,  1462, -3560, -3560, -3560, -3560, -3560,  2742, -3560, 42448,
     495,  2712, 28970, 33072, 33072, 33072,  2736, 11107, -3560, -3560,
    2961, 23085, -3560,  3121, -3560, -3560, -3560, -3560,  2737,  2735,
   -3560, -3560, -3560,  2772,  3091,  2971, -3560, -3560,  2743, 33072,
   -3560,  2040, 24265, -3560,  2747, -3560,  2747,  1530,  2749,  1648,
   -3560, -3560, -3560,  2738,  1985, 17177,  3172,  2170, 33072, 33072,
   33072, -3560,  2481,  2481,   948,  2804,  3117, -3560, -3560, -3560,
   -3560, 41276, -3560, -3560, -3560, -3560,   965, 42448,  3106, 42448,
    8072, -3560, -3560,  3290, 11107, 33072,  1072,    79,   788, -3560,
   -3560, -3560, -3560, -3560, -3560,  2329, -3560, -3560, -3560, -3560,
   -3560,  2329, -3560,     7,  1637,  -199,   770, -3560,  1734, -3560,
   -3560, -3560,  3123,   723,  2889,  2889,  3124,  3017,   -43,  2769,
   -3560,   788, -3560, -3560, -3560,  2040, -3560, -3560, 11107, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,   226, -3560, -3560, -3560,
   -3560,  2773,  3134,  3136,  1195, -3560, 24855, -3560, -3560, 24855,
   24855,   828, 40104, -3560, -3560, -3560, -3560, -3560, -3560,  2779,
   -3560, -3560,  1089, -3560, -3560, 32486,  -150, -3560, 24855,  2779,
   -3560, -3560,   186, -3560,  -150, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, 40104,  2789, -3560,   323, -3560, -3560,  1801,
   -3560, 40104, -3560, -3560, 40104, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560,  2778,  2654,  1663, -3560,  2791,  2797,
   -3560, -3560, -3560, -3560, 42448, -3560, -3560, 23085, -3560, -3560,
   -3560,  5462, 42448,  2998, -3560, 11107, 11107,  3034, 42448,  3038,
   -3560,  3314, 42448,  3370, 40104, -3560,  2799, -3560,  2800, -3560,
    1664, -3560, -3560, -3560, -3560, -3560, -3560, -3560,  2798, 42448,
    1102,  2155, -3560, -3560,  -150,   785, -3560, -3560, -3560, -3560,
    3044,  3051, 42448, -3560, -3560, -3560, -3560,  2918, -3560, 23085,
    3345, -3560,  2956, -3560,  2805,   853,  3325, -3560,  2807,  2810,
    2811, 27798,  2481,  3154, -3560, -3560,  3313, -3560,  1318, 11107,
    1083, -3560, -3560,   381,  1239, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560,  2813,  3313,  3313, -3560,
   -3560,  2966, -3560, 11107, 11107, -3560, 11107, -3560,   915,  2815,
    2839, -3560, -3560, -3560, -3560, 11107, -3560, -3560,  3313, -3560,
   11107, -3560, -3560, 11107, -3560, 11107, 11107, -3560,  1645, -3560,
    1655, -3560,  1668, -3560, -3560, -3560,  2273, -3560, -3560,   542,
   42448, -3560, -3560,  1674, -3560, -3560, 11107, -3560, 36588, -3560,
   -3560,  3022, -3560, -3560,  3229, -3560, -3560, -3560,  -127,  -127,
    -127, 14142,  1318,  3289, -3560, -3560, -3560,  3121,  3182, -3560,
      43, -3560, 42448,  2828,   912, -3560,  1707, -3560, -3560, -3560,
    1940,  2830, -3560,   788, 14142,  2633,  2956, -3560, -3560,  1530,
   24265, 28384, -3560, -3560, 33072,  2170,  2170,  2170,  2329,  3238,
    2695,  2695, -3560, 26623, -3560, -3560,  2978, -3560, -3560, 29556,
   -3560,  1189, -3560, -3560, 15356,  1509, -3560,  1318, -3560, 35416,
   -3560,  1318,   788,  2835,  2837, -3560, -3560, 41862, 11107, -3560,
   -3560, -3560, -3560,  1685,  2532, -3560,  -141, -3560,   723, -3560,
    3203,  3204,   723, -3560, -3560, -3560, 24265,  2481, 14142, -3560,
      48,  1940,  1318,  2838,   323, -3560,  -123, 11107, 24855, -3560,
   -3560, -3560,  2842, -3560, -3560,  3327,  3329, -3560, 24855,  2165,
   42448, -3560,  3290, -3560, -3560, -3560, -3560,  5462, -3560, 24265,
   -3560, -3560, -3560, -3560, -3560, 42448, -3560, 23085, -3560, 18359,
   -3560,  2847, -3560,  2688,  2688,  2688, -3560, -3560, -3560, -3560,
   -3560,  2701,  3071, -3560,  2701,  2701, -3560, -3560, -3560, -3560,
   -3560,   381,   423, -3560, -3560,   381, -3560, -3560, -3560,   116,
    1265,  2701, -3560, -3560, -3560, -3560, -3560, -3560, -3560,  2688,
   -3560, -3560, -3560, -3560,   381,  2688, -3560,  2688,  2609, -3560,
    1202,   112,  2688,  2688,  2688,  2849,  2843, -3560,  1318,  3313,
    3379, -3560, -3560,  2991,  -150,  3326, -3560,  1758, -3560,  2856,
   -3560, 40690, -3560,  1343,   783, -3560, -3560, -3560, -3560,  3003,
      57, -3560,  3027,  2865,  2870, -3560, -3560,  -150,  2873,  2875,
    5459, -3560, -3560, -3560,  3462, -3560, 42448, 42448, 42448,  2543,
   -3560, 31314, -3560,   545,  1318,  2879,  2881,  2883,  2884,  3448,
     144, -3560,  3453, 34830, -3560, -3560, -3560,  1781, -3560,  2885,
    2887,   355,  2895,  1683,   888,  1787,  3179,  3250, -3560,  3107,
   -3560,  1703,  1162,  1712,  1747,  1825,  1855, -3560, -3560, -3560,
     157,   770, -3560, -3560,  1796, -3560,  3237,  3149,   579,  2924,
    2924,  2924,  1509,  1318,  1828, -3560, -3560, -3560, -3560,  3279,
   -3560, -3560,  2905,  2908, 42448, -3560,  2971,  2273, 24265, 14142,
    2909,  2907, -3560,   758, -3560, -3560,  2912,  2170, -3560,  3469,
    3316, -3560, -3560, 36002,  2920, -3560, -3560,  3211, -3560,   140,
    3127, -3560, -3560, -3560,  1072,  3013,  3014,   788,  1318, -3560,
   -3560,  2476,  3158,  2967,   723,   723,  3566,  2972, 11107, 11107,
    2932, -3560,  2945, -3560, -3560,   769,  2273, 11107, -3560,  1089,
    2971, -3560,  1873,  2933,  2935, 42448,  2938,  2939, -3560,  3302,
     286, -3560, -3560, -3560,  2609,    69, -3560, -3560,  2779,   784,
    2942, -3560, 42448,  3247, -3560, -3560, -3560,  1003, -3560,  2946,
    1003,  1003, -3560,  2114, -3560,  2976,   381, -3560, -3560,  2979,
   -3560, -3560, -3560,  1003,  2949,   381, -3560, -3560,  1003, -3560,
   36002,  -150,  2715,  3372, -3560,  3002, -3560,  3440,  3319, -3560,
    2609, -3560,  3320,  3220, -3560,   381, -3560, -3560,  3530, -3560,
     381,  3530,  1003,  3223, -3560,  1003, 42448, -3560, -3560, -3560,
   -3560, -3560, -3560, 42448, -3560,   740, -3560, -3560, -3560,  1837,
    -150, -3560, -3560, -3560,  2963,  2968, -3560, -3560, -3560,   288,
   -3560, 42448,  5462, -3560, -3560, -3560,  2919, -3560,   901,  1839,
     323,  2965,  1850,  1860, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, 34830, -3560,  3530,  3228, -3560, -3560, -3560,
   -3560, -3560, 11107, -3560, -3560,  3262,  3407, -3560, -3560, -3560,
   -3560, -3560, -3560,   149,   149, -3560, -3560, -3560, -3560, -3560,
    3059,  3060, -3560, -3560,  3061, -3560, -3560,   133,  2201, -3560,
   -3560, -3560, -3560, 14142,  3335,  3070, -3560, -3560, 42448,  3018,
   -3560, -3560,   157, -3560, -3560, -3560, -3560, 11107, -3560,  2945,
    2143, -3560, 26623, -3560, -3560, -3560, -3560, -3560,  2981,  2982,
    8072,   542, -3560,  3020, -3560, -3560, -3560,  3025,  1318,  1318,
   42448,  3154, -3560, -3560,  1195,  1195, -3560,   769,   157,   323,
   -3560,  1876, -3560, 42448, 42448,  1883, 42448, 42448,   -51,   -51,
     -51,  1244,  1244, -3560, -3560, -3560, -3560, -3560,  3360, -3560,
   -3560,  1903, -3560,    70,  3242, -3560, -3560, -3560, -3560,  1003,
   -3560,   355, -3560, -3560, -3560, -3560, -3560,   355, -3560, -3560,
   -3560, -3560,  1455, -3560, -3560, 24855,  3253,  3032, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560,  2988, -3560, -3560,
    3105, -3560, 48308, -3560, -3560,  -146,  3019, -3560, -3560, -3560,
    1451, 42448, 23085,  3034,  3166, -3560,  3290, -3560,   758,   853,
    2956, -3560,   357, 42448, -3560,  3255,   139,   908, -3560, -3560,
    2997,  1880, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
     148,  3248,  1343,  1343,  1343,  1343,  2201, -3560, -3560,  3049,
   23085, 15356,  3109,  1924, -3560, -3560,  1210,  2774, -3560,  1440,
     323, 11107,  2329, 32486, -3560, -3560, -3560, -3560, -3560, -3560,
   11107,  3023, 11107,  3024,  1947, -3560, -3560,  3425,  3425, -3560,
   -3560, -3560, -3560,  1977,  1999,   357,  2004,  2006, -3560, -3560,
     286,  3028, -3560, 42448, -3560, -3560, -3560,   299, -3560, -3560,
    2026, -3560,  2041, -3560, -3560,  1455, -3560, 11107,  3468,  3039,
   42448,  1049, -3560, 49480, 49480, 42448, -3560, -3560, -3560, -3560,
    4459, -3560, -3560,   810, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560,  3595, -3560,  3036, -3560, -3560,
    3033,   979, -3560, -3560, -3560,  5462,  3447,  1528, -3560, -3560,
   -3560, -3560, -3560,  3053,  1985,  -150,   788, -3560,   357, -3560,
   -3560, -3560,   323,  3054,  3265, -3560,   139, -3560, -3560, -3560,
     908, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, 24265, -3560, -3560,  1089, -3560, -3560, 42448, -3560,
    3114,   788,  3514,  3515,   788,   788,   788,   788,  3056,  2774,
   -3560,  3504, -3560, -3560, 11107, -3560, -3560,  1318,  3270, -3560,
    3593,   770,  1318, 42448,  1318, 42448, -3560, 42448,  1223, -3560,
   -3560,  3257,   357, -3560,   139,   908, -3560,  2971, -3560,  1042,
    1042,   381,   355,   381, -3560,  1318, 11107, -3560, 11107,  3082,
   -3560, -3560,  3483, 42448, -3560, -3560, -3560, -3560, 11107, -3560,
   48308, 48308, -3560, -3560, -3560, -3560,  3637,   758,  3607,  3317,
    3609,  2700, -3560, -3560,  3314,  5462, -3560, -3560, -3560,  1343,
   -3560, -3560, -3560,  1561, -3560, -3560,  3068, -3560,   788,  2143,
    3075, -3560,  3109, -3560,  3077, -3560,  -150,   788,   788,  1386,
    1386,  1089, 36002,  3176, -3560, -3560,   788,   323, 42448, -3560,
     241,  3418, -3560,  2055,  2068, -3560,  3635, -3560,  3636,  3080,
    3083, -3560, -3560, -3560, -3560,  2070, -3560,  3682, -3560,  1055,
    3342,  3343, -3560, -3560, -3560,  1318,  1318, -3560,   172, -3560,
   -3560,  3464,  3546, 11107,  1318, 45378,  3089, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   48894, 11107, -3560,   810,  3595, -3560,  3341, -3560,  3347, -3560,
   -3560, -3560,  3569, 48308, -3560,  3567, -3560,   758, -3560, -3560,
   24265, 14142, -3560, -3560, -3560,  3101, -3560, -3560,   -30, -3560,
    -150,  -150, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,  2074, -3560, 36002, -3560, -3560,  3666,  3670,  3571,  3672,
     241, -3560,  -133, -3560, -3560, -3560, -3560, -3560, 40690, 40690,
   -3560, -3560, -3560, -3560,  3163,  3597,  3143, 11107, 48308, -3560,
    3575, -3560,  3510,  1808,  3454,  3118, -3560,  3116,  1763,  3611,
   49480, 49480, -3560, -3560, -3560, -3560,  3589, -3560, -3560, -3560,
   -3560, -3560,  3293, -3560,  2079, -3560, 14749, -3560, -3560, -3560,
   -3560, -3560, 36002, -3560,  3176, -3560,  3129,   355,   355,  3687,
     355, -3560,  3688,  3689,  -133, -3560,  3132,  2088,  1042,  1042,
   -3560,   281, -3560,  1318, 45964,  3685, 42448, -3560, -3560, -3560,
   -3560, 11107, -3560, 37174, 46550,  3131, -3560, -3560, -3560,  3298,
   -3560,  2700,  3531,  3593, -3560,  3101, -3560,  3139, -3560,  2772,
    2774, -3560, -3560,  3137, -3560, -3560,   355, -3560,   355,   355,
   -3560, -3560, -3560, -3560, -3560, 11107, -3560,  3596,  3224, -3560,
    3140, -3560, 48308,  2050, 48308, -3560, -3560,  3550,  3144,  1449,
   -3560,  3141, -3560, -3560, 48308,  3705,  3418, -3560, 14749,  3150,
   -3560, 11107,  3151,  3148, -3560, -3560, -3560, -3560,  1318,  3704,
   48308, 42448, 43620,  3339, 47136,  3580, 42448,  5462,  3581,  3582,
   -3560, 48308, -3560,   355,  3551, -3560, -3560,  1318, -3560, -3560,
    3245, -3560, 44206, -3560,  2430, -3560,  3190, -3560, -3560,  3652,
    2615, -3560, -3560, -3560,  3441,  3183, -3560, -3560, 48308, 48308,
   -3560, -3560, -3560, 30142, 11107, -3560, -3560, -3560, -3560, -3560,
     -91,   -12, 19539,  3333, 44792, 47722, -3560, -3560, -3560, 27212,
   -3560, -3560, -3560,  3603, -3560,  1318, -3560, -3560, -3560, -3560,
   -3560, 36002,  2090, -3560, -3560, 24265, -3560, 30142, -3560, -3560,
   -3560, -3560, 22493,  3185, -3560,   788, -3560, -3560, 24265, -3560,
   -3560, 14142, -3560, -3560
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3560, -3560, -3560, -3560, -3560,    82, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560,  1639, -3560, -3560, -3560, -3560, -3560,
    1836, -3560,   623, -1712, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,   626,  1469,  3184, -3560,   384, -3560,    68, -3560,
   -3560, -3560, -2741,   -46,  -215, -3560, -3560,   333,    20,  2866,
    -211, -2875, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,   405,   398, -3560, -3560,   223, -3560, -3560, -1311, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560,  -393,  -344,  1723,
   -3560, -3560, -3560,  3784, -3560,  3284, -3560,  1192,  2118, -3560,
   -3560, -3560,   -47,   249, -3560,   250, -3560,   252, -3560,   253,
   -3560,   255,   258,   259,   262, -3560,   263, -3560, -3560,  -328,
   -3560, -3560, -3560, -3560,   264, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,  -204, -3560, -3560,   -60, -3560, -3560,  -202,   268,
   -3560,  -160,   270, -3560,   271, -3560,   -80, -3560,   -77, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,  2891, -3560, -3560, -3560, -2107, -3560, -3560, -2224,  2468,
   -3560, -1617, -3560, -3560, -1662, -3560, -3560, -1614,   677, -3560,
   -3560,  -100,   648, -3560, -1313, -1750, -1701, -3560, -3560, -3560,
   -1872, -1857,  -720,  2216, -1119, -2117, -3560, -3560, -3560,   261,
   -3560, -3560, -2404,  1952,  2470, -3560,  2474, -3560, -3560,  1084,
   -3560, -3560,  1255,  1671, -3560,   902,  2640, -1170, -3560, -3560,
   -3560, -3560, -3560, -3560,   108,   246,    16, -3560, -3101,   625,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -2531, -3560,
   -3560, -3560,  -239, -3560, -3560,  -149, -3560, -3560,  -194, -3560,
     111, -2172, -3560, -3560, -3560, -3560,  2454, -1244, -3560,  3408,
   -3560,  -518,   711,  1993, -1936, -1308, -3560,  -868,  -840, -2352,
   -3560, -3560, -3560, -3151,  1054,  1432, -3560,   812,  1995, -1792,
   -3560,  1502, -3560, -3560,   838, -3560, -1821, -3560, -3560, -3560,
     793, -3560,   795, -3560, -3560, -3560,  -478,   763,  -442, -3560,
     361, -2306, -2336, -3560,   585, -3560,   541, -3502, -3560,  -544,
   -1958, -2257,    58, -3560, -3560,   556, -2911,   900, -3560, -3560,
   -3560, -2965, -1675, -3560,   117, -3560, -3560, -3560, -3560, -3559,
   -3560, -3560, -1379, -2118, -3560, -3560,  3920,  3921,  -979, -2508,
   -2403,   121,   122, -3560, -3560, -3560,  2469, -1058,   191,   178,
     185,  1953,  -621,   327, -2191, -3560,   376, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560,  2029, -1860, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -2260,   868, -3560, -3560,  1545, -3560, -3560, -3560,
   -1742,  -463, -2028, -2365, -3560, -3560, -3560, -3560, -3560, -3560,
    1298, -3560, -3560,  2157,  2594, -3560, -3560, -3560, -3560, -3560,
   -3560,   611,  1730, -3560, -3560, -3560, -3560, -3560, -3560,   876,
    2507, -3560, -3560, -3560,   -11, -3560, -3560, -3560, -3560,  2242,
   -3560, -3560, -3560, -3560,  2549, -3560, -3560, -3560, -3560, -3560,
   -3560,  1349, -3560,  1774, -3560, -1358, -3560, -3560,   989,  -927,
    1725,  -560,  1852,   369, -3560,  3395, -3560, -3560, -3560, -1544,
   -2308, -3560,  3108,  -763, -2209,  2234,  -620, -1717,  1011,  -640,
    3352, -3560, -1084, -1055, -3560, -3560,  -609, -3560, -3560, -3560,
    -612, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560,  1383, -3560, -3560, -3560, -3560, -1644, -3560, -3560,
   -3560, -3560, -3560,  1409, -3560,  1948, -3560,  -460, -3560,  2910,
   -3560, -3560, -3560, -2162, -1754,  1680,   928, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -2215, -3560, -3560, -3560,
   -3560, -3560,  1872, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -1493, -3560, -1798,   312, -3560,   452, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560,   -17,   813,   -16, -1977, -1034,  1606, -3560,
   -3560, -1198,  2947, -1929, -3560, -3560, -3560,  1853, -3560, -3560,
   -3560, -3560, -3560,   896, -2421, -1325, -3560, -3560, -2951,  -853,
   -2124,  -836, -3560, -2127,   466, -1710, -1677,   130,   114, -1168,
   -3560, -3560, -3560, -3560, -3560,  -170, -3560, -3560, -3560,   488,
    1743, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560,  -479,  -686, -3560,  2001,  2427, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560,  2762,  2740,  1816, -3560, -3560,
   -2075, -3560, -3560,  1776, -3560,   734, -2204, -1700,  1010, -3560,
   -3560,  1009, -2994, -3560, -3560, -3560, -3560, -3560, -3560,   950,
   -3560,    50,  3451, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
    2537,  -999,  3373, -3560, -3560, -3560, -3560, -3560, -3560,  2230,
   -3560, -3560, -3560, -3560, -3560, -3560,  2707,  3470,  -545, -1196,
   -3560,  -677,  2682,  2237,  -831, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,  2348,   932,
   -3560, -3560, -3560,  2761, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560, -3560,  1050,
     -52, -3560,    44,   -87, -3560,   -21, -3560, -3560, -3560, -3560,
   -3560,  -187, -3560, -3560,  -188,  -639,  -926, -1275,   669, -1679,
   -1908,  1043,  2753, -3126,  -636, -1105, -1108, -1828,    60, -3560,
   -3560,  3191,    88,   480,  -291,    -6, -2446,  -109,  -555, -3560,
   -2573, -3560, -3560, -3560, -3560,  2307, -3560, -3560, -3560, -3560,
    1371, -3560, -3560, -3560,  1012, -3560,   753,   540, -3560, -3560,
     150, -3560,  2356, -3560, -3560, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560,  2780,  3516,  3219,
   -3560,  2829, -3560, -3560, -3560, -3560, -3560,   434, -3560,   489,
   -3560, -1952,  2607,   572, -3560,  1467,  -248,  -527, -3560, -3560,
     433, -3560, -3560,  1007,  3526,  3222, -3560, -3560, -3560, -3560,
   -3560, -2577,  -833, -3560, -3137, -2631, -1582, -3560, -3560, -2023,
   -2780, -3560, -3560,  -990, -3560, -3560, -3560, -3560, -1890, -3560,
   -3560, -3560,    56,  3587,  3588, -3560, -3560,  -174, -3560,   432,
   -3560, -3560, -3560, -3560, -3560, -3560, -3560,  3452, -3560, -3560,
   -3560, -3560,  3457, -3560, -3560, -3560, -3560, -3560,  3459, -3560,
   -3560, -3560, -3560, -3560,  1949, -3560, -3560, -3560, -3560, -3560,
   -3560, -3560, -3560
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -2435
static const yytype_int16 yytable[] =
{
     466,   997,  1005,   983,   903,   899,  1378,  1592,  1380,   509,
    1591,   929,   592,   508,  1042,  1044,   514,  1287,   526,  2253,
    1050,  2110,  1479,  2773,   533,   528,   464,  1026,  1544,  2203,
     942,  1567,   540,  1935,   752,   543,  1469,  1470,  1769,   540,
    1315,  1697,  1068,  1309,  2236,  1343,  2442,   561,  2723,  1178,
    1813,  1081,  1932,  1613,  2638,  2670,  2674,  2676,  2608,  1657,
    1621,  2518,  1315,  1509,  3313,  3045,  2521,  3002,  1344,  2494,
    1385,  1099,  2346,  2883,  1101,  1705,  2875,  1105,  2707,  2235,
    1838,  2282,   512,  1112,  1113,  1114,  3161,   581,  2569,  2412,
    1623,  1624,   133,  1909,  1627,  1628,  1629,  1630,  1386,  1632,
    1633,  1635,  1637,  1638,  1639,  1640,  1641,  2462,  1013,   584,
    2769,   466,  2341,  3318,   466,   591,   597,  2304,  2305,  1120,
    1121,  1122,  2463,  2354,  2698,  2659,  2595,  2358,  1776,   972,
     975,  1163,  2708,  1162,  2316,  2329,  3496,   586,  2373,  1816,
     588,  1970,  2390,  2688,  2689,  3387,  1786,  1259,  2382,  3629,
    1227,  2334,  2335,   580,  1789,  1790,  3352,  3357,  2747,   473,
    3358,  2342,  1129,  1130,  3441,  1851,  1980,  2356,  2357,  3241,
    2359,  3333,  2893,  2362,  2363,  3359,  2898,  2366,   525,  3366,
    1700,  2151,  2375,   601,   532,  3386,  2378,  2379,  2380,  2381,
    2248,  3529,  1711,  2385,  2014,  2387,  1129,  1130,  1129,  1130,
    1441,  2396,   868,   869,  2400,  2897,  2402,  1129,  1130,  1222,
    3470,  2600,  3745,   610,  3504,  2565,  1181,  2733,  2734,  3531,
    1129,  1130,  2318,  1345,  1129,  1130,  1164, -1361,  1361,  2459,
    2423,  2737,  2852,  3852,  2750,  2433,  2151,  2337,  1219,  3072,
    1851,  2439,  2440,  1164,  4207,   976,  2444,  3319,  2496,   806,
    1851,  1227,   868,   869,  3684,  1851,  1340,  3191, -1833,  2741,
    1298,  3911, -1361,  2446,  2447,  2448,  2449,  1654,  4037,  1368,
     993,  2114,  1236,  1253,  1840,  3494,   688,  2391,  2460,  3411,
     602, -1401, -2318,  2291,   521,  1228,  1382,  2647,  3412,  1963,
    1129,  1130,  1129,  1130,  2814,  1382,  2476,  3248,  1129,  1130,
    1389,  2703,   570,   631, -1693,  3054,  2451,  1798,   831,  1442,
    2825,   625,  2704,  1443,  4008,  2298,  -823, -1694,  1313,  1129,
    1130,  1482,   132,  2990,  1444,  -523,  1129,  1130,  1482,   128,
    2655,  2845,  2846,  2128,  1923,  1976,  1352,  1129,  1130,  2115,
    2245,  3648,  3090,  1129,  1130,  1129,  1130,  1129,  1130,  2692,
    1233,  3043,   553,  3956,  2946,  4052,  1316,    42,  2823,   470,
     632,  1834,   471,  1382,  1129,  1130,  1462, -1671,  2471,   132,
     615,  3650,   541,  1459,  1460,  1461,  1990,  3670,  2742,  3746,
     134,   617, -1671,  2454,  3471,  4053,  1228,  3986,  2077,  2472,
     918,  3564,  1463,  -524,  1129,  1130,   469,   522,  3987,  1991,
    3568,  3209,   769,  2824,  1317,  3044,   809,  3061,   531,  1437,
     129,  1313,  2656,  1248,  3210,  1353,  1508,  2426,   554,  3413,
    3582,  1812,  3819,  4008,  1851,  3584,  4208,  1108,  3211,  1068,
    3745,  1129,  1130,  1129,  1130,  1852,  1834,  1809,  3685,   868,
     869,  1483,  1320,  3209,  1924,  1445,  1834,  3091,  1498,  2826,
    1012,  1834,  1129,  1130,  1362,  1653,  3210,   571,   832, -1693,
    2815,  1369,  1799,  2686,  1237,  3192,  1800,  2483,   712,  1325,
    3211,  3741, -1694,   591,  3038,   597,   606,  2427,  1458,  3614,
    3320,   868,  3353,  1406,   633,  1129,  1130,  1771,  3049,  3638,
    1774,  2653,   765,  1048,  2706,  1778,   597,  2705,  1348,  4103,
    4104,  2372,  1655,  1131, -1401,   804,  1132,  3058,  3082,   591,
    1852,   814,    55,  1129,  1130,  1385,  1165,  2260,   808,  3055,
    1852,  1791,  1792,  1838,   827,  1852,  2751,  1129,  1130,   977,
    2755,  1618,  2116,  1165,  1657,  3686,  1626,  1131,  1446,  1814,
    1132,  2803,  1341,  1386,  2771,  2772,  2877,  1259,  1131,  2340,
    1964,  1132,   915,  1647,  2782,  3071,  1654,   919,  3073,  3074,
    2152,  1131,  2997,  3324,  1132,  1131,  2261,  2885,  1132,  2428,
     932,  1654,  1259,  4033,  1493,  1494,  2130,  3084,  3671,   591,
    2412,   946,  2743,   807,  2462,  1385,  1299,  2133,  2341,  2716,
    2136,  2278,   581,   466,  1109,  1532,  3988,  3746,   581,  2463,
     970,  1909,   581,   581,  1546,  1129,  1130,   984,   946, -1361,
    3466,  1533,   591,  1386,  1534,  2152,  1559,  1560,  1561,   957,
    1834,  2484,  1014,  1015,  1016,  1566,  3070,  3177,  1021,  3065,
    2015,  1131, -1401,  1131,  1132,  2127,  1132,  2342,  1438,  1131,
    1220,  3470,  1132,  2216,  2429,  4169,   994,  2754,  3474,  2756,
    2412,  2968,  2969,  2970,  2392,  1970,  2767,   773,   956,  1177,
    1131,  -196,  1677,  1132,   967,  2766,  2458,  1131,  3887,  2779,
    1132,  1788,  1069,  1839,  2947,  2788,   819,  2774,  1131,  1011,
    1223,  1132,  3505,   830,  1131,  3360,  1131,  1132,  1131,  1132,
    2802,  1132,  3442,  1712,  1852,  3740,  3005,  3006,  3007,  3796,
    3189,  1981, -2249,  2731,  1660,  1131,  2459,  2660,  1132,   916,
    3945,   896,  2842,  1701, -2318,  2890,  3905,  1840,  1816,  2735,
    3754,  1129,  1130,  3008,  3009,  1725,   896,   848,  1129,  1130,
    1126,  3659,  1128,  3176,  1975,  1131,  1439,  1133,  1132,  2882,
    1654, -1401, -2318,  2024,  3085,   958,  2736,  2652,  1439,  2744,
    3917,  1598,  1599,  1958,  2850,  2460,  1171,   466,  1173,  3989,
     946,   466,   591,  1699,   466,   591,  1312,  1775,   523,  3346,
    2844,  1133,  1131,  1133,  1131,  1132,  -823,  1132,  1718,  1129,
    1130,  3267,  1133,  1172,  1752,  -523,  2025,  1176,  2847,  3269,
    1180,  1655,  2697,  1131,   995,  1133,  1132,  3344,  3345,  1133,
    2113,  3861,  1232,  3365,  2262,  2897,  1655, -2249,  2897,  2897,
    2078,  3368,   581,  1598,  2043,  3471,  1349,   618,  3392, -1401,
    4029,  2851,   591,   581,  2638,  2897,  1131,   581,  3294,  1132,
    2613,  1129,  1130,  3303, -2434,  3338,  2336,  3307,   771,  3367,
    1129,  1130,  2430,  1818,  3385,  3388,  3390,  3391,  1439,  1976,
    1129,  1130,  3316,  -524,  1131,  3820,  3912,  1132,  3914,  4060,
    2465,  2857,  3738,  2485,   828,  1133,  1321,  1133,  1131,   591,
    2958,  1132,  2217,  1133,   920,  1129,  1130,  3323,  1239,  2082,
    2083,  2099,  2100,  2687,  3278,  1841,  3302,  2577,  2578,  1256,
    3306,  3521,  3077,  1326,  1133,   896,  1990,  2120, -2250,  1129,
    1130,  1133,  2863,  1129,  1130,  2983,  3050,  3051,   581,  2005,
    1250,  1110,  1133,  2049,  3472,  2915,  2916,  2741,  1133,  1991,
    1133,  2414,  1133,  3088,  3274,  1205,  2932,  2933,  1381,  3212,
    2274,  3094,  2955,  2956,  3096,  2023,  3984,  2030,  1350,  1133,
    3195,  2146,  1129,  1130,  1986,  2272,  1131,  1315,  3522,  1132,
    2216,  1129,  1130,  3200,  2031,  2277,   581,  3226,  2280,  2281,
    2303,  1351,  2858,   935,  3075,  3545,  2236,  4031,  2397,  1133,
     823,  3212,  2748,  2748,  3169,  1655,  3950,  1315,  1812,  2462,
     518,  3745,  3042,  3523,  2041,  2726,  2341,  1842,  1129,  1130,
    1601,  3354,  3146,  2535,  2463,  1769,  1769,  1129,  1130,   114,
    3148,  2235,  -430, -2250,  1838,  2498,  1133,   581,  1133,  1129,
    1130,  1475, -2382,  2346,  2864,  1129,  1130,   835,  1608,  3728,
    3299,  2042,  3609,  2045, -2382,  2340,  1708,  1133,  1535,  2137,
    3848,  1536,  2135,  1129,  1130,  2342,  2017,  2218,  2627,  1894,
    3849,  2576,  2057,   474,  1129,  1130,  1069,   542,  1129,  1130,
    1129,  1130,  3277,   999,  1007,  1646,  2466,   517,  1798,  1069,
    1133,  2190,  1131,  1355,  2373,  1132,  3473,  3191,  1709,  1131,
    2121,   530,  1132,  1466,  3434,  2065,  2964,  1473,  3652,  3474,
    3840,  2196,  1439,  2693,  1897,  3081,  3010,  2237,  1133,  3514,
    3515,  1759,  3906,  3510,  1385,  2727,  1909,  2581,  2582,  2713,
    1458,  2459,  1133,  2069,  2150,  1129,  1130,  1462,   116,  1593,
    2093,  3262,  1129,  1130,  2110, -2382,  1839,  2070,  1592,  2270,
    1131,   591,  1386,  1132,   836,  1129,  1130, -2382,  3312,   547,
    3728,  3728, -2249,  1464,  2575,  2106,  1356,  1970,   603,  1710,
    2398,  2623,  2044,  2458,  2585,  1602,  1843,  1760,  3746,  3435,
    2460,  1129,  1130,  3263,  2930,  1844,  1129,  1130,   591,  2212,
    2213,  1845, -2249,  1650,  1129,  1130,  3475,  3857,   581,  2146,
    3892,  1798,  1131,  1642,  4002,  1132,   936,   581,  1739,  2217,
    1133,  1131,  2154,  1681,  1132,   555,  2865,  1592,  3594,  2191,
    2711,  1131,  1129,  1130,  1132,  2071,   837,  2675,  1840,  3205,
    2263,   556,   937,  2467,  2912,  2197,  3950,   688,  1129,  1130,
    1726,   591,  2554,  1799,  1129,  1130,  1131,  1800,  2197,  1132,
    1129,  1130,  3209,  1686,   824,  1689,  1166,   581,  1834,  1129,
    1130,  3841,  3831,  1167,  1652,  3210,   581,  4232,  1830,  3850,
    1131,  3227,   591,  1132,  1131,  2147,  1740,  1132,  1975,  3211,
    2412,   581,   581,  1846,  2977,  3445,  3611,  3835,  3836,  2464,
     868,   869,   986,  2817,  2122,  2198,  3334,  3728,  3728,  1129,
    1130,  2412,  3813,  2404,   591,  3192,  1592,  1729,  2198,  2786,
    2123,  1820,  2866,  1131,  3076,  1737,  1132,  2415,  1129,  1130,
    2107,  2199,  1131,   519,  2859,  1132,  1133,   466,   466,   466,
     581,   466,   581,  1133,  2199,  1129,  1130,  1770,  1285,  3011,
     558,  2072,  2728,  1772,   466,  3816,   591,  1761,  2076,   466,
     573,  1264,  1693,  1753,  1754,  1755,  1799,  1757, -2250,  1131,
    3524,  1976,  1132,  1129,  1130,  1741,   574,  2465,  1131,   581,
    1773,  1132,  1847,  3595,  2218,  1777,   587,   619,  1654,  2222,
    1131,  3206,  3728,  1132,  1133,  3205,  1131,  2200, -2250,  1132,
     661,  1129,  1130,  1129,  1130,  2748,  1756,  3728,  1758,  2095,
    2200,  1129,  1130,  1643,  1131,   582,  2192,  1132,  2271,  1831,
    3728,  3907,  3832,  1682,   591,  1131,  1749,   576,  1132,  1131,
    3842,  1131,  1132,  1405,  1132,  1644,  3799,  4003,   581,   712,
    1482,  1928,   581,   688,   978,  1787,  1133,  1129,  1130,  3902,
    1727,  1129,  1130,  1933,  1175,  1133,  1129,  1130,  3896,  3033,
     666,  2913,  1482,  2340,  1048,  1133,  3207,  2372,  1129,  1130,
    2914,   585,  2201,   581,  4035,  3728,  1934,  4039,  3743,  1742,
    2925,  3779,   598,  1465,  3034,  2201,  1131,  3728,  3728,  1132,
    1133,  2775,   591,  1131,   466,   466,  1132,  1988,   466,  2323,
    3780,  3897,  -430,  2842,  1925,  2935,  1131,  3555,  1930,  1132,
    1021,  3908,  2004,  2147,  1133,  1129,  1130,   599,  1133,   979,
    1984,  1985,  2141,  1049,  1850,  3618,  1129,  1130,   116,  2936,
    2142,  3728,  1131,  3452,   606,  1132,  2884,  1131,  3909,  2954,
    1132,  3728,  2197,   896,  3610,  1131,  1243,  3206,  1132,  1244,
    1683,  2245,   677,  1129,  1130,   994,  2580,  1133,  1482,  2324,
    1551,  2776,   868,   869,  1592,   607,  1133,  2993,  3798,  4148,
    1167,  2094,  1817,  1131,  1129,  1130,  1132,  1683,  2458,  3728,
    2006,  3728,  1555,  1069,  2050,  2325,  1129,  1130,  4149,  1131,
    1645,  3728,  1132,  2155,  4127,  1131,  2246,  3556,  1132,  1129,
    1130,  1131,  2198,  1133,  1132,   610,  2523,  3728,  2141,  3728,
    1131,  3728,  1133,  1132,  4077,  4077,  3019,  2931,  3728,  2529,
    3898,  1167,  3217,  1655,  1133,  1167,  2018,   693,  3289,  3728,
    1133,  3035,  1050,  1101,  1105,   712,  3557,  1839,  2022,  1129,
    1130,  1129,  1130,  2119,  2029,  3728,  3728,   612,  1133,  3290,
    1131,  2326,  2544,  1132,   958,  1327,  2777,   614,  2613,  1133,
    1048,  3728,  3728,  1133,  3208,  1133,  3728,  1398,  1399,  1131,
    2202,  4045,  1132,  3678,  3679,  1129,  1130,  2032,  1578,  2033,
    3291,   810,  3530,  2202,  1328,  2143,  1131,  1245,  1146,  1132,
    3544,  1129,  1130,   591,  3972,   581,   591,  2829,   551,  2110,
    1129,  1130,   552,   995,  3961,  1456,   626,   581,   688,  2160,
    1129,  1130,  2830,  3411,  1131,  2166,  2166,  1132,  2166,  1100,
    1133,  2591,  3412,  1129,  1130,  1812,  2327,  1133,   581,   981,
     982,  1329,   581,  3544,  2040,   482,  1330,  1730,  1129,  1130,
    1133,  2053,  1131, -2434,  1131,  1132,   628,  1132,   591,   591,
     581,   581,  1131,  3583,  2054,  1132,  3585,  1069,  1129,  1130,
    2166,  2166,  2166,   811,  2021,  1166,  1133,  1129,  1130,  3973,
    1975,  1133,  2465,   805,  2343,   470,  2464,  2258,   471,  1133,
    2058,  2165,  2165,   766,  2165,  2062,  2269,  3694,  1131,  2507,
    3212,  1132,  1131,  2063,  2188,  1132,   629,  1131,  1239,  2044,
    1132,   537,  1129,  1130,  1136,  1137,  3458,  1133,   537,  1131,
    3619,   246,  1132,   248,  3384,  2508,  1256,  2215,  1129,  1130,
    3208,  2064,   581,  1133,   630,   720,  2165,  2165,  2165,  1133,
    1678,   812,  2343,  1679,  2286,  1133,  1680,  2068,  1138,   816,
    2211,   581,  2222,  2073,  1133,  2890,  1129,  1130,  1139,  2081,
    2223,  1287,  2503,  3413,  1129,  1130,  1131,  1731,  2086,  1132,
    2765,   761,  2509,  1129,  1130,  2510,  3893,  1131,  3894,  2287,
    1132,  1149,  3039,  2511,  3361,  2265,  1331,  3362,  3040,  2125,
    1129,  1130,   822,  2369,  1133,  1140,  3300,   820,  2279,  1315,
     909,   910,  3203,   913,  1131,  1315,  1141,  1132,  2101,   840,
     712,   842,  3041,  1133,  2037,  1166,   911,  2297,  2452,   832,
    1129,  1130,  2468,  3219,  3220,  1131,   930,  2887,  1132,   931,
    1133,  1933,   808,  1142,  2328,  1048,   939,  1131,  1129,  1130,
    1132,   958,  1592,   948,  3232,  1129,  1130,  2399,  4072,  2323,
    1131,  2369,  2787,  1132,  1934,   968,  1332,   987,  1133,  2307,
    2519,  2413,  1419,  1420,   988,  2519,  2046,  1166,  2314,  2315,
    2224,  2225,  3767,  3768,  3769,  3770,  1769,  3974,   114,  2319,
    2320,  2321,  2322,   992,  2330,  2331,  1133,  1023,  1133,  1933,
    1131,  1143,  1131,  1132,  1104,  1132,  1133,  1024,  1592,  1169,
    2903,  2711,  2909,   562,  1025,  2288,  1146,  2226,  1027,  2324,
    2910,  2583,  1934,  1028,  2795,  1029,  2796,  1032,  1333,  2137,
    1033,   591,  2289,  1034,  2556,   591,  1131,  2469,  2222,  1132,
     466,  1592,  1133,  2290,  2786,  2325,  1133,   581,   581,   581,
    2492,  1133,  1131,  2495,  1035,  1132,  2917,  1170,   563,   920,
    2921,  1131,  1036,  1133,  1132,  2922,  2474,  2797,  2573,  2237,
    1037,  1131,   896,   591,  1132,  1129,  1130,  2923,   591,  2047,
    1549,  4229,  3792,  3793,  1131,  2059,  1166,  1132,  2798,  2424,
    2425,  1227,  2432,  1038,  2434,  2435,  2436,  2437,  2438,  1131,
    2594,  2441,  1132,  2443,  2512,  3794,  3859,  2371,  1432,  1433,
    1133,  2326,   851,  2488,  2489,  2490,  1039,  3870,  1040,  1131,
    2291,  1133,  1132,  2799,  2924,  1129,  1130,  1166,  1131,  1043,
     564,  1132,  2060,  1166,  2989,  2926,  1334,  1045,  1146,  2061,
    1166,  3876,  2066,  1166,  3879,  3880,  3881,  3882,  1133, -1591,
    1129,  1130,  2370,  1046,  3326,  3327,  2224,  2225,  3871,  2019,
    1047,  1146,  2929,  1131,  1051,  2371,  1132,  1614, -1401,  1133,
    1335,   591,  1052,  1158,  1159,  1160,  1161,   851,  2953,  1131,
    3032,  1133,  1132,  2934, -1671,  3397,  2327,  2332,  2333,  2562,
    1166,  2464, -1591,  2996,  1133,  2937,  2592,  1053,  1999,  1149,
    1174,  2020,  1166,   591,  1054,  3667,  3668,  1131,  2939,  3958,
    1132,  2519,  1185,  2678,  2683,  1131,  1055,   591,  1132,  1056,
    1592,  1057, -1401,  2993,  1131,  1058,  1228,  1132,  2292, -1591,
    1059,  2168,   852,  2169,  1133,  1060,  1133,  3970,  3971,  1851,
    2513,  1131,  1063,  2558,  1132,  1963,  3983,  1206,  2941,  2621,
    2943,  1064, -1401,  1834, -1401,  2722,  2519,  4143,  2598,  2599,
    2884,   868,   869,  2621,  3978,   114,  2927,  1166, -1401,  1208,
    1133,  1131, -1591, -1401,  1132,  2240,  2241,  2242,  2497,  2110,
    2643,  1070,  1441,  1214,  2944,  1071,  1133, -1401,  1963,  1131,
    2293,  1072,  1132,   591, -1401,  1133,  1131,   852,  1073,  1132,
    2945, -1401,  2514,   853,  1074,  1133,  2664,  1075,  2666,  3237,
    1076, -1401,  2999,  3000,   591,  1077,   591,   591,  1133,  3238,
     949,  1149, -1401, -1671,  1770,  1770,  2594, -1401,  3172,  3173,
    2515,  1216,  3239,  1133,   981,   982, -1401,   476,  3243,  1166,
    1615,  1078,  1151,  1152,  1149,  1867,  1868,  3451,  1963,  1593,
    1080,  1821,  1082,  1133,  2800,  3449,   115,  1083,   591,   591,
    1146,  1084,  1133,  1085,   565,  1822,  1217,  3457,   853,  1086,
     950,  3265,  3266,  1654,   116,  1225,  3459,  1087,  -731,  -731,
    1870,  2889,  2454,  1088,  2328,  1089,   566,  1090,  -731,  1091,
    4068,  1442,  1834,  1873,  2740,  1443,  1092,  1133,  2413, -1401,
    2663,  1874,  3047,  2413,  2752,  1093,  1444,  1094,  2413,  1095,
    2762,  3460,  2413,  1133,  2761,  1096,  1131,  1097,   567,  1132,
     477, -1401,  3402,  3403,  2761,  1876,  2413,  2413,  1098,   591,
   -1401,  1102,  2783,  1302,  1103,  1834,  2413,  2791,  1593,  1382,
     117,  1133,  1877,  2793,  2794,  3438,  3446,   581,  1106,  1133,
     951,  3453,  1166,  -779,  3631,  2761,  2684,  1107,  1133, -1401,
    3467,  1166,  2413,  2813,  1151,  1152,  1131,  1111,   118,  1132,
    1514,  1882,  1026,   568,  2839,  1133,  1115,  1154,  1155,  1156,
    1157,  1158,  1159,  1160,  1161,  1209,  1226,  1151,  1152,  3461,
    1116,  1303,  3482,  3483,  1117,  1834,  1486,  1487,  1488,   478,
    4176,  3597,  2333,  3612,  3613,  1133,  1964, -1401,  1499,  1852,
    2763,  2764,  1654,  2792,  3616,  3613,  3225,  1304,   119,  3462,
    1118,  1823,  1119,  1133,  3617,  3613,  1168,  1445,   896, -1401,
    1133,   581,  2413,   118,  1616,  2790,  1234,  3532,  1885,  1552,
    3672,  3266,  1556,  1149,  3764,  1886,  2753,  3675,  3613,  1964,
    1617,  1235,  3632,  3633,  1251,  1654,  3244,  3634,  3635,  1210,
    1887,  1262,  1574,  1575,  1211,  1518,  1579,  3682,  3683, -1401,
    2780,  2781,  1263,   924,   925,  4233,   926,  1965,   927,   854,
     855,   856,   857,   858,   859,  1594,  1595,  1280,  3777,  3778,
    3940,  1281,  1824,  1282,  2843,  1285,   860,  2868,  1288,  1154,
    1155,  1156,  1157,  1158,  1159,  1160,  1161,  1212,  1655,  1964,
    1227,  3806,  3807,  1888,   495,  1654,  1296,  1825,  3757,  3761,
    1446,  3418,  1213, -1401,  1156,  1157,  1158,  1159,  1160,  1161,
    1297,  1889,  4179,  4180, -1401, -1401,  3432,  3433,  2317,  1301,
     120,  3811,  3613,  1313,   854,   855,  2623,   857,  1322,   859,
    1133,   952, -1401,  2160, -1401,  1323,  1232,   591,   591,   591,
    1339,   860,  1519,  3812,  3613,   581,  1522,   896,  3814,  3613,
    3815,  3613,   496,  1523,  1342,  1826,  1324, -1401, -1401,  1346,
    1965, -1401, -1401,   591,  1893,  1347,  1593, -1401,  1360,   479,
    3821,  3822,  1895,  3347,  3369,  3691,  3350,  3351,   497,  1069,
    1133,  3691,   591,   591,   591,  3823,  3822,  1363,   121,   480,
     896,  1364,   953,  3363,   954,  3018,  2519,  1305,  1966,  3994,
    3807,  3020,  1366,  3022,  1592,  1371,  3443,  3868,  1376,   591,
     498,  2976,  3995,  3807,  4000,  3266,  1382,  3370,  4043,  4044,
    1388, -1401,  3371,  4084,  4085,  1228,   481,  1655,  -529,  1524,
    1390,   482,  4102,  3171,  4221,  4222,  -603,  4064,  3757,  1901,
    3624,  3625,  3761,  1827,  3535,   122,  2343,  -912,  1582,  1583,
     896,  3976,  3976, -1401,  1146,  -603,   499,  2450,  2344,  3281,
    3282,  3250,  3251,  3480,  3481,  2343,   483, -1401,  3372,  1392,
    1655,  2323, -1401,  1395,   484,  1396,  1400,  2344,  1403,  1407,
    2413,  1408,  1526,  2413,  2413,  1404,  2761,  1409,  1450,  3017,
     640,  1451,  1452, -1401,  3373,  1902,  3757,  3761,  1455,   591,
   -1401,  1966,  2413,  1156,  1157,  1158,  1159,  1160,  1161,  1457,
   -1401,  1903,  1478,  1821,  1904,  1458,  1164,  2761,  1476,  2170,
    1482, -1401,  1489,  1110,  1306,  2761, -1401,  1822,  2761,  1501,
    1655,  2324,  1503,  1538,  1548, -1401,  1549,  1550,  1609,  1590,
    2171,  4142,  1600,  4144,  1631,  1307,  1625,  1651,  3100,  1658,
    1906,   581,  2067,  2172,  1659,  -603,  3156,  2325,  1662,  1665,
     477,  1666,   466,  2173,  3538,  1667,  3166,  3949,  2761,  4162,
    1668,   661,  1146,   -63,  -603,  1669,  1670,  1671,   500,   477,
    1672,  1674,  1675,  3175,  1695,  1308,  1698,  3781,  3162,  1706,
    -748,  1714,  1592,  1933,  3083,  3868,  3186,  1715, -1401,  1723,
    1716,  1722,  3086,   581,  1717,  2876,  3641,  4194,  4195,  1747,
    2174,  2175,  1933,  1527,  1724,  3199,  1934,  3101,  1733,  3782,
   -1401,  1738,  1751,  2326,   665,  1780,  1782,  1779,  1529, -1401,
    1781,   666,  2007,  1784,  1793,  1934,  3913,  1149,  2176,  1050,
    1101,  1105,  1795,  1797,  3286,  1146,   501,  1810,  3562,  3563,
    1819,  1287,  3673,  3674,  1920,  3676,  3677,   670, -1401,  1439,
    2722,  3566,  1937,   763,   764, -1671,  3569,   767,   768,  3188,
    2918,   770,  3693,   772,  1939,  1938,  1940,  1941,  1957,  1942,
    1959,  1943,  3178,  1823,  3242,   981,   982,  1944,  1945,  1946,
    3586,  3374,  2664,  3588,  1947,  1948,  3653,  3375,  2327,  2177,
    2051,  1949,  1950,   502,  2055,  1951, -1401,  1952,   503,  1867,
    1868,  1953,  1954,  1955,  1956,  1977,  2621,  1978,  1983,  1996,
    1993,  4089,  1994,   677,  1995,  2008,   504,  2079, -1401,  2002,
    2010,  2011,  3783,  3376,  2643,  3276,  2012,  2027,   591,  2287,
    1146,  2028,  -731,  -731,  1870,  2034,  2345,   591,  2035,  2178,
    2036,   505,  -731,  2592,  1824,  1149,  2038,  1873,  2044,  -603,
    2048,  2111,  2052,   591,  2056,  1874,   506,  2074, -1401,  2075,
    2080,  2258,  1161,  2084,  2085,  3730,   981,   982,  -603,  1825,
    1151,  1152,   688,  2096,  2097,  2118,  2663,  2156,  2098,  1876,
    1593, -1116,  2124,  3572,  2134,  3824,  2163,   692,   693, -1233,
    2181,  3377,  2413,  1382,  2189,  2195,  1877,  3784,  2209,  2206,
    2238,  2239,  2413,  4089,  2761,  2254,  2266,  2268,  2273,  2295,
    2300,  2296, -1401,  1593,  1592,  3785,  2302,  4214,  1149,  2761,
    2299,   581,   536,  2413, -1401,  1882,  2308,  1826,  2309,  2306,
    2343,  2310,  3791,  2311,  2519,  2312,  2313,  1592,  3786,   480,
    4225, -1401,  2355, -1401,  1592,  2360,  2361,  4214,  2365,  2367,
    1592,  4094,  4095,  4225,  4097,  2288,  2364,  2377,   480,  2374,
    2368,  2383,  2376,  2384,  2388,  2389, -1401, -1401,  2394,  2416,
   -1401, -1401,  2289,  2420,  1864,  2422,  2453,  2395,  2401,  2493,
    2475,  1865,  1866,  2290,  2497,  2506,  2328,  2501,  1151,  1152,
    3378,  2525,  1885,  1867,  1868,  2839,  2524,  2526,  2536,  1886,
    4135,  2603,  4136,  4137,  3501,  1154,  1155,  1156,  1157,  1158,
    1159,  1160,  1161,  1149,  1887,  1827,  -603,  2142,  2570,  2537,
    3431,  3431,  3431,  2571,  1869,  1770,  2549,  2477,  1870,  1871,
    1184,  2568,  2572,  2579,  1872,  -603,  2588,   591,  2589,  2601,
    2604,  1873,  1145,  2605,  2614,  2602,  2616,  2611,  2617,  1874,
    2624,  2629,  2645,  2646,  2648,  2625,  2649,  4173,  1701,  1875,
    2291,  1151,  1152,  3954,   712,  2650,  2633,  1888,  3539,  2246,
    2245,  3540,  3952,  1876,  3791,  2668,  2690,  2694,  2667,  2701,
    2669,   718,  3399,  2287,  2699,  1889,   720,  1382,  3490,   721,
    1877,  2722,  1593,  4206,  2700,  2724,  2717,  1878,  1879,   896,
    2725,  2768,  2770,  2822,  1880,  3423,  2828,   591,  2832,  2834,
    2848,  2849,  1881,  2853,  2854,  3787,  2855,  -850,  2856,  1882,
    1894,  2890,  2881,  1154,  1155,  1156,  1157,  1158,  1159,  1160,
    1161,  2003,  1812,  2899,  2894,  2900,  2901,  2950,  1893,  2973,
    2966,  3541,  3542,  1265,  1146,  2902,  1895,  1883,  2904,  3431,
    2905,  2948,  1266,  2961,  3547,  3653,  1151,  1152,  1129,  1130,
    2952,  1267,  2957,  2960,  2519,  2978,  3552,   640,  2292,  2971,
    2982,  2981,  2985,  1268,  1269,  1270,  1243,  2988,  3016,  3001,
    1867,  1868,  2995,  2998,  1884,  3004,  1885,  3021,  3029,  1271,
    3015,  3048,  3052,  1886,   591,  3053,  1154,  1155,  1156,  1157,
    1158,  1159,  1160,  1161,  3056,  3068,  3067,  3069,  1887,  2288,
    3157,  3097,  3160,  1901,  3080,  1870,  3163,  3164,  3168,  3187,
    3589,  -440,  3181,  3286,  3089,  3098,  2289,  3593,  1873,  3182,
    2293,  3174,  3099,  3170,  2222,  3171,  1874,  2290,  3201,  3190,
    3196,  3538,  1147,  3197,  3198,  3186,  3221,  3218,   661,  3228,
    3229,  3246,  3247,  1510,  1511,  1512,  1513,  1514,  3256,  3258,
    1876,  1888,  3261,  3279,  1148,  3268,  3287,   591,  3295,  1902,
    3296,  3304,  3305,  3317,  1382,  3325,  3328,  1877,  3329,  1889,
    3342,  3348,  3393,  1890,  3396,  1903,  2414,  3398,  1904,  3571,
    3406,  3400,  1155,  1156,  1157,  1158,  1159,  1160,  1161,  3420,
    3419,   665,  3952,  4131,  3410,  3421,  1882,  3424,   666,  3425,
    3427,  3440,  3645,  3436,  2291,  3437,  3444,  3438,  3439,  3447,
    1891,  3448,  3454,  3455,  1906,  1892,   591,  1149,  3598,  3450,
    3468,  3456,  1893,  3469,   670,  3478,  3512,  3485,  3486,  1894,
    1895,  3488,  3483,  3495,  3665,  3497,  3498,   981,   982,  1515,
    1516,  1517,  1518,  3019,  3503,  3502,  3506,  3431,  3431, -1316,
    3431,  3431,  3508,  3509, -1321,  3520,  3533,  3553,  3534,  4131,
    1896,  3536,  3537,  1885,  2519,  3791,  3550,  2478,  3384,  3561,
    1886,  3565,  3567,  3575,  1897,  1898,  1899,  1900,  3576,  3577,
    3578,  3580,  3581,  3387,  1272,  1887,  3587,  3599,  3615,  2413,
     677,  3620,  3623,  3600,  4203,  3622,  3639,  1901,  3626,  3627,
    3628,  1273,  3661,  3640,  3646,  3656,  3657,  3663,  3681,  1150,
    3687,  3695,  2292,  3446,  3697,  3735,   581,  3739,  3753,  3696,
    3731,  3763,  3766,     1,     2,  3772,  3808,  3431,  4203,  4231,
    3775,  1510,  1511,  1512,  1513,  1514,  3826,  -307,  1888,  1519,
       3,  1520,  1521,  1522,     4,  3844,  3803,  3805,  3853,   688,
    1523,  3817,  3863,  1902,   581,  3875,  1889,  3847,     5,     6,
    1151,  1152,  3877,  3878,   692,   693,     7,   591,  3846,  1903,
       8,     9,  1904,  1153,  2293,  3886,  3888,  3856,  3862,  3883,
    3917,  2287,  3736,  3890,  2817,    10,  3920,  -325,  3946,  1131,
    3948,  3947,  1132,  3960,  3992,  1905,  1187,  3818,  3980,  3963,
    3965,  3996,  3997,  3998,    11,   759,  3999,  4001,  1906,  1893,
    4004,  4005,  4011,  4012,  3830,  4022,  4024,  1895,  4016,  3837,
    3773,  4023,  4027,  1274,  4033,    12,  1524,  1515,  1516,  1517,
    1518,   759,  4047,    13,    14,    15,  4048,  4049,  4050,  4058,
    4059,  4060,  4065,  4067,  4069,    16,    17,  4070, -2169,  4073,
    4079,  4082,  4093,  4096,  4098,  4099,  4101,  4109,  4123,    18,
    4122, -1474,  4125,  4139,  4128,  4141,  4140,  -850,  4145,  4146,
    4150,  4153,    19,  4159,  4156,  4158,  4161,  1275,  1525,  1526,
    4165,  4167,  4170,  4171,  1901,  4174,  1593,  4178,    20,  1188,
    4182,  4184,  3645,  3979,  1276,  1154,  1155,  1156,  1157,  1158,
    1159,  1160,  1161,    21,  4191,  4219,  4192,  2288,    22,  4215,
    4228,    23,  3839,  2445,  1189,  2596,  3408,  3665,  1190,  3665,
    3409,  3895,  2732,  3603,  2289,  3854,  1004,  1519,  3955,  1520,
    1521,  1522,  4080,  1394,    24,  2290,    25,  4081,  1523,  3605,
    1902,   712,  3601,  3734,  4226,  3539,  4186,  3921,  3540,   550,
     759,  1191,    26,  3858,   906,   759,  1903,  3003,   718,  1904,
    2230,  3708,  3709,   720,  3711,  3712,   721,  3714,  1192,    27,
    3715,  3716,  4196,    28,  3717,  3718,  3719,  4106,  4009,  4107,
    3722,  4078,  3723,  3724,  4021,   759,  4020,  1863,  2405,  2145,
    3742,  1907,   815,  3093,  2594,  1906,   591,  1454,  4015,  2984,
    2628,   759,  3985,  1931,  3260,  1704,  3873,  3774,  3964,  4155,
    1527,  3491,  2291,  4015,  1524,  4092,  4130,   627,  3541,  3542,
    3885,  3426,  2403,  1133,  1528,  1529,  4025,  1962,  1193,  3179,
    2874,  3341,  2410,  2819,  3516,  3355,  3330,  3356,  3394,  3546,
    3689,  3579,   759,   759,   759,   759,  3570,  3962,  3901,  3293,
    1194,   491,   492,  4091,   759,  3903,  1992,  3904,  3865,  3860,
    3752,  3864,    29,  3692,  2487,  2407,  1525,  1526,  3332,  2807,
    3549,  2630,  2284,  1796,  1593,  3331,  1960,  1929,  2214,  2567,
    2975,    30,  2612,  3729,  3969,   928,  3257,  2244,  2651,  3245,
    1292,    31,  2959,  2522,  3301,  1547,  2712,   591,  2566,  3669,
    3810,  4056,    32,  4057,  3407,  3336,  1500,  3666,  2586,  4177,
    3655,  2658,  2839,  2839,  3977,  1692,  1030,  2491,  1719,  2610,
    2292,  2636,  3493,  3271,    33,  3272,  3311,    34,  1022,    35,
    4030,   917,    36,  2001,  2275,    37,    38,  4015,  1763,   902,
    2157,  1785,  2276,    39,  1721,    40,  1062,  4121,  1195,  3340,
    3259,  4126,    41,  4100,  4051,  4227,   591,  1196,    42,  4154,
    4230,  3574,  1079,  3275,  1736,  2255,    43,  3507,  3037,  3297,
    3658,    44,  1197,    45,  2194,  1685,    46,   847,  4040,  4041,
    4111,  1728,  2293,  1279,  3765,  1982,  2963,  4119,   849,  3771,
    1198,  1284,   621,   622,  1008,     0,     0,  4152,  1527,  1009,
      47,  1010,     0,     0,    48,     0,  1123,     0,     0,     0,
       0,     0,  1528,  1529,     0,  4015,     0,  4015,     0,     0,
       0,     0,  4220,     0,  4172,     0,     0,     0,     0,  1199,
    1200,     0,     0,     0,     0,  4015,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    49,     0,     0,
       0,     0,     0,     0,  1201,  4163,     0,     0,     0,    50,
    4168,     0,     0,    51,     0,     0,    52,  4015,  4015,     0,
       0,    53,  4218,   470,     0,     0,   471,     0,     0,   759,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4204,    54,     0,
       0,     0,     0,     0,     0,     0,  1593,     0,     0,     0,
       0,     0,     0,    55,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   591,     0,     0,     0,  1593,
       0,  4204,     0,     0,   759,   759,  1593,     0,     0,     0,
       0,     0,  1593,   759,   759,   759,   759,   759,   759,   759,
       0,     0,     0,     0,   759,     0,     0,   759,   759,     0,
     759,     0,   759,     0,     0,     0,   759,     0,     0,   759,
     759,   759,   759,     0,   759,   759,     0,     0,     0,     0,
       0,     0,   759,   759,     0,   759,   759,   759,   759,   759,
       0,   759,     0,   759,   759,   759,   759,   759,   759,   759,
     759,   759,   759,   759,     0,     0,   759,   759,     0,   759,
       0,   759,     0,     0,     0,   759,     0,   759,   759,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
     759,  1187,     0,     0,     0,     0,     0,   759,     0,     0,
    1415,     0,     0,     0,   759,   759,   759,     0,   759,     0,
       0,     0,     0,     0,     0,   759,   759,   759,     0,   759,
     759,   759,   759,   759,     0,   759,   759,   759,   759,   759,
     759,   759,   759,     0,     0,     0,   759,   759,     0,     0,
       0,     0,     0,     0,   776,   777,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1480,  1481,     0,     0,     0,
       0,     0,     0,     0,  1491,  1492,     0,     0,  1495,  1496,
    1497,     0,     0,     0,     0,  1502,     0,     0,  1504,  1505,
       0,  1506,     0,  1507,  1188,     0,     0,     0,     0,     0,
    1540,  1541,  1542,  1543,     0,  1545,     0,     0,     0,     0,
       0,     0,     0,  1553,  1554,     0,  1557,  1558,     0,  1189,
       0,     0,  1562,  1190,  1563,  1564,  1565,     0,     0,  1568,
    1569,  1570,  1571,  1572,  1573,     0,   778,  1576,  1577,     0,
    1580,     0,  1581,     0,     0,     0,  1584,     0,  1588,  1589,
       0,     0,     0,     0,     0,     0,  1191,     0,     0,     0,
    1596,  1597,     1,     2,     0,   779,     0,     0,  1605,     0,
       0,     0,   759,  1192,     0,  1610,  1611,  1612,   780,     0,
     759,     0,     0,     4,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     5,     6,     0,
       0,     0,   781,     0,   782,     7,     0,     0,  1648,     8,
       9,     0,     0,     0,     0,   783,     0,     0,     0,     0,
       0,     0,     0,     0,    10,     0,     0,     0,     0,     0,
       0,     0,     0,  1193,     0,   784,     0,     0,     0,     0,
       0,     0,     0,    11,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1194,     0,   866,     0,     0,
     785,     0,     0,     0,    12,     0,   786,   823,   867,     0,
       0,     0,    13,    14,    15,     0,     0,   844,   777,     0,
       0,     0,     0,     0,    16,    17,     0,     0,     0,     0,
       0,     0,   868,   869,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   870,     0,   787,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   871,     0,   872,    20,   873,     0,
       0,     0,     0,  1735,     0,     0,     0,   874,   777,     0,
       0,  1750,    21,     0,     0,     0,     0,    22,     0,     0,
      23,     0,     0,  1195,     0,     0,     0,     0,     0,   778,
       0,     0,  1196,     0,     0,     0,     0,     0,     0,     0,
     759,     0,     0,    24,     0,    25,     0,  1197,     0,     0,
       0,     0,     0,     0, -1671,   875,     0,     0,   779,     0,
     876,    26,     0,   877,     0,  1198,     0,     0,     0,     0,
       0,   780,     0,     0,     0,     0,     0,     0,    27,     0,
       0,     0,    28,     0,     0,     0,     0,     0,   878,   778,
     879,     0,     0,     0,     0,   781,   880,   782,   881,   788,
       0,     0,     0,   789,  1199,  1200,     0,     0,   783,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   779,   790,
       0,   882,   883,     0,     0,     0,     0,   791,   784,  1201,
       0,   780,     0,     0,     0,   792,   759,   759,   759,     0,
       0,     0,     0,   884,     0,     0,     0,     0,     0,     0,
     759,     0,     0,   785,     0,   781,     0,   782,     0,   786,
     793,     0,     0,     0,   885,     0,     0,     0,   783,     0,
       0,    29,     0,   794,   795,     0,   759,     0,     0,     0,
       0,     0,   759,     0,     0,   759,     0,   759,   784,     0,
      30,   886,     0,   759,     0,   759,   759,     0,   787,     0,
      31,  2013,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    32,     0,   785,     0,     0,     0,   796,     0,   786,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    33,     0,     0,    34,     0,    35,     0,
       0,    36,     0,     0,    37,    38,   797,     0,     0,     0,
       0,     0,    39,     0,    40,   887,     0,     0,   787,     0,
       0,    41,   759,     0,     0,     0,     0,    42,   798,     0,
     799,     0,     0,     0,     0,    43,     0,     0,   888,     0,
      44,     0,    45,     0,     0,    46,     0,     0,     0,   889,
     890,     0,     0,   891,   892,     0,     0,  2088,  2090,  2092,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    47,
       0,     0,     0,    48,   893,     0,     0,     0,     0,     0,
       0,     0,   788,     0,     0,     0,   845,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2126,     0,     0,
       0,     0,   790,     0,     0,     0,  2131,     0,  2132,     0,
     791,     0,     0,     0,     0,     0,    49,   894,   792,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    50,     0,
     895,     0,    51,     0,     0,    52,     0,     0,     0,     0,
      53,     0,   788,   793,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -2196,   794,   795,     0,   896,
       0,     0,   790,     0,     0,     0,     0,    54,     0,     0,
     791,     0,     0,     0,     0,     0,     0,   897,   792,     0,
       0,     0,    55,  2210,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1416,     0,     0,     0,
     796,     0,     0,   793,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   794,   795,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0, -2196,     0,     0,     0,     0,     0,
     898,     0,     0,     0,     0,     0,     0,     0,     0,   759,
       0,   798,     0,   799,  1417,  1418,  1419,  1420,  1421,  1422,
     796,  1423,  1424,  1425,  1426,  1427,  1428,  1429,     0,  1430,
    1431,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   797,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   798,     0,   799,     0,     0,   759,     0,     0,     0,
     759,     0,     0,     0,     0,   759,   759,     0,     0,     0,
       0,     0,     0,     0,   759,     0,     0,   759,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   759,     0,   759,
     759,     0,   759,   759,   759,   759,   759,     0,     0,   759,
       0,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,     0,     0,   759,     0,   759,     0,
     759,   759,   759,   759,     0,     0,     0,   759,   759,   759,
       0,     0,  1432,  1433,   759,   759,   759,     0,   759,     0,
     759,     0,   759,     0,   759,     0,   759,     0,     0,     0,
    2421,   759,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
       0,     0,     0,     0,     0,     0,   759,     0,     0,   759,
       0,     0,     0,     0,     0,   759,     0,     0,   759,     0,
       0,     0,   759,     0,     0,  2805,     0,     0,     0,     0,
       0,     0,  1865,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1867,  1868,     0,  2500,     0,     0,
       0,  2502,     0,     0,     0,     0,  2504,  2505,     0,     0,
       0,     0,     0,     0,     0,  2520,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1869,     0,   759,  2527,  1870,
    2528,     0,     0,  2530,  2531,  2532,  2533,  2534,     0,     0,
       0,     0,  1873,     0,     0,     0,     0,     0,     0,  2538,
    1874,     0,     0,     0,     0,     0,     0,  2539,     0,  2540,
    1875,  2541,  2542,  2543,     0,     0,     0,     0,  2546,  2547,
    2548,     0,     0,     0,  1876,  2550,  2551,  2552,     0,  2553,
       0,  2555,     0,  2557,     0,  2559,     0,  2560,  1382,     0,
       0,  1877,  2561,     0,     0,     0,     0,     0,  1878,     0,
       0,     0,     0,     0,     0,  2806,     0,     0,     0,     0,
    2574,     0,     0,  1881,     0,     0,     0,     0,     0,     0,
    1882,     0,     0,     0,  1867,  1868,  2584,     0,     0,  2587,
       0,     0,     0,     0,  3102,  3103,     0,     0,     0,     0,
    3104,     0,  3105,     0,  3106,  3107,     0,     0,  1883,     0,
       0,     0,     0,     0,     0,     0,     0,  -731,  -731,  1870,
       0,  3108,     0,     0,     0,     0,     0,  -731,     0,     0,
       0,     0,  1873,     0,     0,     0,     0,     0,     0,     0,
    1874,     0,     0,     0,     0,     0,     0,  1885,     0,     0,
       0,     0,     0,     0,  1886,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1876,     0,     0,     0,  3109,  1887,
       0,  3110,     0,     0,     0,     0,     0,     0,  1382,  3111,
       0,  1877,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3112,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1882,     0,     0,     0,  3113,     0,     0,     0,     0,     0,
       0,     0,  1888,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3114,     0,  3115,
    1889,     0,     0,     0,  1890,     0,     0,     0,     0,     0,
       0,  3116,  3117,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1885,     0,     0,
       0,     0,     0,     0,  1886,     0,  1892,     0,     0,     0,
     759,  3118,     0,  1893,   759,     0,     0,     0,     0,  1887,
       0,  1895,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   759,   759,     0,  3119,
       0,     0,     0,     0,     0,     0,     0,     0,  3120,  3121,
       0,  3122,     0,     0,     0,     0,   759,     0,     0,     0,
       0,     0,     0,     0,     0,   759,  1898,   759,     0,   759,
       0,     0,  1888,     0,     0,     0,     0,     0,     0,     0,
       0,  3123,  3124,  3125,     0,     0,     0,     0,  1901,   759,
    1889,     0,     0,     0,   759,     0,     0,     0,     0,     0,
    3126,  3127,  3128,     0,     0,     0,     0,  3129,     0,     0,
    3130,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,     0,     0,  3131,  3132,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1893,  1902,     0,     0,     0,     0,     0,
       0,  1895,     0,     0,     0,     0,     0,     0,  3133,  3134,
    1903,     0,     0,  1904,     0,     0,     0,     0,     0,     0,
       0,  2886,     0,     0,     0,  2888,     0,     0,     0,     0,
       0,   759,     0,  3135,     0,   759,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2907,  2908,  1906,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2928,  1901,     0,
       0,     0,     0,     0,     0,     0,  2938,     0,  2940,   759,
    2942,     0,     0,     0,  3136,     0,     0,     0,  3137,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3138,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1902,     0,     0,     0,     0,  2972,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1903,     0,     0,  1904,     0,     0,     0,     0,     0,     0,
       0,     0,  3139,     0,     0,  3140,     0,     0,  3141,  3142,
    3143,  3144,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1906,
       0,     0,     0,     0,     0,     0,   759,   759,     0,     0,
       0,     0,  3027,     0,     0,     0,  3031,     0,     0,     0,
    3145,  3146,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3147,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3062,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     759,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   759,   759,     0,   759,     0,     0,
       0,     0,     0,     0,     0,     0,   759,     0,     0,     0,
       0,   759,     0,     0,   759,     0,   759,   759,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   759,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   759,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3158,  3159,     0,
       0,     0,     0,     0,     0,   759,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   759,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3204,     0,     0,     0,     0,     0,     0,     0,   759,
       0,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,     0,  3223,  3224,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3231,     0,     0,
       0,     0,  3233,     0,     0,  3234,     0,  3235,  3236,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3253,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3253,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3298,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3253,     0,     0,     0,     0,     0,     0,     0,     0,  3322,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     759,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
     759,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3253,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   759,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3518,  3519,     0,     0,     0,     0,     0,     0,     0,  3062,
       0,     0,     0,     0,   759,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   759,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3726,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3621,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   759,     0,     0,  3253,     0,     0,     0,     0,
       0,     0,   759,     0,     0,     0,     0,     0,     0,  3062,
       0,   759,     0,   759,     0,     0,     0,     0,     0,     0,
       0,     0,  3027,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   759,     0,
       0,     0,     0,     0,  3726,  3726,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   759,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3797,     0,     0,     0,     0,     0,     0,
       0,     0,  3802,     0,  3804,     0,     0,   759,     0,   759,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   759,
       0,  3726,  3726,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3825,
       0,     0,     0,     0,  3959,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   759,     0,  3726,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3726,   759,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3726,     0,  3062,     0,     0,     0,
       0,     0,   759,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3915,     0,
    3916,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3924,     0,     0,     0,     0,     0,     0,     0,   759,  3726,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3726,  3726,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   759,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3726,     0,     0,     0,     0,
       0,     0,   759,     0,     0,  3726,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4013,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4018,     0,     0,   759,     0,     0,     0,
       0,     0,     0,  3726,     0,  3726,     0,     0,     0,     0,
       0,     0,     0,  3253,     0,  3726,     0,     0,     0,   759,
       0,     0,   759,     0,     0,     0,     0,     0,     0,     0,
       0,  3726,     0,  3726,     0,  3726,     0,     0,     0,     0,
       0,     0,  3726,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3726,     0,     0,     0,     0,     0,  4063,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3726,
    3726,     0,     0,     0,     0,   759,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3726,  3726,     0,     0,     0,
    3726,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   759,  4113,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4138,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,     0,   636,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,  4157,     0,   637,     0,   143,   144,   145,
     146,   147,   638,   149,     0,   150,     0,     0,   639,   151,
     640,   641,   642,   152,   643,     0,   153,   154,   155,  1585,
     156,     0,   157,   158,     0,     0,   159,   644,   645,   160,
     161,     0,   162,   646,   647,   164,     0,   165,   166,   167,
     168,   648,   170,     0,   649,   172,  4205,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   650,   187,     0,   188,   651,   652,   189,     0,
       0,   190,   653,   654,     0,   191,   655,   656,     0,   192,
     193,   194,   657,   658,   659,     0,     0,     0,     0,   660,
     197,   661,     0,  3253,   662,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   663,     0,
     222,   223,   224,   664,   665,   225,   226,     0,   227,   228,
     229,   666,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   667,   236,   668,   238,     0,   239,
       0,   669,     0,   240,   241,     0,   242,   670,     0,   243,
     244,     0,     0,     0,   671,   246,   247,   248,   672,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,   673,
     253,   254,   674,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,  1586,   263,     0,   675,   264,   265,     0,     0,     0,
       0,     0,   676,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,   677,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,   678,   288,   289,   290,   291,
     679,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   680,   299,     0,     0,   681,   301,   682,   302,     0,
     303,   683,   684,   685,   686,   687,   308,   309,   310,   311,
     312,     0,   688,   313,   314,     0,     0,   315,   316,   317,
     318,   689,   690,   691,   319,   320,     0,   692,   693,     0,
     321,   322,   694,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,   695,   331,   332,   333,   334,   335,   696,   337,   338,
     339,   697,   698,   342,   699,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   700,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,   701,   702,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,   703,
     377,   378,   379,   380,   381,   704,   383,   384,   385,   386,
       0,   705,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,   706,   707,   411,
     412,     0,   413,   414,   708,   416,   417,   418,   709,   710,
     419,   420,   421,   422,   711,   423,   424,     0,     0,   425,
     426,   427,   428,     0,   712,   429,   430,     0,   713,   714,
     715,   716,     0,     0,     0,     0,  1587,   435,   436,     0,
     717,   718,   719,   438,   439,   440,   720,   441,   442,   721,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   722,   451,     0,     0,   723,   724,
     725,   726,   452,     0,     0,   453,   727,     0,   728,   454,
     455,   456,   729,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   730,     0,     0,
       0,   731,   732,     0,     0,     0,     0,   733,   734,     0,
       0,   735,   736,     0,     0,   737,   738,   135,     0,   636,
     137,   138,   139,   140,  3023,     0,     0,     0,     0,   141,
       0,     0,   637,     0,   143,   144,   145,   146,   147,   638,
     149,     0,   150,     0,     0,  3024,   151,   640,   641,   642,
     152,   643,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   644,   645,   160,   161,     0,   162,
     646,   647,   164,     0,   165,   166,   167,   168,   648,   170,
       0,   649,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   650,
     187,     0,   188,   651,   652,   189,     0,     0,   190,   653,
     654,     0,   191,   655,   656,     0,   192,   193,   194,   657,
     658,   659,     0,     0,     0,     0,   660,   197,   661,     0,
       0,  3025,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   663,     0,   222,   223,   224,
     664,   665,   225,   226,     0,   227,   228,   229,   666,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   667,   236,   668,   238,     0,   239,     0,   669,     0,
     240,   241,     0,   242,   670,     0,   243,   244,     0,     0,
       0,   671,   246,   247,   248,   672,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,   673,   253,   254,   674,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,   675,   264,   265,     0,     0,     0,     0,     0,   676,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
     677,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,   678,   288,   289,   290,   291,   679,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   680,   299,
       0,     0,   681,   301,   682,   302,     0,   303,   683,   684,
     685,   686,   687,   308,   309,   310,   311,   312,     0,   688,
     313,   314,     0,     0,   315,   316,   317,   318,   689,   690,
     691,   319,   320,     0,   692,   693,     0,   321,   322,   694,
    3026,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,   695,   331,
     332,   333,   334,   335,   696,   337,   338,   339,   697,   698,
     342,   699,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   700,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,   701,   702,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,   703,   377,   378,   379,
     380,   381,   704,   383,   384,   385,   386,     0,   705,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,   706,   707,   411,   412,     0,   413,
     414,   708,   416,   417,   418,   709,   710,   419,   420,   421,
     422,   711,   423,   424,     0,     0,   425,   426,   427,   428,
       0,   712,   429,   430,     0,   713,   714,   715,   716,     0,
       0,     0,     0,     0,   435,   436,     0,   717,   718,   719,
     438,   439,   440,   720,   441,   442,   721,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   722,   451,     0,     0,   723,   724,   725,   726,   452,
       0,     0,   453,   727,     0,   728,   454,   455,   456,   729,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,     0,   730,     0,     0,     0,   731,   732,
       0,     0,     0,     0,   733,   734,     0,     0,   735,   736,
       0,     0,   737,   738,   135,     0,   636,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   637,
       0,   143,   144,   145,   146,   147,   638,   149,     0,   150,
       0,     0,   639,   151,   640,   641,   642,   152,   643,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,   644,   645,   160,   161,     0,   162,   646,   647,   164,
       0,   165,   166,   167,   168,   648,   170,     0,   649,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,   185,   650,   187,     0,   188,
     651,   652,   189,     0,     0,   190,   653,   654,     0,   191,
     655,   656,     0,   192,   193,   194,   657,   658,   659,     0,
       0,     0,     0,   660,   197,   661,     0,     0,   662,   198,
       0,   199,     0,     0,     0,   200,     0,   201,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   206,   207,   208,
       0,     0,     0,   209,     0,     0,   210,   211,     0,   212,
     213,   214,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   663,     0,   222,   223,   224,   664,   665,   225,
     226,     0,   227,   228,   229,   666,     0,   230,     0,     0,
       0,   231,     0,   232,     0,   233,     0,   234,   667,   236,
     668,   238,     0,   239,     0,   669,     0,   240,   241,     0,
     242,   670,     0,   243,   244,     0,     0,     0,   671,   246,
     247,   248,   672,     0,   249,   250,   251,     0,     0,   252,
       0,     0,     0,   673,   253,   254,   674,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,   675,   264,
     265,     0,     0,     0,     0,     0,   676,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,   677,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,   286,   287,   678,
     288,   289,   290,   291,   679,   292,   293,     0,     0,     0,
       0,   294,   295,   296,   297,   680,   299,     0,     0,   681,
     301,   682,   302,     0,   303,   683,   684,   685,   686,   687,
     308,   309,   310,   311,   312,     0,   688,   313,   314,     0,
       0,   315,   316,   317,   318,   689,   690,   691,   319,   320,
       0,   692,   693,     0,   321,   322,   694,     0,   324,   325,
     326,     0,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   328,   329,   330,   695,   331,   332,   333,   334,
     335,   696,   337,   338,   339,   697,   698,   342,   699,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
     351,     0,   700,   353,   354,     0,     0,   355,     0,     0,
       0,   356,   357,   358,   359,   360,     0,     0,   361,   362,
     363,   364,   365,     0,   366,   367,     0,   368,   369,   370,
     701,   702,   371,     0,   372,     0,   373,   374,     0,   375,
     376,     0,     0,   703,   377,   378,   379,   380,   381,   704,
     383,   384,   385,   386,     0,   705,   388,     0,     0,     0,
     389,   390,   391,   392,     0,     0,     0,   393,     0,     0,
       0,   394,     0,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,     0,     0,     0,     0,     0,     0,   404,
     405,     0,   406,     0,     0,   407,     0,     0,   408,   409,
     410,   706,   707,   411,   412,     0,   413,   414,   708,   416,
     417,   418,   709,   710,   419,   420,   421,   422,   711,   423,
     424,     0,     0,   425,   426,   427,   428,     0,   712,   429,
     430,     0,   713,   714,   715,   716,     0,     0,     0,     0,
       0,   435,   436,     0,   717,   718,   719,   438,   439,   440,
     720,   441,   442,   721,   443,   444,     0,   445,   446,     0,
       0,   447,     0,     0,   448,     0,   449,     0,   722,   451,
       0,     0,   723,   724,   725,   726,   452,     0,     0,   453,
     727,     0,   728,   454,   455,   456,   729,     0,     0,     0,
       0,     0,     0,   458,   459,     0,   460,   461,   462,     0,
       0,   730,     0,     0,     0,   731,   732,     0,     0,     0,
       0,   733,   734,  1501,     0,   735,   736,     0,     0,   737,
     738,   135,     0,   636,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   637,     0,   143,   144,
     145,   146,   147,   638,   149,     0,   150,     0,     0,   639,
     151,   640,   641,   642,   152,   643,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,   644,   645,
     160,   161,     0,   162,   646,   647,   164,     0,   165,   166,
     167,   168,   648,   170,     0,   649,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   650,   187,     0,   188,   651,   652,   189,
       0,     0,   190,   653,   654,     0,   191,   655,   656,     0,
     192,   193,   194,   657,   658,   659,     0,     0,     0,     0,
     660,   197,   661,     0,     0,   662,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   663,
       0,   222,   223,   224,   664,   665,   225,   226,     0,   227,
     228,   229,   666,     0,   230,     0,     0,     0,   231,  2087,
     232,     0,   233,     0,   234,   667,   236,   668,   238,     0,
     239,     0,   669,     0,   240,   241,     0,   242,   670,     0,
     243,   244,     0,     0,     0,   671,   246,   247,   248,   672,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
     673,   253,   254,   674,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,   675,   264,   265,     0,     0,
       0,     0,     0,   676,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,   677,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,   678,   288,   289,   290,
     291,   679,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   680,   299,     0,     0,   681,   301,   682,   302,
       0,   303,   683,   684,   685,   686,   687,   308,   309,   310,
     311,   312,     0,   688,   313,   314,     0,     0,   315,   316,
     317,   318,   689,   690,   691,   319,   320,     0,   692,   693,
       0,   321,   322,   694,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,   695,   331,   332,   333,   334,   335,   696,   337,
     338,   339,   697,   698,   342,   699,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   700,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,   701,   702,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
     703,   377,   378,   379,   380,   381,   704,   383,   384,   385,
     386,     0,   705,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,   706,   707,
     411,   412,     0,   413,   414,   708,   416,   417,   418,   709,
     710,   419,   420,   421,   422,   711,   423,   424,     0,     0,
     425,   426,   427,   428,     0,   712,   429,   430,     0,   713,
     714,   715,   716,     0,     0,     0,     0,     0,   435,   436,
       0,   717,   718,   719,   438,   439,   440,   720,   441,   442,
     721,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   722,   451,     0,     0,   723,
     724,   725,   726,   452,     0,     0,   453,   727,     0,   728,
     454,   455,   456,   729,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,     0,   730,     0,
       0,     0,   731,   732,     0,     0,     0,     0,   733,   734,
       0,     0,   735,   736,     0,     0,   737,   738,   135,     0,
     636,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   637,     0,   143,   144,   145,   146,   147,
     638,   149,     0,   150,     0,     0,   639,   151,   640,   641,
     642,   152,   643,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,   644,   645,   160,   161,     0,
     162,   646,   647,   164,     0,   165,   166,   167,   168,   648,
     170,     0,   649,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,   185,
     650,   187,     0,   188,   651,   652,   189,     0,     0,   190,
     653,   654,     0,   191,   655,   656,     0,   192,   193,   194,
     657,   658,   659,     0,     0,     0,     0,   660,   197,   661,
       0,     0,   662,   198,     0,   199,     0,     0,     0,   200,
       0,   201,   202,   203,   204,     0,     0,     0,   205,     0,
       0,   206,   207,   208,     0,     0,     0,   209,     0,     0,
     210,   211,     0,   212,   213,   214,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   663,     0,   222,   223,
     224,   664,   665,   225,   226,     0,   227,   228,   229,   666,
       0,   230,     0,     0,     0,   231,  2089,   232,     0,   233,
       0,   234,   667,   236,   668,   238,     0,   239,     0,   669,
       0,   240,   241,     0,   242,   670,     0,   243,   244,     0,
       0,     0,   671,   246,   247,   248,   672,     0,   249,   250,
     251,     0,     0,   252,     0,     0,     0,   673,   253,   254,
     674,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,   675,   264,   265,     0,     0,     0,     0,     0,
     676,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,   677,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,   286,   287,   678,   288,   289,   290,   291,   679,   292,
     293,     0,     0,     0,     0,   294,   295,   296,   297,   680,
     299,     0,     0,   681,   301,   682,   302,     0,   303,   683,
     684,   685,   686,   687,   308,   309,   310,   311,   312,     0,
     688,   313,   314,     0,     0,   315,   316,   317,   318,   689,
     690,   691,   319,   320,     0,   692,   693,     0,   321,   322,
     694,     0,   324,   325,   326,     0,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   328,   329,   330,   695,
     331,   332,   333,   334,   335,   696,   337,   338,   339,   697,
     698,   342,   699,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,   351,     0,   700,   353,   354,     0,
       0,   355,     0,     0,     0,   356,   357,   358,   359,   360,
       0,     0,   361,   362,   363,   364,   365,     0,   366,   367,
       0,   368,   369,   370,   701,   702,   371,     0,   372,     0,
     373,   374,     0,   375,   376,     0,     0,   703,   377,   378,
     379,   380,   381,   704,   383,   384,   385,   386,     0,   705,
     388,     0,     0,     0,   389,   390,   391,   392,     0,     0,
       0,   393,     0,     0,     0,   394,     0,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,     0,     0,     0,
       0,     0,     0,   404,   405,     0,   406,     0,     0,   407,
       0,     0,   408,   409,   410,   706,   707,   411,   412,     0,
     413,   414,   708,   416,   417,   418,   709,   710,   419,   420,
     421,   422,   711,   423,   424,     0,     0,   425,   426,   427,
     428,     0,   712,   429,   430,     0,   713,   714,   715,   716,
       0,     0,     0,     0,     0,   435,   436,     0,   717,   718,
     719,   438,   439,   440,   720,   441,   442,   721,   443,   444,
       0,   445,   446,     0,     0,   447,     0,     0,   448,     0,
     449,     0,   722,   451,     0,     0,   723,   724,   725,   726,
     452,     0,     0,   453,   727,     0,   728,   454,   455,   456,
     729,     0,     0,     0,     0,     0,     0,   458,   459,     0,
     460,   461,   462,     0,     0,   730,     0,     0,     0,   731,
     732,     0,     0,     0,     0,   733,   734,     0,     0,   735,
     736,     0,     0,   737,   738,   135,     0,   636,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     637,     0,   143,   144,   145,   146,   147,   638,   149,     0,
     150,     0,     0,   639,   151,   640,   641,   642,   152,   643,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,   644,   645,   160,   161,     0,   162,   646,   647,
     164,     0,   165,   166,   167,   168,   648,   170,     0,   649,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   650,   187,     0,
     188,   651,   652,   189,     0,     0,   190,   653,   654,     0,
     191,   655,   656,     0,   192,   193,   194,   657,   658,   659,
       0,     0,     0,     0,   660,   197,   661,     0,     0,   662,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   663,     0,   222,   223,   224,   664,   665,
     225,   226,     0,   227,   228,   229,   666,     0,   230,     0,
       0,     0,   231,  2091,   232,     0,   233,     0,   234,   667,
     236,   668,   238,     0,   239,     0,   669,     0,   240,   241,
       0,   242,   670,     0,   243,   244,     0,     0,     0,   671,
     246,   247,   248,   672,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,   673,   253,   254,   674,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,   675,
     264,   265,     0,     0,     0,     0,     0,   676,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,   677,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
     678,   288,   289,   290,   291,   679,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   680,   299,     0,     0,
     681,   301,   682,   302,     0,   303,   683,   684,   685,   686,
     687,   308,   309,   310,   311,   312,     0,   688,   313,   314,
       0,     0,   315,   316,   317,   318,   689,   690,   691,   319,
     320,     0,   692,   693,     0,   321,   322,   694,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,   695,   331,   332,   333,
     334,   335,   696,   337,   338,   339,   697,   698,   342,   699,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   700,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,   701,   702,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,   703,   377,   378,   379,   380,   381,
     704,   383,   384,   385,   386,     0,   705,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,   706,   707,   411,   412,     0,   413,   414,   708,
     416,   417,   418,   709,   710,   419,   420,   421,   422,   711,
     423,   424,     0,     0,   425,   426,   427,   428,     0,   712,
     429,   430,     0,   713,   714,   715,   716,     0,     0,     0,
       0,     0,   435,   436,     0,   717,   718,   719,   438,   439,
     440,   720,   441,   442,   721,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   722,
     451,     0,     0,   723,   724,   725,   726,   452,     0,     0,
     453,   727,     0,   728,   454,   455,   456,   729,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,     0,   730,     0,     0,     0,   731,   732,     0,     0,
       0,     0,   733,   734,     0,     0,   735,   736,     0,     0,
     737,   738,   135,     0,   636,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   637,     0,   143,
     144,   145,   146,   147,   638,   149,     0,   150,     0,     0,
     639,   151,   640,   641,   642,   152,   643,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,   644,
     645,   160,   161,     0,   162,   646,   647,   164,     0,   165,
     166,   167,   168,   648,   170,     0,   649,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,   185,   650,   187,     0,   188,   651,   652,
     189,     0,     0,   190,   653,   654,     0,   191,   655,   656,
       0,   192,   193,   194,   657,   658,   659,     0,     0,     0,
       0,   660,   197,   661,     0,     0,   662,   198,     0,   199,
       0,     0,     0,   200,     0,   201,   202,   203,   204,     0,
       0,     0,   205,     0,     0,   206,   207,   208,     0,     0,
       0,   209,     0,     0,   210,   211,     0,   212,   213,   214,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
     663,     0,   222,   223,   224,   664,   665,   225,   226,     0,
     227,   228,   229,   666,     0,   230,     0,     0,     0,   231,
       0,   232,     0,   233,     0,   234,   667,   236,   668,   238,
       0,   239,     0,   669,     0,   240,   241,     0,   242,   670,
       0,   243,   244,     0,     0,     0,   671,   246,   247,   248,
     672,     0,   249,   250,   251,     0,     0,   252,     0,     0,
       0,   673,   253,   254,   674,     0,     0,   255,     0,   256,
     257,     0,   258,   259,     0,     0,     0,   260,     0,     0,
     261,   262,     0,     0,   263,     0,   675,   264,   265,     0,
       0,     0,     0,     0,   676,   267,     0,   268,     0,   269,
       0,   270,   271,     0,     0,   677,     0,     0,     0,     0,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,   286,   287,   678,   288,   289,
     290,   291,   679,   292,   293,     0,     0,     0,     0,   294,
     295,   296,   297,   680,   299,     0,     0,   681,   301,   682,
     302,     0,   303,   683,   684,   685,   686,   687,   308,   309,
     310,   311,   312,     0,   688,   313,   314,     0,     0,   315,
     316,   317,   318,   689,   690,   691,   319,   320,     0,   692,
     693,     0,   321,   322,   694,     0,   324,   325,   326,     0,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     328,   329,   330,   695,   331,   332,   333,   334,   335,   696,
     337,   338,   339,   697,   698,   342,   699,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,   351,     0,
     700,   353,   354,     0,     0,   355,     0,     0,     0,   356,
     357,   358,   359,   360,     0,     0,   361,   362,   363,   364,
     365,     0,   366,   367,     0,   368,   369,   370,   701,   702,
     371,     0,   372,     0,   373,   374,     0,   375,   376,     0,
       0,   703,   377,   378,   379,   380,   381,   704,   383,   384,
     385,   386,     0,   705,   388,     0,     0,     0,   389,   390,
     391,   392,     0,     0,     0,   393,     0,     0,     0,   394,
       0,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,     0,     0,     0,     0,     0,     0,   404,   405,     0,
     406,     0,     0,   407,     0,     0,   408,   409,   410,   706,
     707,   411,   412,     0,   413,   414,   708,   416,   417,   418,
     709,   710,   419,   420,   421,   422,   711,   423,   424,     0,
       0,   425,   426,   427,   428,     0,   712,   429,   430,     0,
     713,   714,   715,   716,     0,     0,     0,     0,     0,   435,
     436,     0,   717,   718,   719,   438,   439,   440,   720,   441,
     442,   721,   443,   444,     0,   445,   446,     0,     0,   447,
       0,     0,   448,     0,   449,     0,   722,   451,     0,     0,
     723,   724,   725,   726,   452,     0,     0,   453,   727,     0,
     728,   454,   455,   456,   729,     0,     0,     0,     0,     0,
       0,   458,   459,     0,   460,   461,   462,     0,     0,   730,
       0,     0,     0,   731,   732,     0,     0,     0,     0,   733,
     734,     0,     0,   735,   736,     0,     0,   737,   738,   135,
       0,   636,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   637,     0,   143,   144,   145,   146,
     147,   638,   149,     0,   150,     0,     0,   639,   151,   640,
     641,   642,   152,   643,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,   644,   645,   160,   161,
       0,   162,   646,   647,   164,     0,   165,   166,   167,   168,
     648,   170,     0,   649,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   650,   187,     0,   188,   651,   652,   189,     0,     0,
     190,   653,   654,     0,   191,   655,   656,     0,   192,   193,
     194,   657,   658,   659,     0,     0,     0,     0,   660,   197,
     661,     0,     0,   662,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,   663,     0,   222,
     223,   224,   664,   665,   225,   226,     0,   227,   228,   229,
     666,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   667,   236,   668,   238,     0,   239,     0,
     669,     0,   240,   241,     0,   242,   670,     0,   243,   244,
       0,     0,     0,   671,   246,   247,   248,   672,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,   673,   253,
     254,   674,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,   675,   264,   265,     0,     0,     0,     0,
       0,   676,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,   677,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,   678,   288,   289,   290,   291,   679,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     680,   299,     0,     0,   681,   301,   682,   302,     0,   303,
     683,   684,   685,   686,   687,   308,   309,   310,   311,   312,
       0,   688,   313,   314,     0,     0,   315,   316,   317,   318,
     689,   690,   691,   319,   320,     0,   692,   693,     0,   321,
     322,   694,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
     695,   331,   332,   333,   334,   335,   696,   337,   338,   339,
     697,   698,   342,   699,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   700,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,   701,   702,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,   703,   377,
     378,   379,   380,   381,   704,   383,   384,   385,   386,     0,
     705,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,   706,   707,   411,   412,
       0,   413,   414,   708,   416,   417,   418,   709,   710,   419,
     420,   421,   422,   711,   423,   424,     0,     0,   425,   426,
     427,   428,     0,   712,   429,   430,     0,   713,   714,   715,
     716,     0,     0,     0,     0,     0,   435,   436,     0,   717,
     718,   719,   438,   439,   440,   720,   441,   442,   721,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   722,   451,     0,     0,   723,   724,   725,
     726,   452,     0,     0,   453,   727,     0,   728,   454,   455,
     456,   729,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,     0,   730,     0,     0,     0,
     731,   732,     0,     0,     0,     0,   733,  1061,     0,     0,
     735,   736,     0,     0,   737,   738,   135,     0,   636,   137,
     138,   139,   140,  1619,     0,     0,     0,     0,  1620,     0,
       0,   637,     0,   143,   144,   145,   146,   147,   638,   149,
       0,   150,     0,     0,   639,   151,   640,   641,   642,   152,
     643,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,   644,   645,   160,   161,     0,   162,   646,
     647,   164,     0,   165,   166,   167,   168,   648,   170,     0,
     649,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,   185,   650,   187,
       0,   188,   651,   652,   189,     0,     0,   190,   653,   654,
       0,   191,   655,   656,     0,   192,   193,   194,   657,   658,
     659,     0,     0,     0,     0,   660,   197,   661,     0,     0,
     662,   198,     0,   199,     0,     0,     0,   200,     0,   201,
     202,   203,   204,     0,     0,     0,   205,     0,     0,   206,
     207,   208,     0,     0,     0,   209,     0,     0,   210,   211,
       0,   212,   213,   214,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,   663,     0,   222,   223,   224,   664,
     665,   225,   226,     0,   227,   228,   229,   666,     0,   230,
       0,     0,     0,   231,     0,   232,     0,   233,     0,   234,
     667,   236,   668,   238,     0,   239,     0,   669,     0,   240,
     241,     0,   242,   670,     0,   243,   244,     0,     0,     0,
     671,   246,   247,   248,   672,     0,   249,   250,   251,     0,
       0,   252,     0,     0,     0,   673,   253,   254,   674,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
     675,   264,   265,     0,     0,     0,     0,     0,   676,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,   677,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,   286,
     287,   678,   288,   289,   290,   291,   679,   292,   293,     0,
       0,     0,     0,   294,   295,   296,   297,   680,   299,     0,
       0,   681,   301,   682,   302,     0,   303,   683,   684,   685,
     686,   687,   308,   309,   310,   311,   312,     0,   688,   313,
     314,     0,     0,   315,   316,   317,   318,   689,     0,   691,
     319,   320,     0,   692,   693,     0,   321,   322,   694,     0,
     324,   325,   326,     0,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   328,   329,   330,   695,   331,   332,
     333,   334,   335,   696,   337,   338,   339,   697,   698,   342,
     699,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,   351,     0,   700,   353,   354,     0,     0,   355,
       0,     0,     0,   356,   357,   358,   359,   360,     0,     0,
     361,   362,   363,   364,   365,     0,   366,   367,     0,   368,
     369,   370,   701,   702,   371,     0,   372,     0,   373,   374,
       0,   375,   376,     0,     0,   703,   377,   378,   379,   380,
     381,   704,   383,   384,   385,   386,     0,   705,   388,     0,
       0,     0,   389,   390,   391,   392,     0,     0,     0,   393,
       0,     0,     0,   394,     0,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,     0,     0,     0,     0,     0,
       0,   404,   405,     0,   406,     0,     0,   407,     0,     0,
     408,   409,   410,   706,   707,   411,   412,     0,   413,   414,
     708,   416,   417,   418,   709,   710,   419,   420,   421,   422,
     711,   423,   424,     0,     0,   425,   426,   427,   428,     0,
     712,   429,   430,     0,   713,   714,   715,   716,     0,     0,
       0,     0,     0,   435,   436,     0,   717,   718,   719,   438,
     439,   440,   720,   441,   442,   721,   443,   444,     0,   445,
     446,     0,     0,   447,     0,     0,   448,     0,   449,     0,
     722,   451,     0,     0,   723,   724,   725,   726,   452,     0,
       0,   453,   727,     0,   728,   454,   455,   456,   729,     0,
       0,     0,     0,     0,     0,   458,   459,     0,   460,   461,
     462,     0,     0,   730,     0,     0,     0,   731,   732,     0,
       0,     0,     0,   733,   734,     0,     0,   735,   736,     0,
       0,   737,   738,   135,     0,   636,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   637,     0,
     143,   144,   145,   146,   147,   638,   149,     0,   150,     0,
       0,   639,   151,   640,   641,   642,   152,   643,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
     644,   645,   160,   161,     0,   162,   646,   647,   164,     0,
     165,   166,   167,   168,   648,   170,     0,   649,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   650,   187,     0,   188,   651,
     652,   189,     0,     0,   190,   653,   654,     0,   191,   655,
     656,     0,   192,   193,   194,   657,   658,   659,     0,     0,
       0,     0,   660,   197,   661,     0,     0,   662,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,   663,     0,   222,   223,   224,   664,   665,   225,   226,
       0,   227,   228,   229,   666,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   667,   236,   668,
     238,     0,   239,     0,   669,     0,   240,   241,     0,   242,
     670,     0,   243,   244,     0,     0,     0,   671,   246,   247,
     248,   672,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,   673,   253,   254,  2499,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,   675,   264,   265,
       0,     0,     0,     0,     0,   676,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,   677,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,   678,   288,
     289,   290,   291,   679,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   680,   299,     0,     0,   681,   301,
     682,   302,     0,   303,   683,   684,   685,   686,   687,   308,
     309,   310,   311,   312,     0,   688,   313,   314,     0,     0,
     315,   316,   317,   318,   689,   690,   691,   319,   320,     0,
     692,   693,     0,   321,   322,   694,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,   695,   331,   332,   333,   334,   335,
     696,   337,   338,   339,   697,   698,   342,   699,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   700,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,   701,
     702,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,   703,   377,   378,   379,   380,   381,   704,   383,
     384,   385,   386,     0,   705,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,     0,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
     706,   707,   411,   412,     0,   413,   414,   708,   416,   417,
     418,   709,   710,   419,   420,   421,   422,   711,   423,   424,
       0,     0,   425,   426,   427,   428,     0,   712,   429,   430,
       0,   713,   714,   715,   716,     0,     0,     0,     0,     0,
     435,   436,     0,   717,   718,   719,   438,   439,   440,   720,
     441,   442,   721,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   722,   451,     0,
       0,   723,   724,   725,   726,   452,     0,     0,   453,   727,
       0,   728,   454,   455,   456,   729,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,     0,
     730,     0,     0,     0,   731,   732,     0,     0,     0,     0,
     733,   734,     0,     0,   735,   736,     0,     0,   737,   738,
     135,     0,   636,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   637,     0,   143,   144,   145,
     146,   147,   638,   149,     0,   150,     0,     0,   639,   151,
     640,   641,   642,   152,   643,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,   644,   645,   160,
     161,     0,   162,   646,   647,   164,     0,   165,   166,   167,
     168,   648,   170,     0,   649,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   650,   187,     0,   188,   651,   652,   189,     0,
       0,   190,   653,   654,     0,   191,   655,   656,     0,   192,
     193,   194,   657,   658,   659,     0,     0,     0,     0,   660,
     197,   661,     0,     0,   662,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,   663,     0,
     222,   223,   224,   664,   665,   225,   226,     0,   227,   228,
     229,   666,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   667,   236,   668,   238,     0,   239,
       0,   669,     0,   240,   241,     0,   242,   670,     0,   243,
     244,     0,     0,     0,   671,   246,   247,   248,   672,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,   673,
     253,   254,  2545,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,   675,   264,   265,     0,     0,     0,
       0,     0,   676,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,   677,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,   678,   288,   289,   290,   291,
     679,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   680,   299,     0,     0,   681,   301,   682,   302,     0,
     303,   683,   684,   685,   686,   687,   308,   309,   310,   311,
     312,     0,   688,   313,   314,     0,     0,   315,   316,   317,
     318,   689,   690,   691,   319,   320,     0,   692,   693,     0,
     321,   322,   694,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,   695,   331,   332,   333,   334,   335,   696,   337,   338,
     339,   697,   698,   342,   699,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   700,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,   701,   702,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,   703,
     377,   378,   379,   380,   381,   704,   383,   384,   385,   386,
       0,   705,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,   706,   707,   411,
     412,     0,   413,   414,   708,   416,   417,   418,   709,   710,
     419,   420,   421,   422,   711,   423,   424,     0,     0,   425,
     426,   427,   428,     0,   712,   429,   430,     0,   713,   714,
     715,   716,     0,     0,     0,     0,     0,   435,   436,     0,
     717,   718,   719,   438,   439,   440,   720,   441,   442,   721,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   722,   451,     0,     0,   723,   724,
     725,   726,   452,     0,     0,   453,   727,     0,   728,   454,
     455,   456,   729,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   730,     0,     0,
       0,   731,   732,     0,     0,     0,     0,   733,   734,     0,
       0,   735,   736,     0,     0,   737,   738,   135,     0,   636,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   637,     0,   143,   144,   145,   146,   147,   638,
     149,     0,   150,     0,     0,   639,   151,   640,   641,   642,
     152,   643,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,   644,   645,   160,   161,     0,   162,
     646,   647,   164,     0,   165,   166,   167,   168,   648,   170,
       0,   649,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   650,
     187,     0,   188,   651,   652,   189,     0,     0,   190,   653,
     654,     0,   191,   655,   656,     0,   192,   193,   194,   657,
     658,   659,     0,     0,     0,     0,   660,   197,   661,     0,
       0,  3252,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,   663,     0,   222,   223,   224,
     664,   665,   225,   226,     0,   227,   228,   229,   666,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   667,   236,   668,   238,     0,   239,     0,   669,     0,
     240,   241,     0,   242,   670,     0,   243,   244,     0,     0,
       0,   671,   246,   247,   248,   672,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,   673,   253,   254,   674,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,   675,   264,   265,     0,     0,     0,     0,     0,   676,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
     677,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,   678,   288,   289,   290,   291,   679,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   680,   299,
       0,     0,   681,   301,   682,   302,     0,   303,   683,   684,
     685,   686,   687,   308,   309,   310,   311,   312,     0,   688,
     313,   314,     0,     0,   315,   316,   317,   318,   689,   690,
     691,   319,   320,     0,   692,   693,     0,   321,   322,   694,
       0,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,   695,   331,
     332,   333,   334,   335,   696,   337,   338,   339,   697,   698,
     342,   699,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   700,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,   701,   702,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,   703,   377,   378,   379,
     380,   381,   704,   383,   384,   385,   386,     0,   705,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,   706,   707,   411,   412,     0,   413,
     414,   708,   416,   417,   418,   709,   710,   419,   420,   421,
     422,   711,   423,   424,     0,     0,   425,   426,   427,   428,
       0,   712,   429,   430,     0,   713,   714,   715,   716,     0,
       0,     0,     0,     0,   435,   436,     0,   717,   718,   719,
     438,   439,   440,   720,   441,   442,   721,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   722,   451,     0,     0,   723,   724,   725,   726,   452,
       0,     0,   453,   727,     0,   728,   454,   455,   456,   729,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,     0,   730,     0,     0,     0,   731,   732,
       0,     0,     0,     0,   733,   734,     0,     0,   735,   736,
       0,     0,   737,   738,   135,     0,   636,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   637,
       0,   143,   144,   145,   146,   147,   638,   149,     0,   150,
       0,     0,   639,   151,   640,   641,   642,   152,   643,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,   644,   645,   160,   161,     0,   162,   646,   647,   164,
       0,   165,   166,   167,   168,   648,   170,     0,   649,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,   185,   650,   187,     0,   188,
     651,   652,   189,     0,     0,   190,   653,   654,     0,   191,
     655,   656,     0,   192,   193,   194,   657,   658,   659,     0,
       0,     0,     0,   660,   197,   661,     0,     0,   662,   198,
       0,   199,     0,     0,     0,   200,     0,   201,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   206,   207,   208,
       0,     0,     0,   209,     0,     0,   210,   211,     0,   212,
     213,   214,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,   663,     0,   222,   223,   224,   664,   665,   225,
     226,     0,   227,   228,   229,   666,     0,   230,     0,     0,
       0,   231,     0,   232,     0,   233,     0,   234,   667,   236,
     668,   238,     0,   239,     0,   669,     0,   240,   241,     0,
     242,   670,     0,   243,   244,     0,     0,     0,   671,   246,
     247,   248,   672,     0,   249,   250,   251,     0,     0,   252,
       0,     0,     0,   673,   253,   254,   674,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,   675,   264,
     265,     0,     0,     0,     0,     0,   676,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,   677,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,   286,   287,   678,
     288,   289,   290,   291,   679,   292,   293,  4086,     0,     0,
       0,   294,   295,   296,   297,   680,   299,     0,     0,   681,
     301,   682,   302,     0,   303,   683,   684,   685,   686,   687,
     308,   309,   310,   311,   312,     0,   688,   313,   314,     0,
       0,   315,   316,   317,   318,   689,     0,   691,   319,   320,
       0,   692,   693,     0,   321,   322,   694,     0,   324,   325,
     326,     0,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   328,   329,   330,   695,   331,   332,   333,   334,
     335,   696,   337,   338,   339,   697,   698,   342,   699,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
     351,     0,   700,   353,   354,     0,     0,   355,     0,     0,
       0,   356,   357,   358,   359,   360,     0,     0,   361,   362,
     363,   364,   365,     0,   366,   367,     0,   368,   369,   370,
     701,   702,   371,     0,   372,     0,   373,   374,     0,   375,
     376,     0,     0,   703,   377,   378,   379,   380,   381,   704,
     383,   384,   385,   386,     0,   705,   388,     0,     0,     0,
     389,   390,   391,   392,     0,     0,     0,   393,     0,     0,
       0,   394,     0,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,     0,     0,     0,     0,     0,     0,   404,
     405,     0,   406,     0,     0,   407,     0,     0,   408,   409,
     410,   706,   707,   411,   412,     0,   413,   414,   708,   416,
     417,   418,   709,   710,   419,   420,   421,   422,   711,   423,
     424,     0,     0,   425,   426,   427,   428,     0,   712,   429,
     430,     0,   713,   714,   715,   716,     0,     0,     0,     0,
       0,   435,   436,     0,   717,   718,   719,   438,   439,   440,
     720,   441,   442,   721,   443,   444,     0,   445,   446,     0,
       0,   447,     0,     0,   448,     0,   449,     0,   722,   451,
       0,     0,   723,   724,   725,   726,   452,     0,     0,   453,
     727,     0,   728,   454,   455,   456,   729,     0,     0,     0,
       0,     0,     0,   458,   459,     0,   460,   461,   462,     0,
       0,   730,     0,     0,     0,   731,   732,     0,     0,     0,
       0,   733,   734,     0,     0,   735,   736,     0,     0,   737,
     738,   135,     0,   636,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   637,     0,   143,   144,
     145,   146,   147,   638,   149,     0,   150,     0,     0,   639,
     151,   640,   641,   642,   152,   643,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,   644,   645,
     160,   161,     0,   162,   646,   647,   164,     0,   165,   166,
     167,   168,   648,   170,     0,   649,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   650,   187,     0,   188,   651,   652,   189,
       0,     0,   190,   653,   654,     0,   191,   655,   656,     0,
     192,   193,   194,   657,   658,   659,     0,     0,     0,     0,
     660,   197,   661,     0,     0,   662,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,   663,
       0,   222,   223,   224,   664,   665,   225,   226,     0,   227,
     228,   229,   666,     0,   230,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   667,   236,   668,   238,     0,
     239,     0,   669,     0,   240,   241,     0,   242,   670,     0,
     243,   244,     0,     0,     0,   671,   246,   247,   248,   672,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
     673,   253,   254,   674,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,   675,   264,   265,     0,     0,
       0,     0,     0,   676,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,   677,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,   678,   288,   289,   290,
     291,   679,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   680,   299,     0,     0,   681,   301,   682,   302,
       0,   303,   683,   684,   685,   686,   687,   308,   309,   310,
     311,   312,     0,   688,   313,   314,     0,     0,   315,   316,
     317,   318,   689,     0,   691,   319,   320,     0,   692,   693,
       0,   321,   322,   694,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,   695,   331,   332,   333,   334,   335,   696,   337,
     338,   339,   697,   698,   342,   699,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   700,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,   701,   702,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
     703,   377,   378,   379,   380,   381,   704,   383,   384,   385,
     386,     0,   705,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,   706,   707,
     411,   412,     0,   413,   414,   708,   416,   417,   418,   709,
     710,   419,   420,   421,   422,   711,   423,   424,     0,     0,
     425,   426,   427,   428,     0,   712,   429,   430,     0,   713,
     714,   715,   716,     0,     0,     0,     0,     0,   435,   436,
       0,   717,   718,   719,   438,   439,   440,   720,   441,   442,
     721,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   722,   451,     0,     0,   723,
     724,   725,   726,   452,     0,     0,   453,   727,     0,   728,
     454,   455,   456,   729,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,     0,   730,     0,
       0,     0,   731,   732,     0,     0,     0,     0,   733,   734,
       0,     0,   735,   736,     0,     0,   737,   738,   135,     0,
     636,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   637,     0,   143,   144,   145,   146,   147,
     638,   149,     0,   150,     0,     0,   639,   151,   640,   641,
     642,   152,   643,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,   644,   645,   160,   161,     0,
     162,   646,   647,   164,     0,   165,   166,   167,   168,   648,
     170,     0,   649,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,   185,
     650,   187,     0,   188,   651,   652,   189,     0,     0,   190,
     653,   654,     0,   191,   655,   656,     0,   192,   193,   194,
     657,   658,   659,     0,     0,     0,     0,   660,   197,   661,
       0,     0,   662,   198,     0,   199,     0,     0,     0,   200,
       0,   201,   202,   203,   204,     0,     0,     0,   205,     0,
       0,   206,   207,   208,     0,     0,     0,   209,     0,     0,
     210,   211,     0,   212,   213,   214,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,   663,     0,   222,   223,
     224,   664,   665,   225,   226,     0,   227,   228,   229,   666,
       0,   230,     0,     0,     0,   231,     0,   232,     0,   233,
       0,   234,   667,   236,   668,   238,     0,   239,     0,   669,
       0,   240,   241,     0,   242,   670,     0,   243,   244,     0,
       0,     0,   671,   246,   247,   248,   672,     0,   249,   250,
     251,     0,     0,   252,     0,     0,     0,   673,   253,   254,
    1634,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,   675,   264,   265,     0,     0,     0,     0,     0,
     676,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,   677,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,   286,   287,   678,   288,   289,   290,   291,   679,   292,
     293,     0,     0,     0,     0,   294,   295,   296,   297,   680,
     299,     0,     0,   681,   301,   682,   302,     0,   303,   683,
     684,   685,   686,   687,   308,   309,   310,   311,   312,     0,
     688,   313,   314,     0,     0,   315,   316,   317,   318,   689,
       0,   691,   319,   320,     0,   692,   693,     0,   321,   322,
     694,     0,   324,   325,   326,     0,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   328,   329,   330,   695,
     331,   332,   333,   334,   335,   696,   337,   338,   339,   697,
     698,   342,   699,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,   351,     0,   700,   353,   354,     0,
       0,   355,     0,     0,     0,   356,   357,   358,   359,   360,
       0,     0,   361,   362,   363,   364,   365,     0,   366,   367,
       0,   368,   369,   370,   701,   702,   371,     0,   372,     0,
     373,   374,     0,   375,   376,     0,     0,   703,   377,   378,
     379,   380,   381,   704,   383,   384,   385,   386,     0,   705,
     388,     0,     0,     0,   389,   390,   391,   392,     0,     0,
       0,   393,     0,     0,     0,   394,     0,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,     0,     0,     0,
       0,     0,     0,   404,   405,     0,   406,     0,     0,   407,
       0,     0,   408,   409,   410,   706,   707,   411,   412,     0,
     413,   414,   708,   416,   417,   418,   709,   710,   419,   420,
     421,   422,   711,   423,   424,     0,     0,   425,   426,   427,
     428,     0,   712,   429,   430,     0,   713,   714,   715,   716,
       0,     0,     0,     0,     0,   435,   436,     0,   717,   718,
     719,   438,   439,   440,   720,   441,   442,   721,   443,   444,
       0,   445,   446,     0,     0,   447,     0,     0,   448,     0,
     449,     0,   722,   451,     0,     0,   723,   724,   725,   726,
     452,     0,     0,   453,   727,     0,   728,   454,   455,   456,
     729,     0,     0,     0,     0,     0,     0,   458,   459,     0,
     460,   461,   462,     0,     0,   730,     0,     0,     0,   731,
     732,     0,     0,     0,     0,   733,   734,     0,     0,   735,
     736,     0,     0,   737,   738,   135,     0,   636,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     637,     0,   143,   144,   145,   146,   147,   638,   149,     0,
     150,     0,     0,   639,   151,   640,   641,   642,   152,   643,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,   644,   645,   160,   161,     0,   162,   646,   647,
     164,     0,   165,   166,   167,   168,   648,   170,     0,   649,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   650,   187,     0,
     188,   651,   652,   189,     0,     0,   190,   653,   654,     0,
     191,   655,   656,     0,   192,   193,   194,   657,   658,   659,
       0,     0,     0,     0,   660,   197,   661,     0,     0,   662,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,   663,     0,   222,   223,   224,   664,   665,
     225,   226,     0,   227,   228,   229,   666,     0,   230,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   667,
     236,   668,   238,     0,   239,     0,   669,     0,   240,   241,
       0,   242,   670,     0,   243,   244,     0,     0,     0,   671,
     246,   247,   248,   672,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,   673,   253,   254,  1636,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,   675,
     264,   265,     0,     0,     0,     0,     0,   676,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,   677,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
     678,   288,   289,   290,   291,   679,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   680,   299,     0,     0,
     681,   301,   682,   302,     0,   303,   683,   684,   685,   686,
     687,   308,   309,   310,   311,   312,     0,   688,   313,   314,
       0,     0,   315,   316,   317,   318,   689,     0,   691,   319,
     320,     0,   692,   693,     0,   321,   322,   694,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,   695,   331,   332,   333,
     334,   335,   696,   337,   338,   339,   697,   698,   342,   699,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   700,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,   701,   702,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,   703,   377,   378,   379,   380,   381,
     704,   383,   384,   385,   386,     0,   705,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,   706,   707,   411,   412,     0,   413,   414,   708,
     416,   417,   418,   709,   710,   419,   420,   421,   422,   711,
     423,   424,     0,     0,   425,   426,   427,   428,     0,   712,
     429,   430,     0,   713,   714,   715,   716,     0,     0,     0,
       0,     0,   435,   436,     0,   717,   718,   719,   438,   439,
     440,   720,   441,   442,   721,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   722,
     451,     0,     0,   723,   724,   725,   726,   452,     0,     0,
     453,   727,     0,   728,   454,   455,   456,   729,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,     0,   730,     0,     0,     0,   731,   732,     0,     0,
       0,     0,   733,   734,     0,     0,   735,   736,     0,     0,
     737,   738,   135,     0,   136,   137,   138,   139,   140,     0,
       0,     0,     0,     0,   141,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,   149,     0,   150,     0,     0,
       0,   151,   640,     0,     0,   152,     0,     0,   153,   154,
     155,     0,   156,     0,   157,   158,     0,     0,   159,     0,
       0,   160,   161,     0,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,     0,   173,
     174,   175,   176,   177,   178,   179,   180,     0,   181,   182,
       0,   183,   184,   185,   186,   187,     0,   188,     0,     0,
     189,     0,     0,   190,     0,     0,     0,   191,     0,     0,
       0,   192,   193,   194,     0,     0,  2231,     0,     0,     0,
       0,   196,   197,   661,     0,     0,     0,   198,     0,   199,
       0,     0,     0,   200,     0,   201,   202,   203,   204,     0,
       0,     0,   205,     0,     0,   206,   207,   208,     0,     0,
       0,   209,     0,     0,   210,   211,     0,   212,   213,   214,
       0,     0,   215,   216,     0,   217,   218,   219,   220,   221,
       0,     0,   222,   223,   224,     0,   665,   225,   226,     0,
     227,   228,   229,   666,     0,   230,     0,     0,     0,   231,
       0,   232,     0,   233,     0,   234,   235,   236,   237,   238,
       0,   239,     0,     0,     0,   240,   241,     0,   242,   670,
       0,   243,   244,     0,     0,     0,   245,   246,   247,   248,
       0,     0,   249,   250,   251,     0,     0,   252,     0,     0,
       0,     0,   253,   254,     0,     0,     0,   255,     0,   256,
     257,     0,   258,   259,     0,     0,     0,   260,     0,     0,
     261,   262,     0,     0,   263,     0,     0,   264,   265,     0,
       0,     0,     0,     0,   266,   267,     0,   268,     0,   269,
       0,   270,   271,     0,     0,   677,     0,     0,     0,     0,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,     0,   285,   286,   287,     0,   288,   289,
     290,   291,     0,   292,   293,     0,     0,     0,     0,   294,
     295,   296,   297,   298,   299,     0,     0,   300,   301,     0,
     302,     0,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,   688,   313,   314,     0,     0,   315,
     316,   317,   318,     0,     0,     0,   319,   320,     0,   692,
     693,     0,   321,   322,   323,     0,   324,   325,   326,     0,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     328,   329,   330,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,     0,   343,   344,
     345,     0,   346,     0,   347,   348,   349,   350,   351,     0,
     352,   353,   354,     0,     0,   355,     0,     0,     0,   356,
     357,   358,   359,   360,     0,     0,   361,   362,   363,   364,
     365,     0,   366,   367,     0,   368,   369,   370,     0,     0,
     371,     0,   372,     0,   373,   374,     0,   375,   376,     0,
       0,     0,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,     0,   387,   388,     0,     0,     0,   389,   390,
     391,   392,     0,     0,     0,   393,     0,     0,     0,   394,
       0,   395,   396,   397,   398,     0,   399,   400,   401,   402,
     403,     0,     0,     0,     0,     0,     0,   404,   405,     0,
     406,     0,     0,   407,     0,     0,   408,   409,   410,     0,
       0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
       0,     0,   419,   420,   421,   422,     0,   423,   424,     0,
       0,   425,   426,   427,   428,     0,   712,   429,   430,     0,
    2232,   432,   433,  2233,     0,     0,     0,     0,     0,   435,
     436,     0,     0,   718,   437,   438,   439,   440,   720,   441,
     442,   721,   443,   444,     0,   445,   446,     0,     0,   447,
       0,     0,   448,     0,   449,     0,   450,   451,     0,     0,
       0,     0,     0,     0,   452,     0,     0,   453,     0,     0,
       0,   454,   455,   456,   457,     0,     0,     0,     0,     0,
       0,   458,   459,     0,   460,   461,   462,     0,     0,   463,
       0,     0,     0,     0,   135,     0,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,   737,   738,   142,
       0,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,  2344,   183,   184,   185,   186,   187,     0,   188,
       0,     0,   189,     0,     0,   190,     0,     0,     0,   191,
       0,     0,     0,   192,   193,   194,     0,     0,   195,     0,
       0,     0,     0,   196,   197,     0,     0,     0,     0,   198,
       0,   199,     0,     0,     0,   200,     0,   201,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   206,   207,   208,
       0,     0,     0,   209,     0,     0,   210,   211,     0,   212,
     213,   214,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,     0,   222,   223,   224,     0,     0,   225,
     226,     0,   227,   228,   229,     0,     0,   230,     0,     0,
       0,   231,     0,   232,   477,   233,     0,   234,   235,   236,
     237,   238,     0,   239,     0,     0,     0,   240,   241,     0,
     242,     0,     0,   243,   244,     0,     0,     0,   245,   246,
     247,   248,     0,     0,   249,   250,   251,  1933,     0,   252,
       0,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
    1934,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,  2869,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,     0,     0,     0,
       0,   294,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,   313,   314,     0,
       0,   315,   316,   317,   318,     0,     0,     0,   319,   320,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,     0,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
    2870,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
     351,     0,   352,   353,   354,     0,     0,   355,     0,     0,
       0,   356,   357,   358,   359,   360,     0,     0,   361,   362,
     363,   364,   365,     0,   366,   367,     0,   368,   369,   370,
       0,     0,   371,     0,   372,     0,   373,   374,     0,   375,
     376,     0,     0,     0,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,  -436,     0,     0,
     389,   390,   391,   392,     0,     0,     0,   393,     0,     0,
       0,   394,     0,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   480,     0,     0,     0,     0,     0,   404,
     405,     0,   406,     0,     0,   407,     0,     0,   408,   409,
     410,     0,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,     0,   423,
     424,     0,     0,   425,   426,   427,   428,     0,     0,   429,
     430,     0,   431,   432,   433,   434,     0,     0,     0,     0,
       0,   435,   436,     0,     0,     0,   437,   438,   439,   440,
       0,   441,   442,     0,   443,   444,     0,   445,   446,     0,
       0,   447,     0,     0,   448,     0,   449,     0,   450,   451,
       0,     0,     0,     0,     0,     0,   452,     0,     0,   453,
       0,     0,     0,   454,   455,   456,   457,     0,     0,     0,
       0,     0,     0,   458,   459,     0,   460,   461,   462,     0,
       0,   463,     0,     0,   135,     0,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
    2409,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,  2344,   183,   184,   185,   186,   187,     0,   188,
       0,     0,   189,     0,     0,   190,     0,     0,     0,   191,
       0,     0,     0,   192,   193,   194,     0,     0,   195,     0,
       0,     0,     0,   196,   197,     0,     0,     0,     0,   198,
       0,   199,     0,     0,     0,   200,     0,   201,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   206,   207,   208,
       0,     0,     0,   209,     0,     0,   210,   211,     0,   212,
     213,   214,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,     0,   222,   223,   224,     0,     0,   225,
     226,     0,   227,   228,   229,     0,     0,   230,     0,     0,
       0,   231,     0,   232,   477,   233,     0,   234,   235,   236,
     237,   238,     0,   239,     0,     0,     0,   240,   241,     0,
     242,     0,     0,   243,   244,     0,     0,     0,   245,   246,
     247,   248,     0,     0,   249,   250,   251,  1933,     0,   252,
       0,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
    1934,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,     0,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,     0,     0,     0,
       0,   294,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,   313,   314,     0,
       0,   315,   316,   317,   318,     0,     0,     0,   319,   320,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,     0,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
     351,     0,   352,   353,   354,     0,     0,   355,     0,     0,
       0,   356,   357,   358,   359,   360,     0,     0,   361,   362,
     363,   364,   365,     0,   366,   367,     0,   368,   369,   370,
       0,     0,   371,     0,   372,     0,   373,   374,     0,   375,
     376,     0,     0,     0,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,     0,     0,
     389,   390,   391,   392,     0,     0,     0,   393,     0,     0,
       0,   394,     0,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,   480,     0,     0,     0,     0,     0,   404,
     405,     0,   406,     0,     0,   407,     0,     0,   408,   409,
     410,     0,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,     0,   423,
     424,     0,     0,   425,   426,   427,   428,     0,     0,   429,
     430,     0,   431,   432,   433,   434,     0,     0,     0,     0,
       0,   435,   436,     0,     0,     0,   437,   438,   439,   440,
       0,   441,   442,     0,   443,   444,     0,   445,   446,     0,
       0,   447,     0,     0,   448,     0,   449,     0,   450,   451,
       0,     0,     0,     0,     0,     0,   452,     0,     0,   453,
       0,     0,     0,   454,   455,   456,   457,     0,     0,     0,
       0,     0,     0,   458,   459,     0,   460,   461,   462,     0,
       0,   463,     0,     0,   135,     0,   136,   137,   138,   139,
     140,     0,     0,     0,     0,     0,   141,     0,     0,   142,
    2409,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,   185,   186,   187,     0,   188,
       0,     0,   189,     0,     0,   190,     0,     0,     0,   191,
       0,     0,     0,   192,   193,   194,     0,     0,   195,     0,
       0,     0,     0,   196,   197,     0,     0,     0,     0,   198,
       0,   199,     0,     0,     0,   200,     0,   201,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   206,   207,   208,
       0,     0,     0,   209,     0,     0,   210,   211,     0,   212,
     213,   214,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,     0,   222,   223,   224,     0,     0,   225,
     226,     0,   227,   228,   229,     0,     0,   230,     0,     0,
       0,   231,     0,   232,     0,   233,     0,   234,   235,   236,
     237,   238,     0,   239,     0,     0,     0,   240,   241,     0,
     242,     0,     0,   243,   244,     0,     0,     0,   245,   246,
     247,   248,     0,     0,   249,   250,   251,     0,     0,   252,
       0,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,     0,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,     0,     0,     0,
       0,   294,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,   313,   314,     0,
       0,   315,   316,   317,   318,     0,     0,     0,   319,   320,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,     0,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
     351,     0,   352,   353,   354,     0,     0,   355,     0,     0,
       0,   356,   357,   358,   359,   360,     0,     0,   361,   362,
     363,   364,   365,     0,   366,   367,     0,   368,   369,   370,
       0,     0,   371,     0,   372,     0,   373,   374,     0,   375,
     376,     0,     0,     0,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,  2222,     0,     0,
     389,   390,   391,   392,     0,     0,     0,   393,     0,     0,
       0,   394,     0,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,     0,     0,     0,     0,     0,     0,   404,
     405,     0,   406,     0,     0,   407,     0,     0,   408,   409,
     410,     0,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,     0,   423,
     424,     0,     0,   425,   426,   427,   428,     0,     0,   429,
     430,     0,   431,   432,   433,   434,     0,     0,     0,     0,
       0,   435,   436,     0,     0,     0,   437,   438,   439,   440,
       0,   441,   442,     0,   443,   444,     0,   445,   446,     0,
       0,   447,     0,     0,   448,     0,   449,     0,   450,   451,
       0,     0,     0,     0,     0,     0,   452,     0,     0,   453,
       0,     0,     0,   454,   455,   456,   457,     0,     0,     0,
       0,     0,     0,   458,   459,     0,   460,   461,   462,     0,
       0,   463,     0,     0,   135,     0,   136,   137,   138,   139,
     140,     0,     0,  2637,     0,     0,   141,     0,     0,   142,
     738,   143,   144,   145,   146,   147,   148,   149,     0,   150,
       0,     0,     0,   151,     0,     0,     0,   152,     0,     0,
     153,   154,   155,     0,   156,     0,   157,   158,     0,     0,
     159,     0,     0,   160,   161,     0,   162,   163,     0,   164,
       0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
       0,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,   182,     0,   183,   184,   185,   186,   187,     0,   188,
       0,     0,   189,     0,     0,   190,     0,     0,     0,   191,
       0,     0,     0,   192,   193,   194,     0,     0,   195,     0,
       0,     0,     0,   196,   197,     0,     0,     0,     0,   198,
       0,   199,     0,     0,     0,   200,     0,   201,   202,   203,
     204,     0,     0,     0,   205,     0,     0,   206,   207,   208,
       0,     0,     0,   209,     0,     0,   210,   211,     0,   212,
     213,   214,     0,     0,   215,   216,     0,   217,   218,   219,
     220,   221,     0,     0,   222,   223,   224,     0,     0,   225,
     226,     0,   227,   228,   229,     0,     0,   230,     0,     0,
       0,   231,     0,   232,     0,   233,     0,   234,   235,   236,
     237,   238,     0,   239,     0,     0,     0,   240,   241,     0,
     242,     0,     0,   243,   244,     0,     0,     0,   245,   246,
     247,   248,     0,     0,   249,   250,   251,     0,     0,   252,
       0,     0,     0,     0,   253,   254,     0,     0,     0,   255,
       0,   256,   257,     0,   258,   259,     0,     0,     0,   260,
       0,     0,   261,   262,     0,     0,   263,     0,     0,   264,
     265,     0,     0,     0,     0,     0,   266,   267,     0,   268,
       0,   269,     0,   270,   271,     0,     0,     0,     0,     0,
       0,     0,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,     0,   285,   286,   287,     0,
     288,   289,   290,   291,     0,   292,   293,     0,     0,     0,
       0,   294,   295,   296,   297,   298,   299,     0,     0,   300,
     301,     0,   302,     0,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,   313,   314,     0,
       0,   315,   316,   317,   318,     0,     0,     0,   319,   320,
       0,     0,     0,     0,   321,   322,   323,     0,   324,   325,
     326,     0,   327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   328,   329,   330,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,     0,     0,
     343,   344,   345,     0,   346,     0,   347,   348,   349,   350,
     351,     0,   352,   353,   354,     0,     0,   355,     0,     0,
       0,   356,   357,   358,   359,   360,     0,     0,   361,   362,
     363,   364,   365,     0,   366,   367,     0,   368,   369,   370,
       0,     0,   371,     0,   372,     0,   373,   374,     0,   375,
     376,     0,     0,     0,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,     0,   387,   388,     0,     0,     0,
     389,   390,   391,   392,     0,     0,     0,   393,     0,     0,
       0,   394,     0,   395,   396,   397,   398,     0,   399,   400,
     401,   402,   403,     0,     0,     0,     0,     0,     0,   404,
     405,     0,   406,     0,     0,   407,     0,     0,   408,   409,
     410,     0,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,     0,     0,   419,   420,   421,   422,     0,   423,
     424,     0,     0,   425,   426,   427,   428,     0,     0,   429,
     430,     0,   431,   432,   433,   434,     0,     0,     0,     0,
       0,   435,   436,     0,     0,     0,   437,   438,   439,   440,
       0,   441,   442,     0,   443,   444,     0,   445,   446,     0,
       0,   447,     0,     0,   448,     0,   449,     0,   450,   451,
       0,     0,     0,     0,     0,     0,   452,     0,     0,   453,
       0,     0,     0,   454,   455,   456,   457,     0,     0,     0,
       0,     0,     0,   458,   459,     0,   460,   461,   462,     0,
       0,   463,     0,     0,     0,     0,   135,     0,   136,   137,
     138,   139,   140,  4210,     0,     0,     0,     0,   141,  4211,
     738,   142,     0,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,   185,   186,   187,
       0,   188,     0,     0,   189,     0,     0,   190,     0,     0,
       0,   191,     0,     0,     0,   192,   193,   194,     0,     0,
     195,     0,     0,     0,     0,   196,   197,     0,     0,     0,
       0,   198,     0,   199,     0,     0,     0,   200,     0,   201,
     202,   203,   204,     0,     0,     0,   205,     0,     0,   206,
     207,   208,     0,     0,     0,   209,     0,     0,   210,   211,
       0,   212,   213,   214,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,     0,     0,   222,   223,   224,     0,
       0,   225,   226,     0,   227,   228,   229,     0,     0,   230,
       0,     0,     0,   231,     0,   232,     0,   233,     0,   234,
     235,   236,   237,   238,     0,   239,     0,     0,     0,   240,
     241,     0,   242,     0,     0,   243,   244,     0,     0,     0,
     245,   246,   247,   248,     0,     0,   249,   250,   251,     0,
       0,   252,     0,     0,     0,     0,   253,   254,     0,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
       0,   264,   265,     0,     0,     0,     0,     0,   266,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,     0,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,   286,
     287,     0,   288,   289,   290,   291,     0,   292,   293,     0,
       0,     0,     0,   294,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,   313,
     314,     0,     0,   315,   316,   317,   318,     0,     0,     0,
     319,   320,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,     0,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,   351,     0,   352,   353,   354,     0,     0,   355,
       0,     0,     0,   356,   357,   358,   359,   360,     0,     0,
     361,   362,   363,   364,   365,     0,   366,   367,     0,   368,
     369,   370,     0,     0,   371,     0,   372,     0,   373,   374,
       0,   375,   376,     0,     0,     0,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
       0,     0,   389,   390,   391,   392,     0,     0,     0,   393,
       0,     0,     0,   394,     0,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,     0,     0,     0,     0,     0,
       0,   404,   405,     0,   406,     0,     0,   407,     0,     0,
     408,   409,   410,     0,     0,   411,   412,     0,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
       0,   423,   424,     0,     0,   425,   426,   427,   428,     0,
       0,   429,   430,     0,   431,   432,   433,   434,     0,     0,
       0,     0,     0,   435,   436,     0,     0,     0,   437,   438,
     439,   440,     0,   441,   442,     0,   443,   444,     0,   445,
     446,     0,     0,   447,     0,     0,   448,     0,   449,     0,
     450,   451,     0,     0,     0,     0,     0,     0,   452,     0,
       0,   453,     0,     0,     0,   454,   455,   456,   457,     0,
       0,     0,     0,     0,     0,   458,   459,     0,   460,   461,
     462,     0,     0,   463,     0,     0,   135,     0,   136,   137,
     138,   139,   140,     0,  1065,     0,     0,     0,   141,     0,
       0,   142,   738,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,   185,   186,   187,
       0,   188,     0,     0,   189,     0,     0,   190,     0,     0,
       0,   191,     0,     0,     0,   192,   193,   194,     0,     0,
     195,     0,     0,     0,     0,   196,   197,     0,     0,     0,
       0,   198,     0,   199,     0,     0,     0,   200,     0,   201,
     202,   203,   204,     0,     0,     0,   205,     0,     0,   206,
     207,   208,     0,     0,     0,   209,     0,     0,   210,   211,
       0,   212,   213,   214,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,     0,     0,   222,   223,   224,     0,
       0,   225,   226,     0,   227,   228,   229,     0,     0,   230,
       0,     0,     0,   231,     0,   232,     0,   233,     0,   234,
     235,   236,   237,   238,     0,   239,     0,     0,     0,   240,
     241,     0,   242,     0,     0,   243,   244,     0,     0,     0,
     245,   246,   247,   248,     0,     0,   249,   250,   251,     0,
       0,   252,     0,     0,     0,     0,   253,   254,     0,  1258,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
       0,   264,   265,     0,     0,     0,     0,     0,   266,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,     0,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,   286,
     287,     0,   288,   289,   290,   291,     0,   292,   293,     0,
       0,     0,     0,   294,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,   313,
     314,     0,     0,   315,   316,   317,   318,     0,     0,     0,
     319,   320,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,     0,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,   351,     0,   352,   353,   354,     0,     0,   355,
       0,     0,     0,   356,   357,   358,   359,   360,     0,     0,
     361,   362,   363,   364,   365,     0,   366,   367,     0,   368,
     369,   370,     0,     0,   371,     0,   372,     0,   373,   374,
       0,   375,   376,     0,     0,     0,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
       0,     0,   389,   390,   391,   392,     0,     0,     0,   393,
       0,     0,     0,   394,     0,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,     0,     0,     0,     0,     0,
       0,   404,   405,     0,   406,     0,     0,   407,     0,     0,
     408,   409,   410,     0,     0,   411,   412,     0,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
       0,   423,   424,     0,     0,   425,   426,   427,   428,     0,
       0,   429,   430,     0,   431,   432,   433,   434,     0,     0,
       0,     0,     0,   435,   436,     0,     0,     0,   437,   438,
     439,   440,     0,   441,   442,     0,   443,   444,     0,   445,
     446,     0,     0,   447,     0,     0,   448,     0,   449,     0,
     450,   451,     0,     0,     0,     0,     0,     0,   452,     0,
       0,   453,     0,     0,     0,   454,   455,   456,   457,     0,
       0,     0,     0,     0,     0,   458,   459,     0,   460,   461,
     462,     0,     0,   463,     0,     0,   135,     0,   136,   137,
     138,   139,   140,     0,     0,     0,     0,     0,   141,     0,
       0,   142,   511,   143,   144,   145,   146,   147,   148,   149,
       0,   150,     0,     0,     0,   151,     0,     0,     0,   152,
       0,     0,   153,   154,   155,     0,   156,     0,   157,   158,
       0,     0,   159,     0,     0,   160,   161,     0,   162,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,     0,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,   182,     0,   183,   184,   185,   186,   187,
       0,   188,     0,     0,   189,     0,     0,   190,     0,     0,
       0,   191,     0,     0,     0,   192,   193,   194,     0,     0,
     195,     0,     0,     0,     0,   196,   197,     0,     0,     0,
       0,   198,     0,   199,     0,     0,     0,   200,     0,   201,
     202,   203,   204,     0,     0,     0,   205,     0,     0,   206,
     207,   208,     0,     0,     0,   209,     0,     0,   210,   211,
       0,   212,   213,   214,     0,     0,   215,   216,     0,   217,
     218,   219,   220,   221,     0,     0,   222,   223,   224,     0,
       0,   225,   226,     0,   227,   228,   229,     0,     0,   230,
       0,     0,     0,   231,     0,   232,     0,   233,     0,   234,
     235,   236,   237,   238,     0,   239,     0,     0,     0,   240,
     241,     0,   242,     0,     0,   243,   244,     0,     0,     0,
     245,   246,   247,   248,     0,     0,   249,   250,   251,     0,
       0,   252,     0,     0,     0,     0,   253,   254,     0,     0,
       0,   255,     0,   256,   257,     0,   258,   259,     0,     0,
       0,   260,     0,     0,   261,   262,     0,     0,   263,     0,
       0,   264,   265,     0,     0,     0,     0,     0,   266,   267,
       0,   268,     0,   269,     0,   270,   271,     0,     0,     0,
       0,     0,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,     0,   285,   286,
     287,     0,   288,   289,   290,   291,     0,   292,   293,     0,
       0,     0,     0,   294,   295,   296,   297,   298,   299,     0,
       0,   300,   301,     0,   302,     0,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,   313,
     314,     0,     0,   315,   316,   317,   318,     0,     0,     0,
     319,   320,     0,     0,     0,     0,   321,   322,   323,     0,
     324,   325,   326,     0,   327,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   328,   329,   330,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,     0,   343,   344,   345,     0,   346,     0,   347,   348,
     349,   350,   351,     0,   352,   353,   354,     0,     0,   355,
       0,     0,     0,   356,   357,   358,   359,   360,     0,     0,
     361,   362,   363,   364,   365,     0,   366,   367,     0,   368,
     369,   370,     0,     0,   371,     0,   372,     0,   373,   374,
       0,   375,   376,     0,     0,     0,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,     0,   387,   388,     0,
       0,     0,   389,   390,   391,   392,     0,     0,     0,   393,
       0,     0,     0,   394,     0,   395,   396,   397,   398,     0,
     399,   400,   401,   402,   403,     0,     0,     0,     0,     0,
       0,   404,   405,     0,   406,     0,     0,   407,     0,     0,
     408,   409,   410,     0,     0,   411,   412,     0,   413,   414,
     415,   416,   417,   418,     0,     0,   419,   420,   421,   422,
       0,   423,   424,     0,     0,   425,   426,   427,   428,     0,
       0,   429,   430,     0,   431,   432,   433,   434,     0,     0,
       0,     0,     0,   435,   436,     0,     0,     0,   437,   438,
     439,   440,     0,   441,   442,     0,   443,   444,     0,   445,
     446,     0,     0,   447,     0,     0,   448,     0,   449,     0,
     450,   451,     0,     0,     0,     0,     0,     0,   452,     0,
       0,   453,     0,     0,     0,   454,   455,   456,   457,     0,
       0,     0,     0,     0,     0,   458,   459,     0,   460,   461,
     462,     0,     0,   463,     0,     0,     0,     0,   135,  2164,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,   511,   142,     0,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,   185,
     186,   187,     0,   188,     0,     0,   189,     0,     0,   190,
       0,     0,     0,   191,     0,     0,     0,   192,   193,   194,
       0,     0,   195,     0,     0,     0,     0,   196,   197,     0,
       0,     0,     0,   198,     0,   199,     0,     0,     0,   200,
       0,   201,   202,   203,   204,     0,     0,     0,   205,     0,
       0,   206,   207,   208,     0,     0,     0,   209,     0,     0,
     210,   211,     0,   212,   213,   214,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,     0,     0,   222,   223,
     224,     0,     0,   225,   226,     0,   227,   228,   229,     0,
       0,   230,     0,     0,     0,   231,     0,   232,     0,   233,
       0,   234,   235,   236,   237,   238,     0,   239,     0,     0,
       0,   240,   241,     0,   242,     0,     0,   243,   244,     0,
       0,     0,   245,   246,   247,   248,     0,     0,   249,   250,
     251,     0,     0,   252,     0,     0,     0,     0,   253,   254,
       0,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,     0,   264,   265,     0,     0,     0,     0,     0,
     266,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,     0,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,   286,   287,     0,   288,   289,   290,   291,     0,   292,
     293,     0,     0,     0,     0,   294,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,   313,   314,     0,     0,   315,   316,   317,   318,     0,
       0,     0,   319,   320,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,     0,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,   351,     0,   352,   353,   354,     0,
       0,   355,     0,     0,     0,   356,   357,   358,   359,   360,
       0,     0,   361,   362,   363,   364,   365,     0,   366,   367,
       0,   368,   369,   370,     0,     0,   371,     0,   372,     0,
     373,   374,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,     0,     0,   389,   390,   391,   392,     0,     0,
       0,   393,     0,     0,     0,   394,     0,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,     0,     0,     0,
       0,     0,     0,   404,   405,     0,   406,     0,     0,   407,
       0,     0,   408,   409,   410,     0,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,     0,   423,   424,     0,     0,   425,   426,   427,
     428,     0,     0,   429,   430,     0,   431,   432,   433,   434,
       0,     0,     0,     0,     0,   435,   436,     0,     0,     0,
     437,   438,   439,   440,     0,   441,   442,     0,   443,   444,
       0,   445,   446,     0,     0,   447,     0,     0,   448,     0,
     449,     0,   450,   451,     0,     0,     0,     0,     0,     0,
     452,     0,     0,   453,     0,     0,     0,   454,   455,   456,
     457,     0,     0,     0,     0,     0,     0,   458,   459,     0,
     460,   461,   462,     0,     0,   463,     0,     0,   135,     0,
     136,   137,   138,   139,   140,     0,  2408,     0,     0,     0,
     141,     0,     0,   142,  2409,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,   185,
     186,   187,     0,   188,     0,     0,   189,     0,     0,   190,
       0,     0,     0,   191,     0,     0,     0,   192,   193,   194,
       0,     0,   195,     0,     0,     0,     0,   196,   197,     0,
       0,     0,     0,   198,     0,   199,     0,     0,     0,   200,
       0,   201,   202,   203,   204,     0,     0,     0,   205,     0,
       0,   206,   207,   208,     0,     0,     0,   209,     0,     0,
     210,   211,     0,   212,   213,   214,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,     0,     0,   222,   223,
     224,     0,     0,   225,   226,     0,   227,   228,   229,     0,
       0,   230,     0,     0,     0,   231,     0,   232,     0,   233,
       0,   234,   235,   236,   237,   238,     0,   239,     0,     0,
       0,   240,   241,     0,   242,     0,     0,   243,   244,     0,
       0,     0,   245,   246,   247,   248,     0,     0,   249,   250,
     251,     0,     0,   252,     0,     0,     0,     0,   253,   254,
       0,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,     0,   264,   265,     0,     0,     0,     0,     0,
     266,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,     0,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,   286,   287,     0,   288,   289,   290,   291,     0,   292,
     293,     0,     0,     0,     0,   294,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,   313,   314,     0,     0,   315,   316,   317,   318,     0,
       0,     0,   319,   320,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,     0,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,   351,     0,   352,   353,   354,     0,
       0,   355,     0,     0,     0,   356,   357,   358,   359,   360,
       0,     0,   361,   362,   363,   364,   365,     0,   366,   367,
       0,   368,   369,   370,     0,     0,   371,     0,   372,     0,
     373,   374,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,     0,     0,   389,   390,   391,   392,     0,     0,
       0,   393,     0,     0,     0,   394,     0,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,     0,     0,     0,
       0,     0,     0,   404,   405,     0,   406,     0,     0,   407,
       0,     0,   408,   409,   410,     0,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,     0,   423,   424,     0,     0,   425,   426,   427,
     428,     0,     0,   429,   430,     0,   431,   432,   433,   434,
       0,     0,     0,     0,     0,   435,   436,     0,     0,     0,
     437,   438,   439,   440,     0,   441,   442,     0,   443,   444,
       0,   445,   446,     0,     0,   447,     0,     0,   448,     0,
     449,     0,   450,   451,     0,     0,     0,     0,     0,     0,
     452,     0,     0,   453,     0,     0,     0,   454,   455,   456,
     457,     0,     0,     0,     0,     0,     0,   458,   459,     0,
     460,   461,   462,     0,     0,   463,     0,     0,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,  4211,   738,   142,     0,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   186,   187,     0,   188,     0,     0,   189,     0,
       0,   190,     0,     0,     0,   191,     0,     0,     0,   192,
     193,   194,     0,     0,   195,     0,     0,     0,     0,   196,
     197,     0,     0,     0,     0,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,     0,
     222,   223,   224,     0,     0,   225,   226,     0,   227,   228,
     229,     0,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   235,   236,   237,   238,     0,   239,
       0,     0,     0,   240,   241,     0,   242,     0,     0,   243,
     244,     0,     0,     0,   245,   246,   247,   248,     0,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,   313,   314,     0,     0,   315,   316,   317,
     318,     0,     0,     0,   319,   320,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   352,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,     0,     0,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,     0,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,     0,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,     0,   423,   424,     0,     0,   425,
     426,   427,   428,     0,     0,   429,   430,     0,   431,   432,
     433,   434,     0,     0,     0,     0,     0,   435,   436,     0,
       0,     0,   437,   438,   439,   440,     0,   441,   442,     0,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   450,   451,     0,     0,     0,     0,
       0,     0,   452,     0,     0,   453,     0,     0,     0,   454,
     455,   456,   457,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   463,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,   511,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   186,   187,     0,   188,     0,     0,   189,     0,
       0,   190,     0,     0,     0,   191,     0,     0,     0,   192,
     193,   194,     0,     0,   195,     0,     0,     0,     0,   196,
     197,     0,     0,     0,     0,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,     0,
     222,   577,   224,     0,     0,   225,   226,     0,   227,   228,
     229,     0,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   235,   236,   237,   238,     0,   239,
       0,     0,     0,   240,   241,     0,   242,     0,     0,   243,
     244,     0,     0,     0,   245,   246,   247,   248,     0,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,   313,   314,     0,     0,   315,   316,   317,
     318,     0,     0,     0,   319,   320,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   578,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   352,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,     0,     0,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,     0,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,     0,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,     0,   423,   424,     0,     0,   425,
     426,   427,   428,     0,     0,   429,   430,     0,   431,   432,
     433,   434,     0,     0,     0,     0,     0,   435,   436,     0,
       0,     0,   437,   438,   439,   440,     0,   441,   442,     0,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   450,   451,     0,     0,     0,     0,
       0,     0,   452,     0,     0,   453,     0,     0,     0,   454,
     455,   456,   457,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   463,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,   511,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   186,   187,     0,   188,     0,     0,   189,     0,
       0,   190,     0,     0,     0,   191,     0,     0,     0,   192,
     193,   194,     0,     0,   195,     0,     0,     0,     0,   196,
     197,     0,     0,     0,     0,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,     0,
     222,   223,   224,     0,     0,   225,   226,     0,   227,   228,
     229,     0,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   235,   236,   237,   238,     0,   239,
       0,     0,     0,   240,   241,     0,   242,     0,     0,   243,
     244,     0,     0,     0,   245,   246,   247,   248,     0,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,   313,   314,     0,     0,   315,   316,   317,
     318,     0,     0,     0,   319,   320,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   352,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,     0,     0,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,     0,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,     0,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,     0,   423,   424,     0,     0,   425,
     426,   427,   428,     0,     0,   429,   430,     0,   431,   432,
     433,   434,     0,     0,     0,     0,     0,   435,   436,     0,
       0,     0,   437,   438,   439,   440,     0,   441,   442,     0,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   450,   451,     0,     0,     0,     0,
       0,     0,   452,     0,     0,   453,     0,     0,     0,   454,
     455,   456,   457,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   463,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,   738,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   186,   187,     0,   188,     0,     0,   189,     0,
       0,   190,     0,     0,     0,   191,     0,     0,     0,   192,
     193,   194,     0,     0,   195,     0,     0,     0,     0,   196,
     197,     0,     0,     0,     0,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,     0,
     222,   223,   224,     0,     0,   225,   226,     0,   227,   228,
     229,     0,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   235,   236,   237,   238,     0,   239,
       0,     0,     0,   240,   241,     0,   242,     0,     0,   243,
     244,     0,     0,     0,   245,   246,   247,   248,     0,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,     0,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,   313,   314,     0,     0,   315,   316,   317,
     318,     0,     0,     0,   319,   320,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   352,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,     0,     0,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,     0,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,     0,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,     0,   423,   424,     0,     0,   425,
     426,   427,   428,     0,     0,   429,   430,     0,   431,   432,
     433,   434,     0,     0,     0,     0,     0,   435,   436,     0,
       0,     0,   437,   438,   439,   440,     0,   441,   442,     0,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   450,   451,     0,     0,     0,     0,
       0,     0,   452,     0,     0,   453,     0,     0,     0,   454,
     455,   456,   457,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   463,     0,     0,
     135,     0,   136,   137,   138,   139,   140,     0,     0,     0,
       0,     0,   141,     0,     0,   142,  2409,   143,   144,   145,
     146,   147,   148,   149,     0,   150,     0,     0,     0,   151,
       0,     0,     0,   152,     0,     0,   153,   154,   155,     0,
     156,     0,   157,   158,     0,     0,   159,     0,     0,   160,
     161,     0,   162,   163,     0,   164,     0,   165,   166,   167,
     168,   169,   170,     0,   171,   172,     0,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,   182,     0,   183,
     184,   185,   186,   187,     0,   188,     0,     0,   189,     0,
       0,   190,     0,     0,     0,   191,     0,     0,     0,   192,
     193,   194,     0,     0,   195,     0,     0,     0,     0,   196,
     197,     0,     0,     0,     0,   198,     0,   199,     0,     0,
       0,   200,     0,   201,   202,   203,   204,     0,     0,     0,
     205,     0,     0,   206,   207,   208,     0,     0,     0,   209,
       0,     0,   210,   211,     0,   212,   213,   214,     0,     0,
     215,   216,     0,   217,   218,   219,   220,   221,     0,     0,
     222,   223,   224,     0,     0,   225,   226,     0,   227,   228,
     229,     0,     0,   230,     0,     0,     0,   231,     0,   232,
       0,   233,     0,   234,   235,   236,   237,   238,     0,   239,
       0,     0,     0,   240,   241,     0,   242,     0,     0,   243,
     244,     0,     0,     0,   245,   246,   247,   248,     0,     0,
     249,   250,   251,     0,     0,   252,     0,     0,     0,     0,
     253,   254,     0,     0,     0,   255,     0,   256,   257,     0,
     258,   259,     0,     0,     0,   260,     0,     0,   261,   262,
       0,     0,   263,     0,     0,   264,   265,   589,     0,     0,
       0,     0,   266,   267,     0,   268,     0,   269,     0,   270,
     271,     0,     0,     0,     0,     0,     0,     0,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,     0,   285,   286,   287,     0,   288,   289,   290,   291,
       0,   292,   293,     0,     0,     0,     0,   294,   295,   296,
     297,   298,   299,     0,     0,   300,   301,     0,   302,     0,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,   313,   314,     0,     0,   315,   316,   317,
     318,     0,     0,     0,   319,   320,     0,     0,     0,     0,
     321,   322,   323,     0,   324,   325,   326,     0,   327,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   328,   329,
     330,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,     0,     0,   343,   344,   345,     0,
     346,     0,   347,   348,   349,   350,   351,     0,   352,   353,
     354,     0,     0,   355,     0,     0,     0,   356,   357,   358,
     359,   360,     0,     0,   361,   362,   363,   364,   365,     0,
     366,   367,     0,   368,   369,   370,     0,     0,   371,     0,
     372,     0,   373,   374,     0,   375,   376,     0,     0,     0,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
       0,   387,   388,     0,     0,     0,   389,   390,   391,   392,
       0,     0,     0,   393,     0,     0,     0,   394,     0,   395,
     396,   397,   398,     0,   399,   400,   401,   402,   403,     0,
       0,     0,     0,     0,     0,   404,   405,     0,   406,     0,
       0,   407,     0,     0,   408,   409,   410,     0,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,     0,     0,
     419,   420,   421,   422,     0,   423,   424,     0,     0,   425,
     426,   427,   428,     0,   132,   429,   430,     0,   431,   432,
     433,   434,     0,     0,     0,     0,     0,   435,   436,     0,
       0,     0,   437,   438,   439,   440,     0,   441,   442,     0,
     443,   444,     0,   445,   446,     0,     0,   447,     0,     0,
     448,     0,   449,     0,   450,   451,     0,     0,     0,     0,
       0,     0,   452,     0,     0,   453,     0,     0,     0,   454,
     455,   456,   457,     0,     0,     0,     0,     0,     0,   458,
     459,     0,   460,   461,   462,     0,     0,   463,     0,   135,
       0,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,  1606,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,     0,   222,
     223,   224,     0,     0,   225,   226,     0,   227,   228,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,     0,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,   589,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,   319,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,   132,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,     0,   463,     0,   135,     0,
     136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     141,     0,     0,   142,  2677,   143,   144,   145,   146,   147,
     148,   149,     0,   150,     0,     0,     0,   151,     0,     0,
       0,   152,     0,     0,   153,   154,   155,     0,   156,     0,
     157,   158,     0,     0,   159,     0,     0,   160,   161,     0,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,     0,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,   182,     0,   183,   184,   185,
     186,   187,     0,   188,     0,     0,   189,     0,     0,   190,
       0,     0,     0,   191,     0,     0,     0,   192,   193,   194,
       0,     0,   195,     0,     0,     0,     0,   196,   197,     0,
       0,     0,     0,   198,     0,   199,     0,     0,     0,   200,
       0,   201,   202,   203,   204,     0,     0,     0,   205,     0,
       0,   206,   207,   208,     0,     0,     0,   209,     0,     0,
     210,   211,     0,   212,   213,   214,     0,     0,   215,   216,
       0,   217,   218,   219,   220,   221,     0,     0,   222,   223,
     224,     0,     0,   225,   226,     0,   227,   228,   229,     0,
       0,   230,     0,     0,     0,   231,     0,   232,     0,   233,
       0,   234,   235,   236,   237,   238,     0,   239,     0,     0,
       0,   240,   241,     0,   242,     0,     0,   243,   244,     0,
       0,     0,   245,   246,   247,   248,     0,     0,   249,   250,
     251,     0,     0,   252,     0,     0,     0,     0,   253,   254,
       0,     0,     0,   255,     0,   256,   257,     0,   258,   259,
       0,     0,     0,   260,     0,     0,   261,   262,     0,     0,
     263,     0,     0,   264,   265,   589,     0,     0,     0,     0,
     266,   267,     0,   268,     0,   269,     0,   270,   271,     0,
       0,     0,     0,     0,     0,     0,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,     0,
     285,   286,   287,     0,   288,   289,   290,   291,     0,   292,
     293,     0,     0,     0,     0,   294,   295,   296,   297,   298,
     299,     0,     0,   300,   301,     0,   302,     0,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,   313,   314,     0,     0,   315,   316,   317,   318,     0,
       0,     0,   319,   320,     0,     0,     0,     0,   321,   322,
     323,     0,   324,   325,   326,     0,   327,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   328,   329,   330,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,     0,     0,   343,   344,   345,     0,   346,     0,
     347,   348,   349,   350,   351,     0,   352,   353,   354,     0,
       0,   355,     0,     0,     0,   356,   357,   358,   359,   360,
       0,     0,   361,   362,   363,   364,   365,     0,   366,   367,
       0,   368,   369,   370,     0,     0,   371,     0,   372,     0,
     373,   374,     0,   375,   376,     0,     0,     0,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,     0,   387,
     388,     0,     0,     0,   389,   390,   391,   392,     0,     0,
       0,   393,     0,     0,     0,   394,     0,   395,   396,   397,
     398,     0,   399,   400,   401,   402,   403,     0,     0,     0,
       0,     0,     0,   404,   405,     0,   406,     0,     0,   407,
       0,     0,   408,   409,   410,     0,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,     0,     0,   419,   420,
     421,   422,     0,   423,   424,     0,     0,   425,   426,   427,
     428,     0,   132,   429,   430,     0,   431,   432,   433,   434,
       0,     0,     0,     0,     0,   435,   436,     0,     0,     0,
     437,   438,   439,   440,     0,   441,   442,     0,   443,   444,
       0,   445,   446,     0,     0,   447,     0,     0,   448,     0,
     449,     0,   450,   451,     0,     0,     0,     0,     0,     0,
     452,     0,     0,   453,     0,     0,     0,   454,   455,   456,
     457,     0,     0,     0,     0,     0,     0,   458,   459,     0,
     460,   461,   462,     0,     0,   463,     0,   135,     0,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,     0,  3283,   143,   144,   145,   146,   147,   148,
       0,     0,  -327,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,     0,
       0,     0,     0,   159,  3699,     0,   160,   161,     0,   162,
       0,     0,     0,     0,   165,   166,   167,  3700,   169,   170,
       0,   171,   172,     0,   173,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,     0,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,     0,     0,     0,
       0,     0,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,     0,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,     0,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,     0,     0,     0,   222,   223,   224,
       0,     0,   225,   226,  3701,   227,   228,   229,     0,     0,
       0,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,   244,     0,     0,
       0,   245,   246,   247,   248,  3702,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,     0,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,  3703,
       0,     0,   260,     0,     0,     0,   262,     0,     0,   263,
    3704,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,  -282,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,  3705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,     0,     0,
     332,   333,   334,     0,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     0,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,     0,     0,
     368,     0,   370,  -282,     0,   371,     0,     0,     0,   373,
       0,     0,   375,   376,  3706,     0,     0,     0,   378,   379,
     380,   381,   382,   383,     0,   385,   386,     0,   387,     0,
       0,     0,     0,   389,   390,   391,     0,     0,     0,     0,
     393,     0,     0,     0,   394,     0,     0,   396,     0,   398,
       0,   399,     0,     0,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,     0,   410,     0,     0,     0,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,     0,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,     0,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
       0,     0,     0,     0,   447,     0,     0,   448,     0,     0,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,  -282,     0,     0,     0,   458,     0,     0,   460,
       0,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,  4217,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   186,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,   197,     0,     0,     0,     0,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,     0,   222,   223,   224,     0,     0,   225,   226,
       0,   227,   228,   229,     0,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,   240,   241,     0,   242,
       0,     0,   243,   244,     0,     0,     0,   245,   246,   247,
     248,     0,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,   319,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,     0,
       0,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,     0,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
       0,     0,   411,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,     0,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,   437,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,   135,
     463,   136,   137,   138,   139,   140,  2003,     0,     0,     0,
       0,   141,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,     0,   222,
     223,   224,     0,     0,   225,   226,     0,   227,   228,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,     0,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,   319,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,   135,   463,   136,   137,   138,
     139,   140,  2665,     0,     0,     0,     0,   141,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   186,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,   197,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,     0,   222,   223,   224,     0,     0,
     225,   226,     0,   227,   228,   229,     0,     0,   230,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,   240,   241,
       0,   242,     0,     0,   243,   244,     0,     0,     0,   245,
     246,   247,   248,     0,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,   319,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,     0,     0,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,     0,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,     0,     0,   411,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,     0,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,   437,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,   135,   463,   136,   137,   138,   139,   140,  2967,     0,
       0,     0,     0,   141,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   186,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,   197,     0,     0,     0,     0,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
       0,   222,   223,   224,     0,     0,   225,   226,     0,   227,
     228,   229,     0,     0,   230,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,   240,   241,     0,   242,     0,     0,
     243,   244,     0,     0,     0,   245,   246,   247,   248,     0,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,   319,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,     0,     0,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
       0,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,     0,     0,
     411,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,     0,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,   437,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,   135,   463,   136,
     137,   138,   139,   140,  3288,     0,     0,     0,     0,   141,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   186,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,   197,  2323,     0,
       0,     0,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,     0,   222,   223,   224,
       0,     0,   225,   226,     0,   227,   228,   229,  2324,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
     240,   241,     0,   242,  2325,     0,   243,   244,     0,     0,
       0,   245,   246,   247,   248,     0,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
    2326,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,   981,   982,
       0,   319,   320,     0,     0,  2327,     0,   321,   322,   323,
       0,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,     0,     0,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,     0,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,  4197,   536,
    4198,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,     0,     0,   411,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,     0,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,   437,
     438,   439,   440,  2328,   441,   442,     0,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,  2517,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   186,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,   197,     0,     0,     0,  2671,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,  2146,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,     0,   222,   223,   224,     0,     0,   225,   226,
       0,   227,   228,   229,     0,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,   240,   241,     0,   242,
       0,     0,   243,   244,     0,     0,     0,   245,   246,   247,
     248,     0,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
     589,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,   319,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,     0,
       0,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,  2147,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
       0,     0,   411,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,   132,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,   437,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,   135,
     463,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,     0,   222,
     223,   224,     0,     0,   225,   226,     0,   227,   228,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,     0,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,  1764,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,   319,   320,     0,     0,  1765,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
     695,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,  1766,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,  2679,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   186,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,   197,     0,     0,     0,  2680,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,     0,   222,   223,   224,     0,     0,
     225,   226,     0,   227,   228,   229,     0,     0,   230,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,   240,   241,
       0,   242,     0,     0,   243,   244,     0,     0,     0,   245,
     246,   247,   248,     0,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,   589,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,   319,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,     0,     0,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,     0,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,     0,     0,   411,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,   132,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,   437,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,   135,   463,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,  2517,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   186,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,   197,     0,     0,     0,  2671,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
       0,   222,   223,   224,     0,     0,   225,   226,     0,   227,
     228,   229,     0,     0,   230,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,   240,   241,     0,   242,     0,     0,
     243,   244,     0,     0,     0,   245,   246,   247,   248,     0,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,   589,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,   319,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,     0,     0,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
       0,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,     0,     0,
     411,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,   132,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,   437,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,   135,   463,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   186,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
     940,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,   197,     0,     0,
       0,     0,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,     0,   222,   223,   224,
       0,     0,   225,   226,     0,   227,   228,   229,     0,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
     240,   241,     0,   242,     0,     0,   243,   244,     0,     0,
       0,   245,   246,   247,   248,     0,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,   589,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,   319,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,     0,     0,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,     0,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,     0,     0,   411,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,   132,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,   437,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,   135,   463,   136,   137,   138,   139,   140,
    1310,     0,     0,     0,     0,   141,     0,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   186,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,   197,     0,     0,     0,     0,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,     0,   222,   223,   224,     0,     0,   225,   226,
       0,   227,   228,   229,     0,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,   240,   241,     0,   242,
       0,     0,   243,   244,     0,     0,     0,   245,   246,   247,
     248,     0,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
     589,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,   319,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,     0,
       0,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,     0,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
       0,     0,   411,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,   132,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,   437,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,   135,
     463,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,   918,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,     0,   222,
     223,   224,     0,     0,   225,   226,     0,   227,   228,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,   919,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,   319,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,   920,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,  2517,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   186,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,   197,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,     0,   222,   223,   224,     0,     0,
     225,   226,     0,   227,   228,   229,     0,     0,   230,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,   240,   241,
       0,   242,     0,     0,   243,   244,     0,     0,     0,   245,
     246,   247,   248,     0,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,   589,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,   319,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,     0,     0,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,     0,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,     0,     0,   411,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,   132,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,   437,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,   135,   463,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   186,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,   197,     0,     0,     0,  2719,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
       0,   222,   223,   224,     0,     0,   225,   226,     0,   227,
     228,   229,     0,     0,   230,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,   240,   241,     0,   242,     0,     0,
     243,   244,     0,     0,     0,   245,   246,   247,   248,     0,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,   589,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,   319,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,     0,     0,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
       0,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,     0,     0,
     411,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,   132,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,   437,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,   135,   463,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   186,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,   197,     0,     0,
       0,     0,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,     0,   222,   223,   224,
       0,     0,   225,   226,     0,   227,   228,   229,     0,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
     240,   241,     0,   242,     0,     0,   243,   244,     0,     0,
       0,   245,   246,   247,   248,     0,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,   589,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,   319,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,     0,     0,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,     0,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,     0,     0,   411,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,   132,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,   437,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,  2661,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   186,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,   197,     0,     0,     0,     0,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,     0,   222,   223,   224,     0,     0,   225,   226,
       0,   227,   228,   229,     0,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,   240,   241,     0,   242,
       0,     0,   243,   244,     0,     0,     0,   245,   246,   247,
     248,     0,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,   319,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,     0,
       0,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,     0,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
       0,     0,   411,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,   132,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,   437,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,   135,
     463,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,  4115,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,  4116,   222,
     223,   224,     0,     0,   225,   226,     0,   227,   228,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,     0,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,   319,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   186,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,   197,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,     0,   222,   223,   224,     0,     0,
     225,   226,     0,   227,   228,   229,     0,     0,   230,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,   240,   241,
       0,   242,     0,     0,   243,   244,     0,     0,     0,   245,
     246,   247,   248,     0,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,   319,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,     0,     0,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,     0,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,   536,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,     0,     0,   411,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,     0,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,   437,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,   135,   463,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   186,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,   197,     0,     0,     0,     0,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
       0,   222,   223,   224,     0,     0,   225,   226,     0,   227,
     228,   229,     0,     0,   230,     0,     0,     0,   231,  1017,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,   240,   241,     0,   242,     0,     0,
     243,   244,     0,     0,     0,   245,   246,   247,   248,     0,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,   319,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,     0,     0,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
       0,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,     0,     0,
     411,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,     0,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,   437,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,   135,   463,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   186,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,   197,     0,     0,
       0,  1926,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,     0,   222,   223,   224,
       0,     0,   225,   226,     0,   227,   228,   229,     0,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
     240,   241,     0,   242,     0,     0,   243,   244,     0,     0,
       0,   245,   246,   247,   248,     0,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,   319,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,     0,     0,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,     0,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,     0,     0,   411,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,     0,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,   437,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   186,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,   197,     0,     0,     0,  2256,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,     0,   222,   223,   224,     0,     0,   225,   226,
       0,   227,   228,   229,     0,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,   240,   241,     0,   242,
       0,     0,   243,   244,     0,     0,     0,   245,   246,   247,
     248,     0,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,   319,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,     0,
       0,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,     0,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
       0,     0,   411,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,     0,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
    2257,   436,     0,     0,     0,   437,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,   135,
     463,   136,   137,   138,   139,   140,  2757,     0,     0,     0,
       0,   141,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,     0,   222,
     223,   224,     0,     0,   225,   226,     0,   227,   228,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,     0,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,   319,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,   149,     0,
     150,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,   157,   158,     0,
       0,   159,     0,     0,   160,   161,     0,   162,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,     0,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,   186,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,   197,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,   205,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,   210,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,   221,     0,     0,   222,   223,   224,     0,     0,
     225,   226,     0,   227,   228,   229,     0,     0,   230,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,   240,   241,
       0,   242,     0,     0,   243,   244,     0,     0,     0,   245,
     246,   247,   248,     0,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,   254,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,   261,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,   319,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,   326,     0,   327,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   328,   329,   330,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
       0,   343,   344,   345,  2835,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,   367,     0,   368,   369,
     370,     0,     0,   371,     0,   372,     0,   373,   374,     0,
     375,   376,     0,     0,     0,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,     0,   387,   388,     0,     0,
       0,   389,   390,   391,   392,     0,     0,     0,   393,     0,
       0,     0,   394,     0,   395,   396,   397,   398,     0,   399,
     400,   401,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
     409,   410,     0,     0,   411,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,     0,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,   437,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,   445,   446,
       0,     0,   447,     0,     0,   448,     0,   449,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,   458,   459,     0,   460,   461,   462,
       0,   135,   463,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,   149,     0,   150,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,   157,   158,     0,     0,   159,     0,     0,
     160,   161,     0,   162,   163,     0,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,     0,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,   186,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,   197,     0,     0,     0,     0,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,   205,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,   210,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,   221,     0,
       0,   222,   223,   224,     0,     0,   225,   226,     0,   227,
     228,   229,     0,     0,   230,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,   240,   241,     0,   242,     0,     0,
     243,   244,     0,     0,     0,   245,   246,   247,   248,     0,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,   254,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,     0,     0,     0,   260,     0,     0,   261,
     262,     0,     0,   263,     0,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,     0,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,   319,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,   326,     0,   327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   328,
     329,   330,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,     0,   343,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,   367,     0,   368,   369,   370,     0,     0,   371,
       0,   372,     0,   373,   374,     0,   375,   376,     0,     0,
       0,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,     0,   387,   388,     0,     0,     0,   389,   390,   391,
     392,     0,     0,     0,   393,     0,     0,     0,   394,     0,
     395,   396,   397,   398,     0,   399,   400,   401,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,   409,   410,     0,     0,
     411,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,   132,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,   437,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,   445,   446,     0,     0,   447,     0,
       0,   448,     0,   449,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,     0,     0,     0,     0,     0,     0,
     458,   459,     0,   460,   461,   462,     0,   135,   463,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
     149,     0,   150,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,   157,
     158,     0,     0,   159,     0,     0,   160,   161,     0,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,     0,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,   186,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,   197,     0,     0,
       0,  2256,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,   205,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,   210,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,   221,     0,     0,   222,   223,   224,
       0,     0,   225,   226,     0,   227,   228,   229,     0,     0,
     230,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
     240,   241,     0,   242,     0,     0,   243,   244,     0,     0,
       0,   245,   246,   247,   248,     0,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,   254,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,     0,
       0,     0,   260,     0,     0,   261,   262,     0,     0,   263,
       0,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,     0,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,   319,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,   326,     0,   327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   328,   329,   330,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,     0,   343,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,   367,     0,
     368,   369,   370,     0,     0,   371,     0,   372,     0,   373,
     374,     0,   375,   376,     0,     0,     0,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,     0,   387,   388,
       0,     0,     0,   389,   390,   391,   392,     0,     0,     0,
     393,     0,     0,     0,   394,     0,   395,   396,   397,   398,
       0,   399,   400,   401,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,   409,   410,     0,     0,   411,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,     0,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,   437,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
     445,   446,     0,     0,   447,     0,     0,   448,     0,   449,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,     0,     0,     0,     0,   458,   459,     0,   460,
     461,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,   142,     0,
     143,   144,   145,   146,   147,   148,   149,     0,   150,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,   157,   158,     0,     0,   159,
       0,     0,   160,   161,     0,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,     0,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,   186,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,   197,     0,     0,     0,     0,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,   205,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,   210,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
     221,     0,     0,   222,   223,   224,     0,     0,   225,   226,
       0,   227,   228,   229,     0,     0,   230,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,   240,   241,     0,   242,
       0,     0,   243,   244,     0,     0,     0,   245,   246,   247,
     248,     0,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,   254,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,     0,     0,     0,   260,     0,
       0,   261,   262,     0,     0,   263,     0,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,     0,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,   319,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,   326,
       0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   328,   329,   330,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,     0,   343,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,   367,     0,   368,   369,   370,     0,
       0,   371,     0,   372,     0,   373,   374,     0,   375,   376,
       0,     0,     0,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,     0,   387,   388,     0,     0,     0,   389,
     390,   391,   392,     0,     0,     0,   393,     0,     0,     0,
     394,     0,   395,   396,   397,   398,     0,   399,   400,   401,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,   409,   410,
       0,     0,   411,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,     0,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,   437,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,   445,   446,     0,     0,
     447,     0,     0,   448,     0,   449,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,     0,     0,
       0,     0,   458,   459,     0,   460,   461,   462,     0,   135,
     463,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,   142,     0,   143,   144,   145,   146,
     147,   148,   149,     0,   150,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,   157,   158,     0,     0,   159,     0,     0,   160,   161,
       0,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,     0,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,   186,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,   197,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,   205,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,   210,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,   221,     0,     0,   222,
     223,   224,     0,     0,   225,   226,     0,   227,  1687,   229,
       0,     0,   230,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,   240,   241,     0,   242,     0,     0,   243,   244,
       0,     0,     0,   245,   246,   247,   248,     0,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
     254,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,     0,     0,     0,   260,     0,     0,   261,   262,     0,
       0,   263,     0,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,     0,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,  1688,   317,   318,
       0,     0,     0,   319,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,   326,     0,   327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   328,   329,   330,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,     0,     0,   343,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
     367,     0,   368,   369,   370,     0,     0,   371,     0,   372,
       0,   373,   374,     0,   375,   376,     0,     0,     0,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,     0,
     387,   388,     0,     0,     0,   389,   390,   391,   392,     0,
       0,     0,   393,     0,     0,     0,   394,     0,   395,   396,
     397,   398,     0,   399,   400,   401,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,   409,   410,     0,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,   437,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,   445,   446,     0,     0,   447,     0,     0,   448,
       0,   449,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,     0,     0,     0,     0,   458,   459,
       0,   460,   461,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
       0,     0,   143,   144,   145,   146,   147,   148,     0,     0,
    -327,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,     0,     0,     0,
       0,   159,  3699,     0,   160,   161,     0,   162,     0,     0,
       0,     0,   165,   166,   167,  3700,   169,   170,     0,   171,
     172,     0,   173,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,     0,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,     0,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,     0,     0,     0,   206,   207,
     208,     0,  -297,  -297,   209,     0,     0,  -297,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,     0,     0,     0,   222,   223,   224,     0,     0,
     225,   226,  3701,   227,   228,   229,     0,     0,     0,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,   244,     0,     0,     0,   245,
     246,   247,   248,  3702,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,     0,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,  3703,     0,     0,
     260,     0,     0,     0,   262,     0,     0,   263,  3704,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
    -282,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,  3705,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,     0,     0,   332,   333,
     334,     0,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     0,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,     0,     0,   368,     0,
     370,  -282,     0,   371,     0,     0,     0,   373,     0,     0,
     375,   376,  3706,     0,     0,     0,   378,   379,   380,   381,
     382,   383,     0,   385,   386,     0,   387,     0,     0,     0,
       0,   389,   390,   391,     0,     0,     0,     0,   393,     0,
       0,     0,   394,     0,     0,   396,     0,   398,     0,   399,
       0,     0,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
       0,   410,     0,     0,     0,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,     0,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,     0,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,     0,     0,
       0,     0,   447,     0,     0,   448,     0,     0,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
    -282,     0,     0,     0,   458,     0,     0,   460,     0,   462,
       0,   135,   463,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,     0,     0,   143,   144,
     145,   146,   147,   148,     0,     0,  -327,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,     0,     0,     0,     0,   159,  3699,     0,
     160,   161,     0,   162,     0,     0,     0,     0,   165,   166,
     167,  3700,   169,   170,     0,   171,   172,     0,   173,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,     0,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,     0,     0,     0,     0,     0,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,     0,     0,     0,   206,   207,   208,     0,  -318,     0,
     209,     0,     0,  -318,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,     0,     0,
       0,   222,   223,   224,     0,     0,   225,   226,  3701,   227,
     228,   229,     0,     0,     0,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,   244,     0,     0,     0,   245,   246,   247,   248,  3702,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,     0,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,  3703,     0,     0,   260,     0,     0,     0,
     262,     0,     0,   263,  3704,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,  -282,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,  3705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,     0,     0,   332,   333,   334,     0,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     0,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,     0,     0,   368,     0,   370,  -282,     0,   371,
       0,     0,     0,   373,     0,     0,   375,   376,  3706,     0,
       0,     0,   378,   379,   380,   381,   382,   383,     0,   385,
     386,     0,   387,     0,     0,     0,     0,   389,   390,   391,
       0,     0,     0,     0,   393,     0,     0,     0,   394,     0,
       0,   396,     0,   398,     0,   399,     0,     0,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,     0,   410,     0,     0,
       0,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,     0,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,     0,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,     0,     0,     0,     0,   447,     0,
       0,   448,     0,     0,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,  -318,     0,  -282,     0,     0,     0,
     458,     0,     0,   460,     0,   462,     0,   135,   463,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,     0,     0,   143,   144,   145,   146,   147,   148,
       0,     0,  -327,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,     0,
       0,     0,     0,   159,  3699,     0,   160,   161,     0,   162,
       0,     0,     0,     0,   165,   166,   167,  3700,   169,   170,
       0,   171,   172,     0,   173,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,     0,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,     0,     0,     0,
       0,     0,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,     0,     0,     0,
     206,   207,   208,     0,  -315,     0,   209,     0,     0,  -315,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,     0,     0,     0,   222,   223,   224,
       0,     0,   225,   226,  3701,   227,   228,   229,     0,     0,
       0,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,   244,     0,     0,
       0,   245,   246,   247,   248,  3702,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,     0,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,  3703,
       0,     0,   260,     0,     0,     0,   262,     0,     0,   263,
    3704,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,  -282,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,  3705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,     0,     0,
     332,   333,   334,     0,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     0,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,     0,     0,
     368,     0,   370,  -282,     0,   371,     0,     0,     0,   373,
       0,     0,   375,   376,  3706,     0,     0,     0,   378,   379,
     380,   381,   382,   383,     0,   385,   386,     0,   387,     0,
       0,     0,     0,   389,   390,   391,     0,     0,     0,     0,
     393,     0,     0,     0,   394,     0,     0,   396,     0,   398,
       0,   399,     0,     0,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,     0,   410,     0,     0,     0,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,     0,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,     0,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
       0,     0,     0,     0,   447,     0,     0,   448,     0,     0,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
    -315,     0,  -282,     0,     0,     0,   458,     0,     0,   460,
       0,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,     0,     0,
     143,   144,   145,   146,   147,   148,     0,     0,  -327,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,     0,     0,     0,     0,   159,
    3699,     0,   160,   161,     0,   162,     0,     0,     0,     0,
     165,   166,   167,  3700,   169,   170,     0,   171,   172,     0,
     173,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,     0,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,     0,     0,     0,     0,     0,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,     0,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,  4014,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
       0,     0,     0,   222,   223,   224,     0,     0,   225,   226,
    3701,   227,   228,   229,     0,     0,     0,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,     0,   241,     0,     0,
       0,     0,     0,   244,     0,     0,     0,   245,   246,   247,
     248,  3702,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,     0,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,  3703,     0,     0,   260,     0,
       0,     0,   262,     0,     0,   263,  3704,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,  -282,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,  3705,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,     0,     0,   332,   333,   334,     0,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,     0,     0,   368,     0,   370,  -282,
       0,   371,     0,     0,     0,   373,     0,     0,   375,   376,
    3706,     0,     0,     0,   378,   379,   380,   381,   382,   383,
       0,   385,   386,     0,   387,     0,     0,     0,     0,   389,
     390,   391,     0,     0,     0,     0,   393,     0,     0,     0,
     394,     0,     0,   396,     0,   398,     0,   399,     0,     0,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,     0,   410,
       0,     0,     0,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,     0,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,     0,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,     0,     0,     0,     0,
     447,     0,     0,   448,     0,     0,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,  -282,     0,
       0,     0,   458,     0,     0,   460,     0,   462,     0,   135,
     463,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,     0,     0,   143,   144,   145,   146,
     147,   148,     0,     0,  -327,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,     0,     0,     0,     0,   159,  3699,     0,   160,   161,
       0,   162,     0,     0,     0,     0,   165,   166,   167,  3700,
     169,   170,     0,   171,   172,     0,   173,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,     0,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,     0,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,     0,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,  -320,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,     0,     0,     0,   222,
     223,   224,     0,     0,   225,   226,  3701,   227,   228,   229,
       0,     0,     0,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,     0,   241,     0,     0,     0,     0,     0,   244,
       0,     0,     0,   245,   246,   247,   248,  3702,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
       0,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,  3703,     0,     0,   260,     0,     0,     0,   262,     0,
       0,   263,  3704,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,  -282,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,  3705,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
       0,     0,   332,   333,   334,     0,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     0,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
       0,     0,   368,     0,   370,  -282,     0,   371,     0,     0,
       0,   373,     0,     0,   375,   376,  3706,     0,     0,     0,
     378,   379,   380,   381,   382,   383,     0,   385,   386,     0,
     387,     0,     0,     0,     0,   389,   390,   391,     0,     0,
       0,     0,   393,     0,     0,     0,   394,     0,     0,   396,
       0,   398,     0,   399,     0,     0,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,     0,   410,     0,     0,     0,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,     0,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,     0,     0,     0,     0,   447,     0,     0,   448,
       0,     0,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,  -282,     0,     0,     0,   458,     0,
       0,   460,     0,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
       0,     0,   143,   144,   145,   146,   147,   148,     0,     0,
    -327,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,     0,     0,     0,
       0,   159,  3699,     0,   160,   161,     0,   162,     0,     0,
       0,     0,   165,   166,   167,  3700,   169,   170,     0,   171,
     172,     0,   173,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,     0,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,     0,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,     0,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,  4120,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,     0,     0,     0,   222,   223,   224,     0,     0,
     225,   226,  3701,   227,   228,   229,     0,     0,     0,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,   244,     0,     0,     0,   245,
     246,   247,   248,  3702,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,     0,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,  3703,     0,     0,
     260,     0,     0,     0,   262,     0,     0,   263,  3704,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
    -282,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,  3705,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,     0,     0,   332,   333,
     334,     0,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     0,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,     0,     0,   368,     0,
     370,  -282,     0,   371,     0,     0,     0,   373,     0,     0,
     375,   376,  3706,     0,     0,     0,   378,   379,   380,   381,
     382,   383,     0,   385,   386,     0,   387,     0,     0,     0,
       0,   389,   390,   391,     0,     0,     0,     0,   393,     0,
       0,     0,   394,     0,     0,   396,     0,   398,     0,   399,
       0,     0,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
       0,   410,     0,     0,     0,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,     0,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,     0,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,     0,     0,
       0,     0,   447,     0,     0,   448,     0,     0,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
    -282,     0,     0,     0,   458,     0,     0,   460,     0,   462,
       0,   135,   463,   136,   137,   138,   139,   140,     0,     0,
       0,     0,     0,   141,     0,     0,     0,     0,   143,   144,
     145,   146,   147,   148,     0,     0,  -327,     0,     0,     0,
     151,     0,     0,     0,   152,     0,     0,   153,   154,   155,
       0,   156,     0,     0,     0,     0,     0,   159,  3699,     0,
     160,   161,     0,   162,     0,     0,     0,     0,   165,   166,
     167,  3700,   169,   170,     0,   171,   172,     0,   173,     0,
     175,     0,   177,   178,   179,   180,     0,   181,   182,     0,
     183,   184,   185,     0,   187,     0,   188,     0,     0,   189,
       0,     0,   190,     0,     0,     0,   191,     0,     0,     0,
     192,   193,   194,     0,     0,   195,     0,     0,     0,     0,
     196,     0,     0,     0,     0,     0,   198,     0,   199,     0,
       0,     0,   200,     0,   201,   202,   203,   204,     0,     0,
       0,     0,     0,     0,   206,   207,   208,     0,     0,     0,
     209,     0,     0,  4166,   211,     0,   212,   213,   214,     0,
       0,   215,   216,     0,   217,   218,   219,   220,     0,     0,
       0,   222,   223,   224,     0,     0,   225,   226,  3701,   227,
     228,   229,     0,     0,     0,     0,     0,     0,   231,     0,
     232,     0,   233,     0,   234,   235,   236,   237,   238,     0,
     239,     0,     0,     0,     0,   241,     0,     0,     0,     0,
       0,   244,     0,     0,     0,   245,   246,   247,   248,  3702,
       0,   249,   250,   251,     0,     0,   252,     0,     0,     0,
       0,   253,     0,     0,     0,     0,   255,     0,   256,   257,
       0,   258,   259,  3703,     0,     0,   260,     0,     0,     0,
     262,     0,     0,   263,  3704,     0,   264,   265,     0,     0,
       0,     0,     0,   266,   267,     0,   268,     0,   269,     0,
     270,   271,     0,     0,     0,     0,  -282,     0,     0,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,     0,   285,   286,   287,     0,   288,   289,   290,
     291,     0,   292,   293,     0,     0,     0,     0,   294,   295,
     296,   297,   298,   299,     0,     0,   300,   301,     0,   302,
       0,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,   313,   314,     0,     0,   315,   316,
     317,   318,     0,     0,     0,     0,   320,     0,     0,     0,
       0,   321,   322,   323,     0,   324,   325,  3705,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     329,   330,     0,     0,   332,   333,   334,     0,   336,   337,
     338,   339,   340,   341,     0,     0,     0,     0,   344,   345,
       0,   346,     0,   347,   348,   349,   350,   351,     0,   352,
     353,   354,     0,     0,   355,     0,     0,     0,   356,   357,
     358,   359,   360,     0,     0,   361,   362,   363,   364,   365,
       0,   366,     0,     0,   368,     0,   370,  -282,     0,   371,
       0,     0,     0,   373,     0,     0,   375,   376,  3706,     0,
       0,     0,   378,   379,   380,   381,   382,   383,     0,   385,
     386,     0,   387,     0,     0,     0,     0,   389,   390,   391,
       0,     0,     0,     0,   393,     0,     0,     0,   394,     0,
       0,   396,     0,   398,     0,   399,     0,     0,   402,   403,
       0,     0,     0,     0,     0,     0,   404,   405,     0,   406,
       0,     0,   407,     0,     0,   408,     0,   410,     0,     0,
       0,   412,     0,   413,   414,   415,   416,   417,   418,     0,
       0,   419,   420,   421,   422,     0,   423,   424,     0,     0,
     425,   426,   427,   428,     0,     0,   429,   430,     0,   431,
     432,   433,   434,     0,     0,     0,     0,     0,   435,   436,
       0,     0,     0,     0,   438,   439,   440,     0,   441,   442,
       0,   443,   444,     0,     0,     0,     0,     0,   447,     0,
       0,   448,     0,     0,     0,   450,   451,     0,     0,     0,
       0,     0,     0,   452,     0,     0,   453,     0,     0,     0,
     454,   455,   456,   457,     0,     0,  -282,     0,     0,     0,
     458,     0,     0,   460,     0,   462,     0,   135,   463,   136,
     137,   138,   139,   140,     0,     0,     0,     0,     0,   141,
       0,     0,     0,     0,   143,   144,   145,   146,   147,   148,
       0,     0,  -327,     0,     0,     0,   151,     0,     0,     0,
     152,     0,     0,   153,   154,   155,     0,   156,     0,     0,
       0,     0,     0,   159,  3699,     0,   160,   161,     0,   162,
       0,     0,     0,     0,   165,   166,   167,  3700,   169,   170,
       0,   171,   172,     0,   173,     0,   175,     0,   177,   178,
     179,   180,     0,   181,   182,     0,   183,   184,   185,     0,
     187,     0,   188,     0,     0,   189,     0,     0,   190,     0,
       0,     0,   191,     0,     0,     0,   192,   193,   194,     0,
       0,   195,     0,     0,     0,     0,   196,     0,     0,     0,
       0,     0,   198,     0,   199,     0,     0,     0,   200,     0,
     201,   202,   203,   204,     0,     0,     0,     0,     0,     0,
     206,   207,   208,     0,     0,     0,   209,     0,     0,  -301,
     211,     0,   212,   213,   214,     0,     0,   215,   216,     0,
     217,   218,   219,   220,     0,     0,     0,   222,   223,   224,
       0,     0,   225,   226,  3701,   227,   228,   229,     0,     0,
       0,     0,     0,     0,   231,     0,   232,     0,   233,     0,
     234,   235,   236,   237,   238,     0,   239,     0,     0,     0,
       0,   241,     0,     0,     0,     0,     0,   244,     0,     0,
       0,   245,   246,   247,   248,  3702,     0,   249,   250,   251,
       0,     0,   252,     0,     0,     0,     0,   253,     0,     0,
       0,     0,   255,     0,   256,   257,     0,   258,   259,  3703,
       0,     0,   260,     0,     0,     0,   262,     0,     0,   263,
    3704,     0,   264,   265,     0,     0,     0,     0,     0,   266,
     267,     0,   268,     0,   269,     0,   270,   271,     0,     0,
       0,     0,  -282,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,     0,   285,
     286,   287,     0,   288,   289,   290,   291,     0,   292,   293,
       0,     0,     0,     0,   294,   295,   296,   297,   298,   299,
       0,     0,   300,   301,     0,   302,     0,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
     313,   314,     0,     0,   315,   316,   317,   318,     0,     0,
       0,     0,   320,     0,     0,     0,     0,   321,   322,   323,
       0,   324,   325,  3705,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   329,   330,     0,     0,
     332,   333,   334,     0,   336,   337,   338,   339,   340,   341,
       0,     0,     0,     0,   344,   345,     0,   346,     0,   347,
     348,   349,   350,   351,     0,   352,   353,   354,     0,     0,
     355,     0,     0,     0,   356,   357,   358,   359,   360,     0,
       0,   361,   362,   363,   364,   365,     0,   366,     0,     0,
     368,     0,   370,  -282,     0,   371,     0,     0,     0,   373,
       0,     0,   375,   376,  3706,     0,     0,     0,   378,   379,
     380,   381,   382,   383,     0,   385,   386,     0,   387,     0,
       0,     0,     0,   389,   390,   391,     0,     0,     0,     0,
     393,     0,     0,     0,   394,     0,     0,   396,     0,   398,
       0,   399,     0,     0,   402,   403,     0,     0,     0,     0,
       0,     0,   404,   405,     0,   406,     0,     0,   407,     0,
       0,   408,     0,   410,     0,     0,     0,   412,     0,   413,
     414,   415,   416,   417,   418,     0,     0,   419,   420,   421,
     422,     0,   423,   424,     0,     0,   425,   426,   427,   428,
       0,     0,   429,   430,     0,   431,   432,   433,   434,     0,
       0,     0,     0,     0,   435,   436,     0,     0,     0,     0,
     438,   439,   440,     0,   441,   442,     0,   443,   444,     0,
       0,     0,     0,     0,   447,     0,     0,   448,     0,     0,
       0,   450,   451,     0,     0,     0,     0,     0,     0,   452,
       0,     0,   453,     0,     0,     0,   454,   455,   456,   457,
       0,     0,  -282,     0,     0,     0,   458,     0,     0,   460,
       0,   462,     0,   135,   463,   136,   137,   138,   139,   140,
       0,     0,     0,     0,     0,   141,     0,     0,     0,     0,
     143,   144,   145,   146,   147,   148,     0,     0,  -327,     0,
       0,     0,   151,     0,     0,     0,   152,     0,     0,   153,
     154,   155,     0,   156,     0,     0,     0,     0,     0,   159,
    3699,     0,   160,   161,     0,   162,     0,     0,     0,     0,
     165,   166,   167,  3700,   169,   170,     0,   171,   172,     0,
     173,     0,   175,     0,   177,   178,   179,   180,     0,   181,
     182,     0,   183,   184,   185,     0,   187,     0,   188,     0,
       0,   189,     0,     0,   190,     0,     0,     0,   191,     0,
       0,     0,   192,   193,   194,     0,     0,   195,     0,     0,
       0,     0,   196,     0,     0,     0,     0,     0,   198,     0,
     199,     0,     0,     0,   200,     0,   201,   202,   203,   204,
       0,     0,     0,     0,     0,     0,   206,   207,   208,     0,
       0,     0,   209,     0,     0,     0,   211,     0,   212,   213,
     214,     0,     0,   215,   216,     0,   217,   218,   219,   220,
       0,     0,     0,   222,   223,   224,     0,     0,   225,   226,
    3701,   227,   228,   229,     0,     0,     0,     0,     0,     0,
     231,     0,   232,     0,   233,     0,   234,   235,   236,   237,
     238,     0,   239,     0,     0,     0,     0,   241,     0,     0,
       0,     0,     0,   244,     0,     0,     0,   245,   246,   247,
     248,  3702,     0,   249,   250,   251,     0,     0,   252,     0,
       0,     0,     0,   253,     0,     0,     0,     0,   255,     0,
     256,   257,     0,   258,   259,  3703,     0,     0,   260,     0,
       0,     0,   262,     0,     0,   263,  3704,     0,   264,   265,
       0,     0,     0,     0,     0,   266,   267,     0,   268,     0,
     269,     0,   270,   271,     0,     0,     0,     0,  -282,     0,
       0,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,     0,   285,   286,   287,     0,   288,
     289,   290,   291,     0,   292,   293,     0,     0,     0,     0,
     294,   295,   296,   297,   298,   299,     0,     0,   300,   301,
       0,   302,     0,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,   313,   314,     0,     0,
     315,   316,   317,   318,     0,     0,     0,     0,   320,     0,
       0,     0,     0,   321,   322,   323,     0,   324,   325,  3705,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   329,   330,     0,     0,   332,   333,   334,     0,
     336,   337,   338,   339,   340,   341,     0,     0,     0,     0,
     344,   345,     0,   346,     0,   347,   348,   349,   350,   351,
       0,   352,   353,   354,     0,     0,   355,     0,     0,     0,
     356,   357,   358,   359,   360,     0,     0,   361,   362,   363,
     364,   365,     0,   366,     0,     0,   368,     0,   370,  -282,
       0,   371,     0,     0,     0,   373,     0,     0,   375,   376,
    3706,     0,     0,     0,   378,   379,   380,   381,   382,   383,
       0,   385,   386,     0,   387,     0,     0,     0,     0,   389,
     390,   391,     0,     0,     0,     0,   393,     0,     0,     0,
     394,     0,     0,   396,     0,   398,     0,   399,     0,     0,
     402,   403,     0,     0,     0,     0,     0,     0,   404,   405,
       0,   406,     0,     0,   407,     0,     0,   408,     0,   410,
       0,     0,     0,   412,     0,   413,   414,   415,   416,   417,
     418,     0,     0,   419,   420,   421,   422,     0,   423,   424,
       0,     0,   425,   426,   427,   428,     0,     0,   429,   430,
       0,   431,   432,   433,   434,     0,     0,     0,     0,     0,
     435,   436,     0,     0,     0,     0,   438,   439,   440,     0,
     441,   442,     0,   443,   444,     0,     0,     0,     0,     0,
     447,     0,     0,   448,     0,     0,     0,   450,   451,     0,
       0,     0,     0,     0,     0,   452,     0,     0,   453,     0,
       0,     0,   454,   455,   456,   457,     0,     0,  -282,     0,
       0,     0,   458,     0,     0,   460,     0,   462,     0,   135,
     463,   136,   137,   138,   139,   140,     0,     0,     0,     0,
       0,   141,     0,     0,     0,     0,   143,   144,   145,   146,
     147,   148,     0,     0,  -327,     0,     0,     0,   151,     0,
       0,     0,   152,     0,     0,   153,   154,   155,     0,   156,
       0,     0,     0,     0,     0,   159,  3699,     0,   160,   161,
       0,   162,     0,     0,     0,     0,   165,   166,   167,  3700,
     169,   170,     0,   171,   172,     0,   173,     0,   175,     0,
     177,   178,   179,   180,     0,   181,   182,     0,   183,   184,
     185,     0,   187,     0,   188,     0,     0,   189,     0,     0,
     190,     0,     0,     0,   191,     0,     0,     0,   192,   193,
     194,     0,     0,   195,     0,     0,     0,     0,   196,     0,
       0,     0,     0,     0,   198,     0,   199,     0,     0,     0,
     200,     0,   201,   202,   203,   204,     0,     0,     0,     0,
       0,     0,   206,   207,   208,     0,     0,     0,   209,     0,
       0,     0,   211,     0,   212,   213,   214,     0,     0,   215,
     216,     0,   217,   218,   219,   220,     0,     0,     0,   222,
     223,   224,     0,     0,   225,   226,  3701,   227,   228,   229,
       0,     0,     0,     0,     0,     0,   231,     0,   232,     0,
     233,     0,   234,   235,   236,   237,   238,     0,   239,     0,
       0,     0,     0,   241,     0,     0,     0,     0,     0,   244,
       0,     0,     0,   245,   246,   247,   248,  3702,     0,   249,
     250,   251,     0,     0,   252,     0,     0,     0,     0,   253,
       0,     0,     0,     0,   255,     0,   256,   257,     0,   258,
     259,  3703,     0,     0,   260,     0,     0,     0,   262,     0,
       0,   263,  3704,     0,   264,   265,     0,     0,     0,     0,
       0,   266,   267,     0,   268,     0,   269,     0,   270,   271,
       0,     0,     0,     0,  -282,     0,     0,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
       0,   285,   286,   287,     0,   288,   289,   290,   291,     0,
     292,   293,     0,     0,     0,     0,   294,   295,   296,   297,
     298,   299,     0,     0,   300,   301,     0,   302,     0,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,   313,   314,     0,     0,   315,   316,   317,   318,
       0,     0,     0,     0,   320,     0,     0,     0,     0,   321,
     322,   323,     0,   324,   325,  3705,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   329,   330,
       0,     0,   332,   333,   334,     0,   336,   337,   338,   339,
     340,   341,     0,     0,     0,     0,   344,   345,     0,   346,
       0,   347,   348,   349,   350,   351,     0,   352,   353,   354,
       0,     0,   355,     0,     0,     0,   356,   357,   358,   359,
     360,     0,     0,   361,   362,   363,   364,   365,     0,   366,
       0,     0,   368,     0,   370,  -282,     0,   371,     0,     0,
       0,   373,     0,     0,   375,   376,  3706,     0,     0,     0,
     378,   379,   380,   381,   382,   383,     0,   385,   386,     0,
     387,     0,     0,     0,     0,   389,   390,   391,     0,     0,
       0,     0,   393,     0,     0,     0,   394,     0,     0,   396,
       0,   398,     0,   399,     0,     0,   402,   403,     0,     0,
       0,     0,     0,     0,   404,   405,     0,   406,     0,     0,
     407,     0,     0,   408,     0,   410,     0,     0,     0,   412,
       0,   413,   414,   415,   416,   417,   418,     0,     0,   419,
     420,   421,   422,     0,   423,   424,     0,     0,   425,   426,
     427,   428,     0,     0,   429,   430,     0,   431,   432,   433,
     434,     0,     0,     0,     0,     0,   435,   436,     0,     0,
       0,     0,   438,   439,   440,     0,   441,   442,     0,   443,
     444,     0,     0,     0,     0,     0,   447,     0,     0,  4017,
       0,     0,     0,   450,   451,     0,     0,     0,     0,     0,
       0,   452,     0,     0,   453,     0,     0,     0,   454,   455,
     456,   457,     0,     0,  -282,     0,     0,     0,   458,     0,
       0,   460,     0,   462,     0,   135,   463,   136,   137,   138,
     139,   140,     0,     0,     0,     0,     0,   141,     0,     0,
       0,     0,   143,   144,   145,   146,   147,   148,     0,     0,
       0,     0,     0,     0,   151,     0,     0,     0,   152,     0,
       0,   153,   154,   155,     0,   156,     0,     0,     0,     0,
       0,   159,     0,     0,   160,   161,     0,   162,     0,     0,
       0,     0,   165,   166,   167,     0,   169,   170,     0,   171,
     172,     0,   173,     0,   175,     0,   177,   178,   179,   180,
       0,   181,   182,     0,   183,   184,   185,     0,   187,     0,
     188,     0,     0,   189,     0,     0,   190,     0,     0,     0,
     191,     0,     0,     0,   192,   193,   194,     0,     0,   195,
       0,     0,     0,     0,   196,     0,     0,     0,     0,     0,
     198,     0,   199,     0,     0,     0,   200,     0,   201,   202,
     203,   204,     0,     0,     0,     0,     0,     0,   206,   207,
     208,     0,     0,     0,   209,     0,     0,     0,   211,     0,
     212,   213,   214,     0,     0,   215,   216,     0,   217,   218,
     219,   220,     0,     0,     0,   222,   223,   224,     0,     0,
     225,   226,     0,   227,   228,   229,     0,     0,     0,     0,
       0,     0,   231,     0,   232,     0,   233,     0,   234,   235,
     236,   237,   238,     0,   239,     0,     0,     0,     0,   241,
       0,     0,     0,     0,     0,   244,     0,     0,     0,   245,
     246,   247,   248,     0,     0,   249,   250,   251,     0,     0,
     252,     0,     0,     0,     0,   253,     0,     0,     0,     0,
     255,     0,   256,   257,     0,   258,   259,     0,     0,     0,
     260,     0,     0,     0,   262,     0,     0,   263,     0,     0,
     264,   265,     0,     0,     0,     0,     0,   266,   267,     0,
     268,     0,   269,     0,   270,   271,     0,     0,     0,     0,
       0,     0,     0,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,     0,   285,   286,   287,
       0,   288,   289,   290,   291,     0,   292,   293,     0,     0,
       0,     0,   294,   295,   296,   297,   298,   299,     0,     0,
     300,   301,     0,   302,     0,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,   313,   314,
       0,     0,   315,   316,   317,   318,     0,     0,     0,     0,
     320,     0,     0,     0,     0,   321,   322,   323,     0,   324,
     325,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   329,   330,     0,     0,   332,   333,
     334,     0,   336,   337,   338,   339,   340,   341,     0,     0,
       0,     0,   344,   345,     0,   346,     0,   347,   348,   349,
     350,   351,     0,   352,   353,   354,     0,     0,   355,     0,
       0,     0,   356,   357,   358,   359,   360,     0,     0,   361,
     362,   363,   364,   365,     0,   366,     0,     0,   368,     0,
     370,     0,     0,   371,     0,     0,     0,   373,     0,     0,
     375,   376,     0,     0,     0,     0,   378,   379,   380,   381,
     382,   383,     0,   385,   386,     0,   387,     0,     0,     0,
       0,   389,   390,   391,     0,     0,     0,     0,   393,     0,
       0,     0,   394,     0,     0,   396,     0,   398,     0,   399,
       0,     0,   402,   403,     0,     0,     0,     0,     0,     0,
     404,   405,     0,   406,     0,     0,   407,     0,     0,   408,
       0,   410,     0,     0,     0,   412,     0,   413,   414,   415,
     416,   417,   418,     0,     0,   419,   420,   421,   422,     0,
     423,   424,     0,     0,   425,   426,   427,   428,     0,     0,
     429,   430,     0,   431,   432,   433,   434,     0,     0,     0,
       0,     0,   435,   436,     0,     0,     0,     0,   438,   439,
     440,     0,   441,   442,     0,   443,   444,     0,     0,     0,
       0,     0,   447,     0,     0,   448,     0,     0,     0,   450,
     451,     0,     0,     0,     0,     0,     0,   452,     0,     0,
     453,     0,     0,     0,   454,   455,   456,   457,     0,     0,
       0,     0,     0,     0,   458,     0,     0,   460,     0,   462,
       0,     0,   463
};

#define yypact_value_is_default(yystate) \
  ((yystate) == (-3560))

#define yytable_value_is_error(yytable_value) \
  YYID (0)

static const yytype_int16 yycheck[] =
{
       6,   621,   622,   612,   549,   549,   933,  1115,   934,    20,
    1115,   571,   121,    19,   654,   655,    22,   850,    29,  1736,
     659,  1603,  1021,  2375,    35,    31,     6,   639,  1062,  1706,
     585,  1086,    38,  1412,   494,    41,  1015,  1016,  1313,    45,
     876,  1239,   678,   874,  1723,   898,  1954,    53,  2305,   769,
    1375,   691,  1410,  1137,  2226,  2259,  2260,  2261,  2182,  1178,
    1144,  2019,   898,  1053,  3058,  2696,  2024,  2644,   899,  1998,
     938,   711,  1864,  2494,   713,  1245,  2480,   716,  2293,  1723,
    1393,  1793,    22,   723,   724,   725,  2827,    93,  2111,  1917,
    1145,  1146,     4,  1401,  1149,  1150,  1151,  1152,   938,  1154,
    1155,  1156,  1157,  1158,  1159,  1160,  1161,  1979,   626,   115,
    2370,   117,  1862,  3064,   120,   121,   122,  1817,  1818,   731,
     732,   733,  1979,  1865,  2286,  2249,  2154,  1869,  1324,   608,
     609,   743,  2294,   742,  1834,  1845,  3273,   117,  1880,  1383,
     120,  1454,    18,  2270,  2271,    33,  1342,   833,  1890,    16,
      18,  1851,  1852,    93,  1350,  1351,  3121,  3122,  2349,     9,
    3125,  1862,    15,    16,    20,    24,    46,  1867,  1868,  2949,
    1870,  3082,  2508,  1873,  1874,    59,  2512,  1877,    28,  3144,
      70,    50,  1882,   127,    34,  3150,  1886,  1887,  1888,  1889,
    1734,  3317,    29,  1893,   142,  1895,    15,    16,    15,    16,
      57,  1901,    58,    59,  1904,  2511,  1906,    15,    16,   103,
      62,  2163,    73,    16,    74,  2105,   771,  2334,  2335,  3320,
      15,    16,  1836,   900,    15,    16,    68,   179,   914,  1979,
    1940,  2338,  2456,  3735,  2352,  1945,    50,  1854,    64,  2747,
      24,  1951,  1952,    68,   256,    55,  1956,   370,  2002,    65,
      24,    18,    58,    59,   184,    24,   205,   214,   351,    61,
     253,  3820,   214,  1963,  1964,  1965,  1966,   340,   298,   238,
      10,   192,    79,   828,  1393,  3269,   327,   153,  1979,   222,
     130,   149,   149,   326,   105,   153,   119,  2239,   231,    73,
      15,    16,    15,    16,     8,   119,   431,   424,    15,    16,
     940,   238,   448,   214,   448,   348,  1968,   448,   121,   166,
      22,   485,   249,   170,   142,  1808,   149,   448,   254,    15,
      16,    12,   519,  2631,   181,   149,    15,    16,    12,   260,
     181,  2448,  2449,   158,   120,  1454,   491,    15,    16,   260,
     183,  3492,    19,    15,    16,    15,    16,    15,    16,  2278,
     813,   550,   466,  3855,  2563,   488,   183,   448,   337,   510,
     271,   220,   513,   119,    15,    16,   160,   151,     8,   519,
     479,  3497,    39,   993,   994,   995,   539,  3528,   180,   240,
     218,   481,   151,   167,   236,   518,   153,   146,   183,    29,
      35,  3356,   186,   149,    15,    16,   287,   218,   157,   562,
    3365,    20,   502,   382,   231,   604,   515,  2715,   559,   166,
     341,   254,   263,   610,    33,   570,  1052,   116,   532,   362,
    3385,   357,   123,   142,    24,  3390,   438,    35,    47,  1065,
      73,    15,    16,    15,    16,   294,   220,  1363,   368,    58,
      59,   132,    67,    20,   230,   302,   220,   124,   132,   161,
     624,   220,    15,    16,   917,  1175,    33,   603,   271,   603,
     174,   430,   603,   156,   271,   422,   607,    45,   519,    67,
      47,  3608,   603,   479,  2678,   481,   611,   176,   605,  3430,
     603,    58,    59,   962,   395,    15,    16,  1318,  2703,  3483,
    1321,  2245,   498,   544,  2292,  1326,   502,   434,    70,  4058,
    4059,  1880,   575,   356,   271,   511,   359,  2711,  2765,   515,
     294,   517,   603,    15,    16,  1383,   358,   323,   611,   562,
     294,  1352,  1353,  1836,   530,   294,  2354,    15,    16,   339,
    2358,  1140,   453,   358,  1653,   465,  1148,   356,   395,  1375,
     359,  2401,   491,  1383,  2372,  2373,  2482,  1233,   356,  1862,
     334,   359,   558,  1165,  2382,  2746,   340,   202,  2749,  2750,
     429,   356,  2637,  3071,   359,   356,   372,  2496,   359,   268,
     576,   340,  1258,   603,  1034,  1035,  1631,  2768,  3529,   585,
    2408,   587,   384,   399,  2456,  1453,   579,  1642,  2338,  2299,
    1645,  1787,   598,   599,   202,  1055,   355,   240,   604,  2456,
     606,  1909,   608,   609,  1064,    15,    16,   613,   614,   561,
    3241,   106,   618,  1453,   109,   429,  1076,  1077,  1078,   599,
     220,   199,   628,   629,   630,  1085,  2744,  2851,   634,  2736,
     578,   356,   399,   356,   359,  1625,   359,  2338,   395,   356,
     466,    62,   359,   166,   343,  4147,   386,  2357,   500,  2359,
    2478,  2603,  2604,  2605,   530,  1968,  2366,   507,   598,   768,
     356,   604,  1217,   359,   604,  2365,  1979,   356,  3794,  2379,
     359,  1348,   678,  1393,  2564,  2385,   526,  2377,   356,   623,
     574,   359,   542,   533,   356,   569,   356,   359,   356,   359,
    2400,   359,   548,   530,   294,  3606,  2648,  2649,  2650,  3650,
    2872,   581,   149,  2317,  1183,   356,  2456,  2251,   359,   559,
    3847,   495,  2422,   603,   581,   603,  3817,  1836,  1962,  2336,
     581,    15,    16,  2652,  2653,  1280,   495,   530,    15,    16,
     736,  3511,   738,  2850,  1454,   356,   605,   590,   359,  2493,
     340,   609,   609,   562,  2772,   485,   605,   137,   605,   551,
     578,   604,   605,  1439,  2454,  2456,   762,   763,   764,   518,
     766,   767,   768,  1242,   770,   771,   875,  1322,   589,  3105,
    2447,   590,   356,   590,   356,   359,   609,   359,  1257,    15,
      16,  2990,   590,   763,  1302,   609,   605,   767,  2450,  2993,
     770,   575,  2285,   356,   534,   590,   359,  3103,  3104,   590,
     608,  3752,   808,  3139,   610,  3111,   575,   254,  3114,  3115,
     605,  3147,   818,   604,   605,   236,   388,   484,  3154,   586,
    3957,   605,   828,   829,  2996,  3131,   356,   833,  3032,   359,
    2188,    15,    16,  3048,   574,  3095,   605,  3052,   505,  3145,
      15,    16,   541,  1387,  3150,  3151,  3152,  3153,   605,  1968,
      15,    16,  3061,   609,   356,   556,  3821,   359,  3823,   578,
    1979,   123,  3603,   441,   531,   590,   491,   590,   356,   875,
    2587,   359,   395,   590,   519,    15,    16,  3068,   818,   604,
     605,   604,   605,   576,  3008,   102,  3048,   604,   605,   829,
    3052,  3312,  2752,   491,   590,   495,   539,   169,   149,    15,
      16,   590,   117,    15,    16,  2622,  2704,  2705,   914,   605,
     822,   519,   590,  1549,   335,   604,   605,    61,   590,   562,
     590,    77,   590,  2783,  2999,   775,   604,   605,   934,   548,
    1783,  2791,   604,   605,  2794,   605,  3887,   605,   510,   590,
    2876,   153,    15,    16,  1462,  1776,   356,  1783,   179,   359,
     166,    15,    16,  2882,   605,  1786,   962,    42,  1789,  1790,
    1813,   533,   224,   304,   136,  3330,  2645,  3961,   131,   590,
      33,   548,  2351,  2352,  2834,   575,  3851,  1813,   357,  2851,
      81,    73,  2694,   214,   605,   120,  2736,   204,    15,    16,
     448,   568,   569,  2048,  2851,  2270,  2271,    15,    16,    11,
    2821,  2645,   149,   254,  2317,  2004,   590,  1013,   590,    15,
      16,  1017,   254,  2805,   229,    15,    16,   287,  1127,  3592,
    3043,   605,  3426,   605,   254,  2338,   199,   590,   523,  1649,
      51,   526,  1644,    15,    16,  2736,    18,   560,  2208,   371,
      61,  2125,   605,   584,    15,    16,  1052,    40,    15,    16,
      15,    16,  3004,   621,   622,  1164,   372,   375,   448,  1065,
     590,   271,   356,   413,  2806,   359,   487,   214,   241,   356,
     342,   442,   359,  1013,  3201,   605,   581,  1017,  3499,   500,
     270,  1701,   605,  2279,   416,  2762,   138,  1723,   590,  3304,
    3305,   265,    50,  3297,  1962,   230,  2404,  2131,  2132,  2297,
     605,  2851,   590,   605,  1659,    15,    16,   160,   120,  1115,
     183,   199,    15,    16,  2696,   357,  1836,   605,  2226,   346,
     356,  1127,  1962,   359,   394,    15,    16,   357,  3057,   354,
    3703,  3704,   579,   186,  2124,   448,   486,  2450,   131,  1248,
     303,  2196,   597,  2456,  2134,   603,   363,   321,   240,   604,
    2851,    15,    16,   241,   181,   372,    15,    16,  1164,  1714,
    1715,   378,   609,  1169,    15,    16,   587,  3744,  1174,   153,
    3801,   448,   356,    31,   119,   359,   517,  1183,   192,   395,
     590,   356,  1661,   186,   359,   466,   401,  2295,   448,   399,
    2295,   356,    15,    16,   359,   605,   466,   181,  2317,   116,
    1744,   513,   543,   519,  2529,   116,  4081,   327,    15,    16,
     186,  1217,   183,   603,    15,    16,   356,   607,   116,   359,
      15,    16,    20,  1229,   287,  1231,   605,  1233,   220,    15,
      16,   421,   183,   753,  1174,    33,  1242,  4231,   404,   260,
     356,   326,  1248,   359,   356,   457,   260,   359,  1968,    47,
    3078,  1257,  1258,   470,  2612,  3213,  3428,  3703,  3704,  1979,
      58,    59,   614,   407,   536,   176,  3087,  3840,  3841,    15,
      16,  3099,  3675,   605,  1280,   422,  2384,  1283,   176,  2384,
     552,  1390,   497,   356,   456,  1291,   359,   443,    15,    16,
     603,   202,   356,   394,   556,   359,   590,  1303,  1304,  1305,
    1306,  1307,  1308,   590,   202,    15,    16,  1313,   550,   361,
     375,   605,   210,  1319,  1320,  3680,  1322,   491,   605,  1325,
       0,   841,  1234,  1303,  1304,  1305,   603,  1307,   579,   356,
     561,  2450,   359,    15,    16,   349,   149,  2456,   356,  1345,
    1320,   359,   559,   603,   560,  1325,   195,   359,   340,   448,
     356,   268,  3925,   359,   590,   116,   356,   268,   609,   359,
     116,    15,    16,    15,    16,  2744,  1306,  3940,  1308,   605,
     268,    15,    16,   231,   356,   153,   586,   359,   605,   545,
    3953,   339,   333,   386,  1390,   356,  1298,   381,   359,   356,
     580,   356,   359,   961,   359,   253,  3653,   342,  1404,   519,
      12,  1407,  1408,   327,   339,  1345,   590,    15,    16,  3812,
     386,    15,    16,   218,   766,   590,    15,    16,   195,   347,
     176,   605,    12,  2736,   544,   590,   343,  2806,    15,    16,
     605,   153,   343,  1439,  3965,  4008,   241,  3968,  3610,   453,
     605,   231,   513,  1011,   372,   343,   356,  4020,  4021,   359,
     590,   174,  1458,   356,  1460,  1461,   359,  1463,  1464,   116,
     250,   238,   609,  3173,  1404,   605,   356,   464,  1408,   359,
    1476,   429,  1478,   457,   590,    15,    16,   160,   590,   414,
    1460,  1461,   603,   603,  1396,  3443,    15,    16,   120,   605,
     611,  4064,   356,   605,   611,   359,  2495,   356,   456,  2583,
     359,  4074,   116,   495,   603,   356,   255,   268,   359,   258,
     513,   183,   268,    15,    16,   386,  2128,   590,    12,   176,
     132,   244,    58,    59,  2632,   530,   590,  2632,  3652,    80,
    1050,   604,    68,   356,    15,    16,   359,   513,  2851,  4112,
     604,  4114,   132,  1549,  1550,   202,    15,    16,    99,   356,
     408,  4124,   359,  1662,  4085,   356,   228,   554,   359,    15,
      16,   356,   176,   590,   359,    16,  2026,  4140,   603,  4142,
     356,  4144,   590,   359,  4020,  4021,   611,   604,  4151,  2039,
     357,  1101,   343,   575,   590,  1105,   604,   343,   399,  4162,
     590,   519,  2231,  2232,  2233,   519,   593,  2317,   604,    15,
      16,    15,    16,  1609,   604,  4178,  4179,   213,   590,   420,
     356,   268,  2072,   359,   485,    12,   339,   195,  2976,   590,
     544,  4194,  4195,   590,   541,   590,  4199,   950,   951,   356,
     541,  3983,   359,  3541,  3542,    15,    16,   604,   132,   604,
     451,   121,  3319,   541,    41,  1651,   356,   396,   133,   359,
    3329,    15,    16,  1659,   268,  1661,  1662,   129,   490,  3241,
      15,    16,   494,   534,  3868,   988,   513,  1673,   327,  1675,
      15,    16,   144,   222,   356,  1681,  1682,   359,  1684,   603,
     590,  2141,   231,    15,    16,   357,   343,   590,  1694,   336,
     337,    88,  1698,  3372,   604,   516,    93,    12,    15,    16,
     590,   604,   356,   574,   356,   359,   218,   359,  1714,  1715,
    1716,  1717,   356,  3388,   604,   359,  3391,  1723,    15,    16,
    1726,  1727,  1728,   203,   604,   605,   590,    15,    16,   343,
    2450,   590,  2851,   351,    71,   510,  2456,  1743,   513,   590,
     604,  1681,  1682,   195,  1684,   604,  1752,  3575,   356,    33,
     548,   359,   356,   604,  1694,   359,   218,   356,  1698,   597,
     359,    38,    15,    16,   153,   154,   604,   590,    45,   356,
    3445,   210,   359,   212,   572,    59,  1716,  1717,    15,    16,
     541,   604,  1788,   590,   218,   541,  1726,  1727,  1728,   590,
    1218,   271,    71,  1221,  1800,   590,  1224,   604,   187,   228,
    1712,  1807,   448,   604,   590,   603,    15,    16,   197,   604,
     456,  2644,   522,   362,    15,    16,   356,   132,   604,   359,
    2364,   213,   106,    15,    16,   109,  3803,   356,  3805,    95,
     359,   316,  2685,   117,   569,  1747,   233,   572,  2691,    16,
      15,    16,   183,   180,   590,   234,  3044,    46,  1788,  2685,
     552,   553,  2886,   555,   356,  2691,   245,   359,   604,   567,
     519,   456,  2693,   590,   604,   605,   581,  1807,  1977,   271,
      15,    16,  1981,  2907,  2908,   356,   604,   604,   359,   609,
     590,   218,   611,   272,   541,   544,   557,   356,    15,    16,
     359,   485,  3000,   353,  2928,    15,    16,  1903,   135,   116,
     356,   180,   119,   359,   241,   603,   303,   180,   590,  1821,
    2019,  1917,   275,   276,     6,  2024,   604,   605,  1830,  1831,
     566,   567,  3632,  3633,  3634,  3635,  3201,   541,    11,  1841,
    1842,  1843,  1844,   422,  1846,  1847,   590,   603,   590,   218,
     356,   330,   356,   359,   603,   359,   590,   603,  3056,   611,
     604,  3056,   604,    30,   603,   221,   133,   603,   603,   176,
     604,    16,   241,   603,    76,   603,    78,   603,   365,  2589,
     603,  1977,   238,   603,   183,  1981,   356,  1983,   448,   359,
    1986,  3089,   590,   249,  3089,   202,   590,  1993,  1994,  1995,
    1996,   590,   356,  1999,   603,   359,   604,   163,    75,   519,
     604,   356,   603,   590,   359,   604,  1986,   119,  2117,  2645,
     603,   356,   495,  2019,   359,    15,    16,   604,  2024,   604,
     605,  4225,   582,   583,   356,   604,   605,   359,   140,  1941,
    1942,    18,  1944,   603,  1946,  1947,  1948,  1949,  1950,   356,
    2149,  1953,   359,  1955,   328,   605,  3746,   384,   411,   412,
     590,   268,    12,  1993,  1994,  1995,   603,  3774,   603,   356,
     326,   590,   359,   175,   604,    15,    16,   605,   356,   603,
     147,   359,   604,   605,  2629,   604,   473,   603,   133,   604,
     605,  3781,   604,   605,  3784,  3785,  3786,  3787,   590,   562,
      15,    16,   371,   603,  3073,  3074,   566,   567,  3775,   562,
     603,   133,   604,   356,   603,   384,   359,   169,    95,   590,
     507,  2117,   603,   598,   599,   600,   601,    12,  2578,   356,
    2675,   590,   359,   604,   151,  3159,   343,   604,   605,   604,
     605,  2851,   605,   603,   590,   604,  2142,   603,   611,   316,
     348,   604,   605,  2149,   603,  3524,  3525,   356,   604,  3859,
     359,  2260,   562,  2262,  2263,   356,   603,  2163,   359,   603,
    3268,   603,   149,  3268,   356,   603,   153,   359,   434,   562,
     603,  1682,   132,  1684,   590,   603,   590,  3877,  3878,    24,
     464,   356,   603,   183,   359,    73,  3886,   385,   604,  2195,
     604,   603,   179,   220,   181,  2304,  2305,   147,   604,   605,
    3199,    58,    59,  2209,  3881,    11,   604,   605,   195,   437,
     590,   356,   605,   200,   359,  1726,  1727,  1728,   611,  3801,
    2226,   603,    57,   354,   604,   603,   590,   214,    73,   356,
     496,   603,   359,  2239,   221,   590,   356,   132,   603,   359,
     604,   228,   526,   203,   603,   590,  2252,   603,  2254,   604,
     603,   238,   604,   605,  2260,   603,  2262,  2263,   590,   604,
       6,   316,   249,   151,  2270,  2271,  2375,   254,   604,   605,
     554,   510,   604,   590,   336,   337,   263,   102,   604,   605,
     342,   603,   459,   460,   316,    25,    26,   604,    73,  2295,
     603,    73,   603,   590,   406,  3221,   102,   603,  2304,  2305,
     133,   603,   590,   603,   381,    87,   348,   604,   203,   603,
      56,   604,   605,   340,   120,   348,   604,   603,    58,    59,
      60,   522,   167,   603,   541,   603,   403,   603,    68,   603,
     522,   166,   220,    73,  2345,   170,   603,   590,  2344,   326,
    2252,    81,   608,  2349,  2355,   603,   181,   603,  2354,   603,
    2361,   604,  2358,   590,  2360,   603,   356,   603,   435,   359,
     185,   348,   604,   605,  2370,   105,  2372,  2373,   603,  2375,
     357,   603,  2383,   102,   603,   220,  2382,  2388,  2384,   119,
     186,   590,   122,  2394,  2395,   604,   605,  2393,   603,   590,
     136,   604,   605,   218,   193,  2401,  2266,   603,   590,   386,
     604,   605,  2408,  2409,   459,   460,   356,   603,   214,   359,
     114,   151,  3024,   490,  2420,   590,   603,   594,   595,   596,
     597,   598,   599,   600,   601,   437,   605,   459,   460,   604,
     603,   160,   604,   605,   603,   220,  1027,  1028,  1029,   264,
    4157,   604,   605,   604,   605,   590,   334,   434,  1039,   294,
    2362,  2363,   340,  2393,   604,   605,  2916,   186,   264,   604,
     603,   243,   603,   590,   604,   605,   603,   302,   495,   456,
     590,  2477,  2478,   214,   536,  2387,   471,   604,   218,  1070,
     604,   605,  1073,   316,   604,   225,  2356,   604,   605,   334,
     552,    48,   291,   292,   265,   340,  2956,   296,   297,   511,
     240,    48,  1093,  1094,   516,   209,  1097,   604,   605,   496,
    2380,  2381,   605,   564,   565,  4232,   567,   405,   569,   479,
     480,   481,   482,   483,   484,  1116,  1117,   348,   604,   605,
    3841,   348,   314,   442,  2446,   550,   496,  2477,   598,   594,
     595,   596,   597,   598,   599,   600,   601,   559,   575,   334,
      18,   604,   605,   293,   102,   340,   159,   339,  3616,  3617,
     395,  3181,   574,   550,   596,   597,   598,   599,   600,   601,
     456,   311,   142,   143,   561,   562,  3197,  3198,   605,   603,
     386,   604,   605,   254,   479,   480,  3641,   482,   181,   484,
     590,   337,   579,  2599,   581,   491,  2602,  2603,  2604,  2605,
     159,   496,   306,   604,   605,  2611,   310,   495,   604,   605,
     604,   605,   160,   317,   491,   397,   510,   604,   605,   265,
     405,   608,   609,  2629,   364,   150,  2632,    95,    82,   454,
     604,   605,   372,  3111,    25,  3561,  3114,  3115,   186,  2645,
     590,  3567,  2648,  2649,  2650,   604,   605,   605,   454,   474,
     495,   350,   398,  3131,   400,  2661,  2765,   386,   546,   604,
     605,  2667,   506,  2669,  3772,   604,  3210,  3772,   149,  2675,
     218,  2611,   604,   605,   604,   605,   119,    68,   604,   605,
     105,   149,    73,   604,   605,   153,   511,   575,   513,   393,
     610,   516,   604,   605,   604,   605,    61,  4008,  3756,   439,
    3463,  3464,  3760,   485,  3325,   511,    71,   513,  1102,  1103,
     495,  3879,  3880,   181,   133,    61,   264,   605,    83,  3010,
    3011,  2969,  2970,  3250,  3251,    71,   551,   195,   119,     6,
     575,   116,   200,   603,   559,   104,     4,    83,   447,   231,
    2746,   605,   446,  2749,  2750,   574,  2752,   371,    55,  2661,
      35,   414,   163,   221,   145,   495,  3814,  3815,   105,  2765,
     228,   546,  2768,   596,   597,   598,   599,   600,   601,   211,
     238,   511,   611,    73,   514,   605,    68,  2783,   605,   153,
      12,   249,   578,   519,   513,  2791,   254,    87,  2794,   604,
     575,   176,   604,   132,     9,   263,   605,   611,   611,   604,
     174,  4112,   604,  4114,   253,   534,   603,   611,  2814,   151,
     550,  2817,   231,   187,   605,   180,  2822,   202,   610,   265,
     185,   265,  2828,   197,   109,   265,  2832,   127,  2834,  4140,
     265,   116,   133,   381,   180,    48,   265,   265,   386,   185,
     605,   510,   603,  2849,   260,   574,   605,    73,  2828,   370,
     241,   605,  3960,   218,  2766,  3960,  2862,   530,   326,   153,
     605,   605,  2774,  2869,   530,   605,  3486,  4178,  4179,   231,
     244,   245,   218,   577,   605,  2881,   241,  2817,   605,   105,
     348,   605,   598,   268,   169,   508,   181,   232,   592,   357,
     171,   176,  1483,   605,   555,   241,  3822,   316,   272,  3538,
    3539,  3540,   605,   469,  3013,   133,   454,   373,  3350,  3351,
     128,  3744,  3533,  3534,   348,  3536,  3537,   202,   386,   605,
    3029,  3363,   604,   496,   497,   151,  3368,   500,   501,  2869,
     231,   504,  3572,   506,   153,   605,   153,   153,   605,   153,
     557,   153,  2854,   243,  2950,   336,   337,   153,   153,   153,
    3392,   342,  2958,  3395,   153,   153,  3500,   348,   343,   333,
    1551,   153,   153,   511,  1555,   153,   434,   153,   516,    25,
      26,   153,   153,   153,   153,   585,  2982,   561,   186,   605,
     348,  4036,   348,   268,   348,   604,   534,  1578,   456,   183,
     604,   604,   218,   384,  3000,  3001,   604,   604,  3004,    95,
     133,   598,    58,    59,    60,   604,   371,  3013,   604,   383,
     183,   559,    68,  3019,   314,   316,   605,    73,   597,   384,
     603,   550,   604,  3029,   604,    81,   574,   604,   496,   604,
     604,  3037,   601,   605,   605,  3595,   336,   337,   384,   339,
     459,   460,   327,   604,   604,   457,  2958,   605,   604,   105,
    3056,   603,   603,   338,   603,  3695,   530,   342,   343,   604,
     579,   452,  3068,   119,   219,   603,   122,   293,   603,   502,
     193,   183,  3078,  4128,  3080,   611,   183,   604,   394,   456,
     181,   605,   550,  3089,  4192,   311,    46,  4192,   316,  3095,
     605,  3097,   477,  3099,   562,   151,   485,   397,   485,   324,
      71,   485,  3647,   485,  3213,   485,   447,  4215,   334,   474,
    4215,   579,   371,   581,  4222,   371,   371,  4222,   128,   239,
    4228,  4047,  4048,  4228,  4050,   221,   530,   128,   474,   239,
     511,   371,   511,    46,   371,   369,   604,   605,   371,   417,
     608,   609,   238,   603,     6,   603,   264,   371,   371,   562,
     603,    13,    14,   249,   611,   147,   541,   604,   459,   460,
     551,   227,   218,    25,    26,  3171,   604,   227,   604,   225,
    4096,   530,  4098,  4099,  3283,   594,   595,   596,   597,   598,
     599,   600,   601,   316,   240,   485,   551,   611,   611,   604,
    3196,  3197,  3198,   611,    56,  3201,   604,   253,    60,    61,
     773,   604,   611,   604,    66,   551,   604,  3213,   605,   611,
     530,    73,    31,   530,   519,   611,   586,   605,   260,    81,
      46,   530,   153,   354,   183,   603,   183,  4153,   603,    91,
     326,   459,   460,  3853,   519,   183,   603,   293,   523,   228,
     183,   526,  3851,   105,  3789,   235,   343,   605,   611,   360,
     611,   536,  3164,    95,   238,   311,   541,   119,  3264,   544,
     122,  3370,  3268,  4190,   238,   105,   307,   129,   130,   495,
     105,   241,   241,   611,   136,  3187,   530,  3283,   603,   603,
     353,   195,   144,   519,    18,   511,   431,   149,   603,   151,
     371,   603,   611,   594,   595,   596,   597,   598,   599,   600,
     601,   598,   357,   229,   603,   229,   604,   611,   364,   348,
     598,   596,   597,    54,   133,   604,   372,   179,   604,  3325,
     604,   604,    63,   581,  3335,  3869,   459,   460,    15,    16,
     604,    72,   604,   604,  3443,   214,  3342,    35,   434,   603,
     605,   604,   371,    84,    85,    86,   255,   604,   231,   611,
      25,    26,   605,   604,   216,   183,   218,   251,    68,   100,
     556,   238,   238,   225,  3370,   348,   594,   595,   596,   597,
     598,   599,   600,   601,   605,   241,   603,   241,   240,   221,
     382,   603,   348,   439,   605,    60,   348,    73,    18,   471,
    3396,    46,   348,  3502,   605,   604,   238,  3403,    73,   348,
     496,   603,   605,   604,   448,   605,    81,   249,   254,   604,
     603,   109,   231,   603,   603,  3421,   450,   604,   116,   604,
     581,   399,   193,   110,   111,   112,   113,   114,   139,   247,
     105,   293,   604,   195,   253,   605,   458,  3443,   603,   495,
     603,   238,   238,   605,   119,   603,   119,   122,   119,   311,
     603,   380,   603,   315,   611,   511,    77,   466,   514,  3371,
     604,   135,   595,   596,   597,   598,   599,   600,   601,   604,
     443,   169,  4081,  4093,   471,   605,   151,   604,   176,   604,
      18,    33,  3488,   604,   326,   604,    33,   604,   604,   604,
     352,   604,   313,   243,   550,   357,  3502,   316,  3410,   604,
     263,   394,   364,   354,   202,   581,   348,   228,   603,   371,
     372,   603,   605,   604,  3520,    46,   200,   336,   337,   206,
     207,   208,   209,   611,   313,   605,   399,  3533,  3534,   562,
    3536,  3537,   519,   519,   562,   603,   603,   290,   603,  4159,
     402,   603,   603,   218,  3653,  4090,   604,   603,   572,   603,
     225,   572,   603,   181,   416,   417,   418,   419,   556,   119,
     241,   241,   342,    33,   305,   240,   343,   604,   603,  3575,
     268,   343,   165,   605,  4183,   313,   241,   439,   519,   519,
     519,   322,   562,   513,   566,   604,   604,   562,   228,   408,
     348,   338,   434,   605,   489,  3601,  3602,   431,   343,   567,
     581,   604,   354,    13,    14,   556,   181,  3613,  4217,  4229,
     501,   110,   111,   112,   113,   114,   148,   578,   293,   306,
      30,   308,   309,   310,    34,    30,   603,   603,   181,   327,
     317,   603,   367,   495,  3640,   521,   311,   604,    48,    49,
     459,   460,   128,   128,   342,   343,    56,  3653,   612,   511,
      60,    61,   514,   472,   496,   151,   386,   604,   604,   603,
     578,    95,  3602,    70,   407,    75,   183,    30,    61,   356,
      61,   354,   359,   605,   256,   537,    33,  3683,   502,   604,
     603,    46,    46,   603,    94,   494,   603,     5,   550,   364,
     348,   348,   228,   147,  3700,   354,   127,   372,   609,  3705,
    3640,   354,   135,   444,   603,   115,   393,   206,   207,   208,
     209,   520,    46,   123,   124,   125,    46,   146,    46,   556,
     123,   578,   147,   213,   270,   135,   136,   609,   612,   118,
     141,   438,   603,    46,    46,    46,   604,    52,   440,   149,
     609,   604,   211,   147,   605,   605,   522,   609,   198,   605,
     609,    46,   162,   605,   604,   604,    52,   498,   445,   446,
     421,   181,   181,   181,   439,   214,  3772,   522,   178,   126,
     580,   119,  3778,  3882,   515,   594,   595,   596,   597,   598,
     599,   600,   601,   193,   343,   182,   603,   221,   198,   456,
     605,   201,  3710,  1957,   151,  2156,  3173,  3803,   155,  3805,
    3174,  3807,  2333,  3419,   238,  3737,   622,   306,  3854,   308,
     309,   310,  4027,   947,   224,   249,   226,  4028,   317,  3421,
     495,   519,  3417,  3600,  4217,   523,  4170,  3833,   526,    45,
     639,   188,   242,  3745,   550,   644,   511,  2645,   536,   514,
    1722,  3592,  3592,   541,  3592,  3592,   544,  3592,   205,   259,
    3592,  3592,  4180,   263,  3592,  3592,  3592,  4061,  3918,  4061,
    3592,  4021,  3592,  3592,  3944,   674,  3943,  1399,  1916,  1653,
    3609,  1401,   520,  2789,  3983,   550,  3882,   986,  3925,  2624,
    2209,   690,  3888,  1409,  2982,  1245,  3778,  3641,  3872,  4128,
     577,  3266,   326,  3940,   393,  4044,  4090,   489,   596,   597,
    3789,  3190,  1909,   590,   591,   592,  3953,  1453,   265,  2855,
    2478,  3099,  1917,  2411,   348,  3122,  3078,  3122,  3155,  3334,
    3559,  3380,   731,   732,   733,   734,  3370,  3869,  3811,  3029,
     287,    11,    11,  4042,   743,  3814,  1467,  3815,  3760,  3748,
    3613,  3756,   352,  3567,  1991,  1916,   445,   446,  3080,  2404,
    3339,  2221,  1795,  1359,  3960,  3079,  1449,  1408,  1716,  2107,
    2611,   371,  2188,  3594,  3876,   570,  2977,  1733,  2243,  2958,
     862,   381,  2589,  2025,  3046,  1065,  2296,  3983,  2106,  3527,
    3668,  3998,   392,  3999,  3171,  3089,  1039,  3521,  2135,  4159,
    3502,  2248,  3998,  3999,  3880,  1233,   644,  1996,  1258,  2183,
     434,  2225,  3268,  2994,   414,  2995,  3056,   417,   635,   419,
    3960,   560,   422,  1476,  1784,   425,   426,  4064,  1311,   549,
    1672,  1339,  1785,   433,  1263,   435,   674,  4074,   385,  3097,
    2980,  4083,   442,  4054,  3990,  4222,  4042,   394,   448,  4126,
    4228,  3372,   690,  3000,  1291,  1738,   456,  3294,  2677,  3037,
    3510,   461,   409,   463,  1698,  1226,   466,   541,  3970,  3971,
    4066,  1281,   496,   844,  3630,  1458,  2599,  4073,   542,  3636,
     427,   849,   485,   485,   622,    -1,    -1,  4124,   577,   622,
     490,   622,    -1,    -1,   494,    -1,   734,    -1,    -1,    -1,
      -1,    -1,   591,   592,    -1,  4142,    -1,  4144,    -1,    -1,
      -1,    -1,  4211,    -1,  4151,    -1,    -1,    -1,    -1,   466,
     467,    -1,    -1,    -1,    -1,  4162,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    -1,
      -1,    -1,    -1,    -1,   491,  4141,    -1,    -1,    -1,   549,
    4146,    -1,    -1,   553,    -1,    -1,   556,  4194,  4195,    -1,
      -1,   561,  4199,   510,    -1,    -1,   513,    -1,    -1,   968,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4183,   588,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  4192,    -1,    -1,    -1,
      -1,    -1,    -1,   603,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4211,    -1,    -1,    -1,  4215,
      -1,  4217,    -1,    -1,  1023,  1024,  4222,    -1,    -1,    -1,
      -1,    -1,  4228,  1032,  1033,  1034,  1035,  1036,  1037,  1038,
      -1,    -1,    -1,    -1,  1043,    -1,    -1,  1046,  1047,    -1,
    1049,    -1,  1051,    -1,    -1,    -1,  1055,    -1,    -1,  1058,
    1059,  1060,  1061,    -1,  1063,  1064,    -1,    -1,    -1,    -1,
      -1,    -1,  1071,  1072,    -1,  1074,  1075,  1076,  1077,  1078,
      -1,  1080,    -1,  1082,  1083,  1084,  1085,  1086,  1087,  1088,
    1089,  1090,  1091,  1092,    -1,    -1,  1095,  1096,    -1,  1098,
      -1,  1100,    -1,    -1,    -1,  1104,    -1,  1106,  1107,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1118,
    1119,    33,    -1,    -1,    -1,    -1,    -1,  1126,    -1,    -1,
     968,    -1,    -1,    -1,  1133,  1134,  1135,    -1,  1137,    -1,
      -1,    -1,    -1,    -1,    -1,  1144,  1145,  1146,    -1,  1148,
    1149,  1150,  1151,  1152,    -1,  1154,  1155,  1156,  1157,  1158,
    1159,  1160,  1161,    -1,    -1,    -1,  1165,  1166,    -1,    -1,
      -1,    -1,    -1,    -1,    12,    13,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1023,  1024,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1032,  1033,    -1,    -1,  1036,  1037,
    1038,    -1,    -1,    -1,    -1,  1043,    -1,    -1,  1046,  1047,
      -1,  1049,    -1,  1051,   126,    -1,    -1,    -1,    -1,    -1,
    1058,  1059,  1060,  1061,    -1,  1063,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1071,  1072,    -1,  1074,  1075,    -1,   151,
      -1,    -1,  1080,   155,  1082,  1083,  1084,    -1,    -1,  1087,
    1088,  1089,  1090,  1091,  1092,    -1,    94,  1095,  1096,    -1,
    1098,    -1,  1100,    -1,    -1,    -1,  1104,    -1,  1106,  1107,
      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,
    1118,  1119,    13,    14,    -1,   123,    -1,    -1,  1126,    -1,
      -1,    -1,  1291,   205,    -1,  1133,  1134,  1135,   136,    -1,
    1299,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,    49,    -1,
      -1,    -1,   160,    -1,   162,    56,    -1,    -1,  1166,    60,
      61,    -1,    -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   265,    -1,   193,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   287,    -1,    23,    -1,    -1,
     218,    -1,    -1,    -1,   115,    -1,   224,    33,    34,    -1,
      -1,    -1,   123,   124,   125,    -1,    -1,    12,    13,    -1,
      -1,    -1,    -1,    -1,   135,   136,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,   263,    -1,    -1,    -1,    -1,
      -1,   162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    90,    -1,    92,   178,    94,    -1,
      -1,    -1,    -1,  1291,    -1,    -1,    -1,   103,    13,    -1,
      -1,  1299,   193,    -1,    -1,    -1,    -1,   198,    -1,    -1,
     201,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    94,
      -1,    -1,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1489,    -1,    -1,   224,    -1,   226,    -1,   409,    -1,    -1,
      -1,    -1,    -1,    -1,   150,   151,    -1,    -1,   123,    -1,
     156,   242,    -1,   159,    -1,   427,    -1,    -1,    -1,    -1,
      -1,   136,    -1,    -1,    -1,    -1,    -1,    -1,   259,    -1,
      -1,    -1,   263,    -1,    -1,    -1,    -1,    -1,   184,    94,
     186,    -1,    -1,    -1,    -1,   160,   192,   162,   194,   387,
      -1,    -1,    -1,   391,   466,   467,    -1,    -1,   173,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,   407,
      -1,   217,   218,    -1,    -1,    -1,    -1,   415,   193,   491,
      -1,   136,    -1,    -1,    -1,   423,  1585,  1586,  1587,    -1,
      -1,    -1,    -1,   239,    -1,    -1,    -1,    -1,    -1,    -1,
    1599,    -1,    -1,   218,    -1,   160,    -1,   162,    -1,   224,
     448,    -1,    -1,    -1,   260,    -1,    -1,    -1,   173,    -1,
      -1,   352,    -1,   461,   462,    -1,  1625,    -1,    -1,    -1,
      -1,    -1,  1631,    -1,    -1,  1634,    -1,  1636,   193,    -1,
     371,   287,    -1,  1642,    -1,  1644,  1645,    -1,   263,    -1,
     381,  1489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   392,    -1,   218,    -1,    -1,    -1,   505,    -1,   224,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   414,    -1,    -1,   417,    -1,   419,    -1,
      -1,   422,    -1,    -1,   425,   426,   534,    -1,    -1,    -1,
      -1,    -1,   433,    -1,   435,   351,    -1,    -1,   263,    -1,
      -1,   442,  1711,    -1,    -1,    -1,    -1,   448,   556,    -1,
     558,    -1,    -1,    -1,    -1,   456,    -1,    -1,   374,    -1,
     461,    -1,   463,    -1,    -1,   466,    -1,    -1,    -1,   385,
     386,    -1,    -1,   389,   390,    -1,    -1,  1585,  1586,  1587,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,    -1,   494,   410,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   387,    -1,    -1,    -1,   391,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1625,    -1,    -1,
      -1,    -1,   407,    -1,    -1,    -1,  1634,    -1,  1636,    -1,
     415,    -1,    -1,    -1,    -1,    -1,   537,   453,   423,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   549,    -1,
     466,    -1,   553,    -1,    -1,   556,    -1,    -1,    -1,    -1,
     561,    -1,   387,   448,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   491,   461,   462,    -1,   495,
      -1,    -1,   407,    -1,    -1,    -1,    -1,   588,    -1,    -1,
     415,    -1,    -1,    -1,    -1,    -1,    -1,   513,   423,    -1,
      -1,    -1,   603,  1711,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   215,    -1,    -1,    -1,
     505,    -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   461,   462,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,    -1,   570,    -1,    -1,    -1,    -1,    -1,
     576,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1938,
      -1,   556,    -1,   558,   273,   274,   275,   276,   277,   278,
     505,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   534,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   556,    -1,   558,    -1,    -1,  2005,    -1,    -1,    -1,
    2009,    -1,    -1,    -1,    -1,  2014,  2015,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2023,    -1,    -1,  2026,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2036,    -1,  2038,
    2039,    -1,  2041,  2042,  2043,  2044,  2045,    -1,    -1,  2048,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2057,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2065,    -1,  2067,    -1,
    2069,  2070,  2071,  2072,    -1,    -1,    -1,  2076,  2077,  2078,
      -1,    -1,   411,   412,  2083,  2084,  2085,    -1,  2087,    -1,
    2089,    -1,  2091,    -1,  2093,    -1,  2095,    -1,    -1,    -1,
    1938,  2100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2118,
      -1,    -1,    -1,    -1,    -1,    -1,  2125,    -1,    -1,  2128,
      -1,    -1,    -1,    -1,    -1,  2134,    -1,    -1,  2137,    -1,
      -1,    -1,  2141,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    -1,    13,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    25,    26,    -1,  2005,    -1,    -1,
      -1,  2009,    -1,    -1,    -1,    -1,  2014,  2015,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2023,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    56,    -1,  2196,  2036,    60,
    2038,    -1,    -1,  2041,  2042,  2043,  2044,  2045,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,  2057,
      81,    -1,    -1,    -1,    -1,    -1,    -1,  2065,    -1,  2067,
      91,  2069,  2070,  2071,    -1,    -1,    -1,    -1,  2076,  2077,
    2078,    -1,    -1,    -1,   105,  2083,  2084,  2085,    -1,  2087,
      -1,  2089,    -1,  2091,    -1,  2093,    -1,  2095,   119,    -1,
      -1,   122,  2100,    -1,    -1,    -1,    -1,    -1,   129,    -1,
      -1,    -1,    -1,    -1,    -1,   136,    -1,    -1,    -1,    -1,
    2118,    -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,    25,    26,  2134,    -1,    -1,  2137,
      -1,    -1,    -1,    -1,    32,    33,    -1,    -1,    -1,    -1,
      38,    -1,    40,    -1,    42,    43,    -1,    -1,   179,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    68,    -1,    -1,
      -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      81,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   105,    -1,    -1,    -1,   106,   240,
      -1,   109,    -1,    -1,    -1,    -1,    -1,    -1,   119,   117,
      -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   134,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     151,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,   177,
     311,    -1,    -1,    -1,   315,    -1,    -1,    -1,    -1,    -1,
      -1,   189,   190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   225,    -1,   357,    -1,    -1,    -1,
    2499,   229,    -1,   364,  2503,    -1,    -1,    -1,    -1,   240,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2525,  2526,    -1,   257,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,   267,
      -1,   269,    -1,    -1,    -1,    -1,  2545,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2554,   417,  2556,    -1,  2558,
      -1,    -1,   293,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   299,   300,   301,    -1,    -1,    -1,    -1,   439,  2578,
     311,    -1,    -1,    -1,  2583,    -1,    -1,    -1,    -1,    -1,
     318,   319,   320,    -1,    -1,    -1,    -1,   325,    -1,    -1,
     328,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2607,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   344,   345,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   364,   495,    -1,    -1,    -1,    -1,    -1,
      -1,   372,    -1,    -1,    -1,    -1,    -1,    -1,   376,   377,
     511,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2499,    -1,    -1,    -1,  2503,    -1,    -1,    -1,    -1,
      -1,  2670,    -1,   401,    -1,  2674,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2525,  2526,   550,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2545,   439,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2554,    -1,  2556,  2718,
    2558,    -1,    -1,    -1,   452,    -1,    -1,    -1,   456,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     468,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   495,    -1,    -1,    -1,    -1,  2607,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     511,    -1,    -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   520,    -1,    -1,   523,    -1,    -1,   526,   527,
     528,   529,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   550,
      -1,    -1,    -1,    -1,    -1,    -1,  2825,  2826,    -1,    -1,
      -1,    -1,  2670,    -1,    -1,    -1,  2674,    -1,    -1,    -1,
     568,   569,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   592,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2718,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2889,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2913,  2914,    -1,  2916,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2925,    -1,    -1,    -1,
      -1,  2930,    -1,    -1,  2933,    -1,  2935,  2936,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2956,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2971,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2825,  2826,    -1,
      -1,    -1,    -1,    -1,    -1,  2994,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3024,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3038,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2889,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3058,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3067,    -1,
      -1,    -1,    -1,    -1,    -1,  2913,  2914,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2925,    -1,    -1,
      -1,    -1,  2930,    -1,    -1,  2933,    -1,  2935,  2936,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2971,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2994,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3038,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3058,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3067,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3308,
    3309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3317,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3452,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3308,  3309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3317,
      -1,    -1,    -1,    -1,  3483,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3497,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3592,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3452,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3641,    -1,    -1,  3483,    -1,    -1,    -1,    -1,
      -1,    -1,  3651,    -1,    -1,    -1,    -1,    -1,    -1,  3497,
      -1,  3660,    -1,  3662,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3510,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3697,    -1,
      -1,    -1,    -1,    -1,  3703,  3704,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3794,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3651,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3660,    -1,  3662,    -1,    -1,  3826,    -1,  3828,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3838,
      -1,  3840,  3841,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3697,
      -1,    -1,    -1,    -1,  3863,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3923,    -1,  3925,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3940,  3941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3953,    -1,  3794,    -1,    -1,    -1,
      -1,    -1,  3961,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3826,    -1,
    3828,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3838,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4007,  4008,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4020,  4021,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4036,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4064,    -1,    -1,    -1,    -1,
      -1,    -1,  4071,    -1,    -1,  4074,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3923,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3941,    -1,    -1,  4105,    -1,    -1,    -1,
      -1,    -1,    -1,  4112,    -1,  4114,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3961,    -1,  4124,    -1,    -1,    -1,  4128,
      -1,    -1,  4131,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4140,    -1,  4142,    -1,  4144,    -1,    -1,    -1,    -1,
      -1,    -1,  4151,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4162,    -1,    -1,    -1,    -1,    -1,  4007,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4178,
    4179,    -1,    -1,    -1,    -1,  4184,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4194,  4195,    -1,    -1,    -1,
    4199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4231,  4071,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,  4131,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    44,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,  4184,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,   114,
     115,   116,    -1,  4231,   119,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,   246,   247,    -1,   249,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,   531,   532,   533,    -1,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,   564,
     565,   566,   567,    -1,    -1,   570,   571,    -1,   573,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
      -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,    -1,
      -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
     268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,   342,   343,    -1,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,   519,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,   563,   564,   565,   566,   567,
      -1,    -1,   570,   571,    -1,   573,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,   597,
      -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,   607,
      -1,    -1,   610,   611,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,    -1,
      -1,   332,   333,   334,   335,   336,   337,   338,   339,   340,
      -1,   342,   343,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,   570,
     571,    -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,
      -1,   602,   603,   604,    -1,   606,   607,    -1,    -1,   610,
     611,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,   183,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,   337,   338,   339,   340,    -1,   342,   343,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,
     564,   565,   566,   567,    -1,    -1,   570,   571,    -1,   573,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
      -1,    -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,
      -1,    -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,    -1,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,   183,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,    -1,   201,   202,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,    -1,    -1,   332,   333,   334,   335,   336,
     337,   338,   339,   340,    -1,   342,   343,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,   563,   564,   565,   566,
     567,    -1,    -1,   570,   571,    -1,   573,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,
     597,    -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,
     607,    -1,    -1,   610,   611,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,   183,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
      -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,   336,   337,   338,   339,
     340,    -1,   342,   343,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,   519,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,
     570,   571,    -1,   573,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,    -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,
      -1,    -1,   602,   603,    -1,    -1,   606,   607,    -1,    -1,
     610,   611,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      33,    34,    35,    36,    37,    38,    39,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,
      53,    54,    55,    -1,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      -1,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,   100,   101,   102,
      -1,   104,   105,   106,   107,   108,   109,    -1,    -1,    -1,
      -1,   114,   115,   116,    -1,    -1,   119,   120,    -1,   122,
      -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,    -1,
     173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,   196,    -1,   198,   199,    -1,   201,   202,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
     213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,   249,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,    -1,    -1,   332,
     333,   334,   335,   336,   337,   338,   339,   340,    -1,   342,
     343,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,   421,   422,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,   492,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   507,   508,   509,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,   519,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,   535,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
     563,   564,   565,   566,   567,    -1,    -1,   570,   571,    -1,
     573,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,   592,
      -1,    -1,    -1,   596,   597,    -1,    -1,    -1,    -1,   602,
     603,    -1,    -1,   606,   607,    -1,    -1,   610,   611,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    33,    34,    35,
      36,    37,    38,    39,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    52,    53,    54,    55,
      -1,    57,    58,    59,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,   100,   101,   102,    -1,   104,   105,
     106,   107,   108,   109,    -1,    -1,    -1,    -1,   114,   115,
     116,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,   163,    -1,   165,
     166,   167,   168,   169,   170,   171,    -1,   173,   174,   175,
     176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
     196,    -1,   198,   199,    -1,   201,   202,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,   249,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,    -1,    -1,   332,   333,   334,   335,
     336,   337,   338,   339,   340,    -1,   342,   343,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,   421,   422,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,   492,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   507,   508,   509,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,   519,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,   535,
     536,   537,   538,   539,   540,   541,   542,   543,   544,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,   563,   564,   565,
     566,   567,    -1,    -1,   570,   571,    -1,   573,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,
     596,   597,    -1,    -1,    -1,    -1,   602,   603,    -1,    -1,
     606,   607,    -1,    -1,   610,   611,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    33,    34,    35,    36,    37,    38,
      39,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    52,    53,    54,    55,    -1,    57,    58,
      59,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,   100,   101,   102,    -1,   104,   105,   106,   107,   108,
     109,    -1,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,
     119,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,    -1,   173,   174,   175,   176,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,   196,    -1,   198,
     199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,   213,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
     249,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,    -1,    -1,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,    -1,   342,   343,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,   421,   422,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,   492,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   507,   508,
     509,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
     519,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,   535,   536,   537,   538,
     539,   540,   541,   542,   543,   544,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,   563,   564,   565,   566,   567,    -1,
      -1,   570,   571,    -1,   573,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,    -1,   592,    -1,    -1,    -1,   596,   597,    -1,
      -1,    -1,    -1,   602,   603,    -1,    -1,   606,   607,    -1,
      -1,   610,   611,     5,    -1,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      52,    53,    54,    55,    -1,    57,    58,    59,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,   100,   101,
     102,    -1,   104,   105,   106,   107,   108,   109,    -1,    -1,
      -1,    -1,   114,   115,   116,    -1,    -1,   119,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,   163,    -1,   165,   166,   167,   168,   169,   170,   171,
      -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,   201,
     202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,    -1,    -1,
     332,   333,   334,   335,   336,   337,   338,   339,   340,    -1,
     342,   343,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,   421,
     422,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
     492,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   507,   508,   509,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,   535,   536,   537,   538,   539,   540,   541,
     542,   543,   544,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,   563,   564,   565,   566,   567,    -1,    -1,   570,   571,
      -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,
     592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,    -1,
     602,   603,    -1,    -1,   606,   607,    -1,    -1,   610,   611,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    33,    34,
      35,    36,    37,    38,    39,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    52,    53,    54,
      55,    -1,    57,    58,    59,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,   100,   101,   102,    -1,   104,
     105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,   114,
     115,   116,    -1,    -1,   119,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,    -1,   173,   174,
     175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,    -1,    -1,   332,   333,   334,
     335,   336,   337,   338,   339,   340,    -1,   342,   343,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,   492,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,   564,
     565,   566,   567,    -1,    -1,   570,   571,    -1,   573,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
      -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,    -1,
      -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    33,    34,    35,    36,    37,
      38,    39,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    52,    53,    54,    55,    -1,    57,
      58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,   100,   101,   102,    -1,   104,   105,   106,   107,
     108,   109,    -1,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,   196,    -1,
     198,   199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
     268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,   337,
     338,   339,   340,    -1,   342,   343,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,   421,   422,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,   492,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   507,
     508,   509,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,   519,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,   537,
     538,   539,   540,   541,   542,   543,   544,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,   563,   564,   565,   566,   567,
      -1,    -1,   570,   571,    -1,   573,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,   597,
      -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,   607,
      -1,    -1,   610,   611,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    33,    34,    35,    36,    37,    38,    39,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    52,    53,    54,    55,    -1,    57,    58,    59,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,   100,
     101,   102,    -1,   104,   105,   106,   107,   108,   109,    -1,
      -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,    -1,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,   196,    -1,   198,   199,    -1,
     201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,   213,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,    -1,
      -1,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
      -1,   342,   343,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
     421,   422,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,   492,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,   519,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,   570,
     571,    -1,   573,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,    -1,
      -1,   602,   603,    -1,    -1,   606,   607,    -1,    -1,   610,
     611,     5,    -1,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    52,    53,
      54,    55,    -1,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,   100,   101,   102,    -1,
     104,   105,   106,   107,   108,   109,    -1,    -1,    -1,    -1,
     114,   115,   116,    -1,    -1,   119,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,   163,
      -1,   165,   166,   167,   168,   169,   170,   171,    -1,   173,
     174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,   196,    -1,   198,   199,    -1,   201,   202,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,   249,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,    -1,    -1,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,    -1,   342,   343,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,   421,   422,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,   492,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   507,   508,   509,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,   535,   536,   537,   538,   539,   540,   541,   542,   543,
     544,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,   563,
     564,   565,   566,   567,    -1,    -1,   570,   571,    -1,   573,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,
      -1,    -1,   596,   597,    -1,    -1,    -1,    -1,   602,   603,
      -1,    -1,   606,   607,    -1,    -1,   610,   611,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    33,    34,    35,    36,
      37,    38,    39,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    52,    53,    54,    55,    -1,
      57,    58,    59,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,   100,   101,   102,    -1,   104,   105,   106,
     107,   108,   109,    -1,    -1,    -1,    -1,   114,   115,   116,
      -1,    -1,   119,   120,    -1,   122,    -1,    -1,    -1,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,    -1,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,   196,
      -1,   198,   199,    -1,   201,   202,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,   213,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,   249,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,    -1,    -1,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,    -1,   342,   343,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,   421,   422,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,   492,   493,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     507,   508,   509,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,   563,   564,   565,   566,
     567,    -1,    -1,   570,   571,    -1,   573,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,   596,
     597,    -1,    -1,    -1,    -1,   602,   603,    -1,    -1,   606,
     607,    -1,    -1,   610,   611,     5,    -1,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    35,    36,    37,    38,    39,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    52,    53,    54,    55,    -1,    57,    58,    59,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
     100,   101,   102,    -1,   104,   105,   106,   107,   108,   109,
      -1,    -1,    -1,    -1,   114,   115,   116,    -1,    -1,   119,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,   163,    -1,   165,   166,   167,   168,   169,
     170,   171,    -1,   173,   174,   175,   176,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,   196,    -1,   198,   199,
      -1,   201,   202,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,   249,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,   268,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
      -1,    -1,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,    -1,   342,   343,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,   421,   422,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,   492,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,   519,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,   535,   536,   537,   538,   539,
     540,   541,   542,   543,   544,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,   563,   564,   565,   566,   567,    -1,    -1,
     570,   571,    -1,   573,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,    -1,   592,    -1,    -1,    -1,   596,   597,    -1,    -1,
      -1,    -1,   602,   603,    -1,    -1,   606,   607,    -1,    -1,
     610,   611,     5,    -1,     7,     8,     9,    10,    11,    -1,
      -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    -1,    -1,
      -1,    34,    35,    -1,    -1,    38,    -1,    -1,    41,    42,
      43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    -1,    72,
      73,    74,    75,    76,    77,    78,    79,    -1,    81,    82,
      -1,    84,    85,    86,    87,    88,    -1,    90,    -1,    -1,
      93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,
      -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,
      -1,   114,   115,   116,    -1,    -1,    -1,   120,    -1,   122,
      -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,
      -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,
      -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,   152,
      -1,    -1,   155,   156,    -1,   158,   159,   160,   161,   162,
      -1,    -1,   165,   166,   167,    -1,   169,   170,   171,    -1,
     173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,    -1,   186,    -1,   188,   189,   190,   191,   192,
      -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,   202,
      -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,   212,
      -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,
      -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,
     233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,
     243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,
      -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,
      -1,   264,   265,    -1,    -1,   268,    -1,    -1,    -1,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,    -1,   287,   288,   289,    -1,   291,   292,
     293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,
     303,   304,   305,   306,   307,    -1,    -1,   310,   311,    -1,
     313,    -1,   315,    -1,   317,   318,   319,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,    -1,    -1,   332,
     333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,   342,
     343,    -1,   345,   346,   347,    -1,   349,   350,   351,    -1,
     353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,    -1,    -1,   381,   382,
     383,    -1,   385,    -1,   387,   388,   389,   390,   391,    -1,
     393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,
     403,   404,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,
     423,    -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,
     453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,
      -1,   464,   465,   466,   467,    -1,   469,   470,   471,   472,
     473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,
     483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,
      -1,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,   506,   507,   508,    -1,   510,   511,    -1,
      -1,   514,   515,   516,   517,    -1,   519,   520,   521,    -1,
     523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,
     533,    -1,    -1,   536,   537,   538,   539,   540,   541,   542,
     543,   544,   545,   546,    -1,   548,   549,    -1,    -1,   552,
      -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,
      -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,
      -1,   584,   585,    -1,   587,   588,   589,    -1,    -1,   592,
      -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,   610,   611,    20,
      -1,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,
      -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
     241,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,   253,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     611,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,
      -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,   185,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,   218,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
     241,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,   474,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,
     611,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    88,    -1,    90,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,
      -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,     5,    -1,     7,     8,     9,    10,
      11,    -1,    -1,   604,    -1,    -1,    17,    -1,    -1,    20,
     611,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,
      41,    42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,
      51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    62,    63,    64,    65,    66,    67,    -1,    69,    70,
      -1,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      81,    82,    -1,    84,    85,    86,    87,    88,    -1,    90,
      -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,
      -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,
      -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,
      -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,
     131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,
      -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,
     151,   152,    -1,    -1,   155,   156,    -1,   158,   159,   160,
     161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,
     171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,   190,
     191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,
     201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,
     211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,
      -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,
      -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,
      -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,
     251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,
      -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,    -1,   287,   288,   289,    -1,
     291,   292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,
      -1,   302,   303,   304,   305,   306,   307,    -1,    -1,   310,
     311,    -1,   313,    -1,   315,    -1,   317,   318,   319,   320,
     321,   322,   323,   324,   325,    -1,    -1,   328,   329,    -1,
      -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,   340,
      -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,
     351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   363,   364,   365,    -1,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,    -1,    -1,
     381,   382,   383,    -1,   385,    -1,   387,   388,   389,   390,
     391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,
      -1,   402,   403,   404,   405,   406,    -1,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,   418,   419,   420,
      -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,
     431,    -1,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,
     451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,
      -1,   462,    -1,   464,   465,   466,   467,    -1,   469,   470,
     471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,
     491,    -1,    -1,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,   506,   507,   508,    -1,   510,
     511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,
     521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,
      -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,   540,
      -1,   542,   543,    -1,   545,   546,    -1,   548,   549,    -1,
      -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,
      -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,
      -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,
      -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,
      -1,   592,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,   604,    -1,    -1,    -1,    -1,    17,   610,
     611,    20,    -1,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    88,
      -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,
     109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,    -1,   592,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,   603,    -1,    -1,    -1,    17,    -1,
      -1,    20,   611,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    88,
      -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,
     109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,   228,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,    -1,   592,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,
      -1,    20,   611,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,    48,
      -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    -1,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    81,    82,    -1,    84,    85,    86,    87,    88,
      -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,
      -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,
     109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,
      -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,
     129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
     139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,
      -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,   158,
     159,   160,   161,   162,    -1,    -1,   165,   166,   167,    -1,
      -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,
     189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,
     199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,
     209,   210,   211,   212,    -1,    -1,   215,   216,   217,    -1,
      -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,
      -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,
      -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,
      -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,
      -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,    -1,   287,   288,
     289,    -1,   291,   292,   293,   294,    -1,   296,   297,    -1,
      -1,    -1,    -1,   302,   303,   304,   305,   306,   307,    -1,
      -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,    -1,    -1,   328,
     329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,
     339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,
     349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
      -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,    -1,    -1,   398,
      -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,   418,
     419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,
      -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,    -1,   446,   447,    -1,
      -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,
      -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,
     469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,
     489,   490,   491,    -1,    -1,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,   505,   506,   507,   508,
      -1,   510,   511,    -1,    -1,   514,   515,   516,   517,    -1,
      -1,   520,   521,    -1,   523,   524,   525,   526,    -1,    -1,
      -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,
     539,   540,    -1,   542,   543,    -1,   545,   546,    -1,   548,
     549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,
     559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,
      -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,
      -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,
     589,    -1,    -1,   592,    -1,    -1,    -1,    -1,     5,   598,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,   611,    20,    -1,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
      -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,
      -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,   603,    -1,    -1,    -1,
      17,    -1,    -1,    20,   611,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
      -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,
      -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,    -1,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,   610,   611,    20,    -1,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   611,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   611,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   611,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,    -1,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,
      -1,    -1,    17,    -1,    -1,    20,   611,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,
      45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    -1,    72,    73,    74,
      75,    76,    77,    78,    79,    -1,    81,    82,    -1,    84,
      85,    86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,
      -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,
     105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,
     115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,
      -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,
     135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,
      -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,
     155,   156,    -1,   158,   159,   160,   161,   162,    -1,    -1,
     165,   166,   167,    -1,    -1,   170,   171,    -1,   173,   174,
     175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,
      -1,   186,    -1,   188,   189,   190,   191,   192,    -1,   194,
      -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,
     205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,
     215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,
     225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,
      -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,    -1,
      -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,
     265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,    -1,   287,   288,   289,    -1,   291,   292,   293,   294,
      -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,
     305,   306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,
     315,    -1,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,
     335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,
     345,   346,   347,    -1,   349,   350,   351,    -1,   353,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,
     365,    -1,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,    -1,    -1,   381,   382,   383,    -1,
     385,    -1,   387,   388,   389,   390,   391,    -1,   393,   394,
     395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,
     425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
      -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,   454,
      -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,
     465,   466,   467,    -1,   469,   470,   471,   472,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,
      -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
     505,   506,   507,   508,    -1,   510,   511,    -1,    -1,   514,
     515,   516,   517,    -1,   519,   520,   521,    -1,   523,   524,
     525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,
      -1,    -1,   537,   538,   539,   540,    -1,   542,   543,    -1,
     545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,
     555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,
      -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,
     575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,
     585,    -1,   587,   588,   589,    -1,    -1,   592,    -1,     5,
      -1,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,   610,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,   252,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,   519,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,    -1,   592,    -1,     5,    -1,
       7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
      17,    -1,    -1,    20,   610,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,
      47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    62,    63,    64,    65,    66,
      67,    -1,    69,    70,    -1,    72,    73,    74,    75,    76,
      77,    78,    79,    -1,    81,    82,    -1,    84,    85,    86,
      87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,
      -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
      -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,
      -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,
      -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,
      -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,
     147,   148,    -1,   150,   151,   152,    -1,    -1,   155,   156,
      -1,   158,   159,   160,   161,   162,    -1,    -1,   165,   166,
     167,    -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,
      -1,   188,   189,   190,   191,   192,    -1,   194,    -1,    -1,
      -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,
      -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,   216,
     217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,
      -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,
      -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,
     247,    -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,
     257,   258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,    -1,
     287,   288,   289,    -1,   291,   292,   293,   294,    -1,   296,
     297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,
     307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,
     317,   318,   319,   320,   321,   322,   323,   324,   325,    -1,
      -1,   328,   329,    -1,    -1,   332,   333,   334,   335,    -1,
      -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,
     347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,
     387,   388,   389,   390,   391,    -1,   393,   394,   395,    -1,
      -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,   406,
      -1,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,
     427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,    -1,   446,
     447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,
      -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,
     467,    -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,
      -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,
      -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,
     497,   498,   499,   500,   501,   502,    -1,    -1,   505,   506,
     507,   508,    -1,   510,   511,    -1,    -1,   514,   515,   516,
     517,    -1,   519,   520,   521,    -1,   523,   524,   525,   526,
      -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,
     537,   538,   539,   540,    -1,   542,   543,    -1,   545,   546,
      -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,
     557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,
     567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,
     577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,
     587,   588,   589,    -1,    -1,   592,    -1,     5,    -1,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,   610,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    -1,    74,    -1,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    -1,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,    -1,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,    -1,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,   175,    -1,    -1,
      -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,   270,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,    -1,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   364,   365,    -1,    -1,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
      -1,    -1,    -1,    -1,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,    -1,    -1,
     418,    -1,   420,   421,    -1,   423,    -1,    -1,    -1,   427,
      -1,    -1,   430,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,    -1,
      -1,    -1,    -1,   451,   452,   453,    -1,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,    -1,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,    -1,   491,    -1,    -1,    -1,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,    -1,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
      -1,    -1,    -1,    -1,   552,    -1,    -1,   555,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,   580,    -1,    -1,    -1,   584,    -1,    -1,   587,
      -1,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,   605,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,   598,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,   598,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,    -1,    -1,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,   598,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,   598,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,   115,   116,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,   176,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,   202,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
     268,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,    -1,    -1,   343,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,   476,   477,
     478,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,   541,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    33,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,   119,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,   153,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,   457,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,   268,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,   343,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,   541,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,   119,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,    -1,    -1,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,   519,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    33,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      98,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,   519,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      12,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
     252,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    35,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,   202,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,   519,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    33,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,   252,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,    -1,    -1,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,   519,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,   119,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,   252,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,   252,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,   519,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,   519,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    89,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,   164,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,   477,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,    -1,    -1,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,   183,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,   119,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    12,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      20,    -1,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    47,    48,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    73,    74,    75,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    87,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,   115,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,   162,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,   178,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,   198,   199,
      -1,   201,    -1,    -1,   204,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,   226,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,   243,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,   339,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   363,   364,   365,    -1,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,    -1,
      -1,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,   418,   419,
     420,    -1,    -1,   423,    -1,   425,    -1,   427,   428,    -1,
     430,   431,    -1,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,    -1,   446,   447,    -1,    -1,
      -1,   451,   452,   453,   454,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,   464,   465,   466,   467,    -1,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
     490,   491,    -1,    -1,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,   537,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,   548,   549,
      -1,    -1,   552,    -1,    -1,   555,    -1,   557,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,   585,    -1,   587,   588,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    20,    -1,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    47,    48,    -1,    -1,    51,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    73,
      74,    75,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    87,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,   115,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,   135,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,   162,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,    -1,   173,
     174,   175,    -1,    -1,   178,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,   198,   199,    -1,   201,    -1,    -1,
     204,   205,    -1,    -1,    -1,   209,   210,   211,   212,    -1,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,   226,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,    -1,    -1,    -1,   240,    -1,    -1,   243,
     244,    -1,    -1,   247,    -1,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,   339,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,   353,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,
     364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,    -1,    -1,   381,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,   418,   419,   420,    -1,    -1,   423,
      -1,   425,    -1,   427,   428,    -1,   430,   431,    -1,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,    -1,   446,   447,    -1,    -1,    -1,   451,   452,   453,
     454,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
     464,   465,   466,   467,    -1,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,   490,   491,    -1,    -1,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,   519,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,   537,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,   548,   549,    -1,    -1,   552,    -1,
      -1,   555,    -1,   557,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,    -1,    -1,    -1,    -1,
     584,   585,    -1,   587,   588,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    20,    -1,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    47,
      48,    -1,    -1,    51,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    73,    74,    75,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    87,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,   115,    -1,    -1,
      -1,   119,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,   135,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,   162,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,    -1,   173,   174,   175,    -1,    -1,
     178,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
     198,   199,    -1,   201,    -1,    -1,   204,   205,    -1,    -1,
      -1,   209,   210,   211,   212,    -1,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,   226,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,    -1,
      -1,    -1,   240,    -1,    -1,   243,   244,    -1,    -1,   247,
      -1,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,   339,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,   353,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   363,   364,   365,    -1,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,    -1,   381,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
     418,   419,   420,    -1,    -1,   423,    -1,   425,    -1,   427,
     428,    -1,   430,   431,    -1,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,    -1,   446,   447,
      -1,    -1,    -1,   451,   452,   453,   454,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,   464,   465,   466,   467,
      -1,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,   490,   491,    -1,    -1,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,   537,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
     548,   549,    -1,    -1,   552,    -1,    -1,   555,    -1,   557,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,    -1,    -1,    -1,    -1,   584,   585,    -1,   587,
     588,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    20,    -1,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    47,    48,    -1,    -1,    51,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    73,    74,    75,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    87,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,   115,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,   135,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
     162,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
      -1,   173,   174,   175,    -1,    -1,   178,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,   198,   199,    -1,   201,
      -1,    -1,   204,   205,    -1,    -1,    -1,   209,   210,   211,
     212,    -1,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,   226,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,    -1,    -1,    -1,   240,    -1,
      -1,   243,   244,    -1,    -1,   247,    -1,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,   339,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,   353,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,    -1,    -1,   381,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,   418,   419,   420,    -1,
      -1,   423,    -1,   425,    -1,   427,   428,    -1,   430,   431,
      -1,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,    -1,   446,   447,    -1,    -1,    -1,   451,
     452,   453,   454,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,   464,   465,   466,   467,    -1,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,   490,   491,
      -1,    -1,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,   537,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,   548,   549,    -1,    -1,
     552,    -1,    -1,   555,    -1,   557,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,    -1,    -1,
      -1,    -1,   584,   585,    -1,   587,   588,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    20,    -1,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    47,    48,    -1,    -1,    51,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    73,    74,    75,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    87,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,   115,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,   135,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,   162,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,    -1,   173,   174,   175,
      -1,    -1,   178,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,   198,   199,    -1,   201,    -1,    -1,   204,   205,
      -1,    -1,    -1,   209,   210,   211,   212,    -1,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
     226,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,    -1,    -1,    -1,   240,    -1,    -1,   243,   244,    -1,
      -1,   247,    -1,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,   339,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,   353,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   363,   364,   365,
      -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,    -1,    -1,   381,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,   418,   419,   420,    -1,    -1,   423,    -1,   425,
      -1,   427,   428,    -1,   430,   431,    -1,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,    -1,
     446,   447,    -1,    -1,    -1,   451,   452,   453,   454,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,   464,   465,
     466,   467,    -1,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,   490,   491,    -1,    -1,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,   537,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,   548,   549,    -1,    -1,   552,    -1,    -1,   555,
      -1,   557,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,    -1,    -1,    -1,    -1,   584,   585,
      -1,   587,   588,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    -1,    74,    -1,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    -1,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
     140,    -1,   142,   143,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,    -1,    -1,
      -1,    -1,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,    -1,    -1,   418,    -1,
     420,   421,    -1,   423,    -1,    -1,    -1,   427,    -1,    -1,
     430,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,
      -1,   451,   452,   453,    -1,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,    -1,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
      -1,   491,    -1,    -1,    -1,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,    -1,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,    -1,    -1,
      -1,    -1,   552,    -1,    -1,   555,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,    -1,    -1,   587,    -1,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    -1,
      74,    -1,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    -1,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,   140,    -1,   142,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,    -1,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,   270,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     364,   365,    -1,    -1,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,    -1,    -1,    -1,    -1,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
      -1,    -1,    -1,   427,    -1,    -1,   430,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,    -1,    -1,    -1,    -1,   451,   452,   453,
      -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
      -1,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,    -1,   491,    -1,    -1,
      -1,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,    -1,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,    -1,    -1,    -1,    -1,   552,    -1,
      -1,   555,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,   578,    -1,   580,    -1,    -1,    -1,
     584,    -1,    -1,   587,    -1,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    -1,    74,    -1,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    -1,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
     138,   139,   140,    -1,   142,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,    -1,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,   175,    -1,    -1,
      -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,   270,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,    -1,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   364,   365,    -1,    -1,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
      -1,    -1,    -1,    -1,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,    -1,    -1,
     418,    -1,   420,   421,    -1,   423,    -1,    -1,    -1,   427,
      -1,    -1,   430,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,    -1,
      -1,    -1,    -1,   451,   452,   453,    -1,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,    -1,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,    -1,   491,    -1,    -1,    -1,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,    -1,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
      -1,    -1,    -1,    -1,   552,    -1,    -1,   555,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
     578,    -1,   580,    -1,    -1,    -1,   584,    -1,    -1,   587,
      -1,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    -1,    74,    -1,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    -1,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,   147,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
      -1,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
     172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,   270,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,    -1,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,    -1,    -1,    -1,    -1,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,    -1,    -1,   418,    -1,   420,   421,
      -1,   423,    -1,    -1,    -1,   427,    -1,    -1,   430,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,    -1,    -1,    -1,    -1,   451,
     452,   453,    -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,    -1,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,    -1,   491,
      -1,    -1,    -1,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,    -1,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,    -1,    -1,    -1,    -1,
     552,    -1,    -1,   555,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,   580,    -1,
      -1,    -1,   584,    -1,    -1,   587,    -1,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    -1,    74,    -1,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    -1,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,   147,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,    -1,    -1,    -1,    -1,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
      -1,    -1,   418,    -1,   420,   421,    -1,   423,    -1,    -1,
      -1,   427,    -1,    -1,   430,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,    -1,   443,   444,    -1,
     446,    -1,    -1,    -1,    -1,   451,   452,   453,    -1,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,    -1,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,    -1,   491,    -1,    -1,    -1,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,    -1,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,   555,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,    -1,
      -1,   587,    -1,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      30,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    52,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    -1,    72,    -1,    74,    -1,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    -1,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,   147,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,   172,   173,   174,   175,    -1,    -1,    -1,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,   213,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,   237,    -1,    -1,
     240,    -1,    -1,    -1,   244,    -1,    -1,   247,   248,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
     270,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,   351,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,    -1,    -1,
      -1,    -1,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,    -1,    -1,   418,    -1,
     420,   421,    -1,   423,    -1,    -1,    -1,   427,    -1,    -1,
     430,   431,   432,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,
      -1,   451,   452,   453,    -1,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,    -1,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
      -1,   491,    -1,    -1,    -1,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,    -1,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,    -1,    -1,
      -1,    -1,   552,    -1,    -1,   555,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
     580,    -1,    -1,    -1,   584,    -1,    -1,   587,    -1,   589,
      -1,     5,   592,     7,     8,     9,    10,    11,    -1,    -1,
      -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    -1,    -1,    30,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    38,    -1,    -1,    41,    42,    43,
      -1,    45,    -1,    -1,    -1,    -1,    -1,    51,    52,    -1,
      54,    55,    -1,    57,    -1,    -1,    -1,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    -1,    72,    -1,
      74,    -1,    76,    77,    78,    79,    -1,    81,    82,    -1,
      84,    85,    86,    -1,    88,    -1,    90,    -1,    -1,    93,
      -1,    -1,    96,    -1,    -1,    -1,   100,    -1,    -1,    -1,
     104,   105,   106,    -1,    -1,   109,    -1,    -1,    -1,    -1,
     114,    -1,    -1,    -1,    -1,    -1,   120,    -1,   122,    -1,
      -1,    -1,   126,    -1,   128,   129,   130,   131,    -1,    -1,
      -1,    -1,    -1,    -1,   138,   139,   140,    -1,    -1,    -1,
     144,    -1,    -1,   147,   148,    -1,   150,   151,   152,    -1,
      -1,   155,   156,    -1,   158,   159,   160,   161,    -1,    -1,
      -1,   165,   166,   167,    -1,    -1,   170,   171,   172,   173,
     174,   175,    -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,
     184,    -1,   186,    -1,   188,   189,   190,   191,   192,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,
      -1,   205,    -1,    -1,    -1,   209,   210,   211,   212,   213,
      -1,   215,   216,   217,    -1,    -1,   220,    -1,    -1,    -1,
      -1,   225,    -1,    -1,    -1,    -1,   230,    -1,   232,   233,
      -1,   235,   236,   237,    -1,    -1,   240,    -1,    -1,    -1,
     244,    -1,    -1,   247,   248,    -1,   250,   251,    -1,    -1,
      -1,    -1,    -1,   257,   258,    -1,   260,    -1,   262,    -1,
     264,   265,    -1,    -1,    -1,    -1,   270,    -1,    -1,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,    -1,   287,   288,   289,    -1,   291,   292,   293,
     294,    -1,   296,   297,    -1,    -1,    -1,    -1,   302,   303,
     304,   305,   306,   307,    -1,    -1,   310,   311,    -1,   313,
      -1,   315,    -1,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,    -1,   328,   329,    -1,    -1,   332,   333,
     334,   335,    -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,
      -1,   345,   346,   347,    -1,   349,   350,   351,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     364,   365,    -1,    -1,   368,   369,   370,    -1,   372,   373,
     374,   375,   376,   377,    -1,    -1,    -1,    -1,   382,   383,
      -1,   385,    -1,   387,   388,   389,   390,   391,    -1,   393,
     394,   395,    -1,    -1,   398,    -1,    -1,    -1,   402,   403,
     404,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,    -1,    -1,   418,    -1,   420,   421,    -1,   423,
      -1,    -1,    -1,   427,    -1,    -1,   430,   431,   432,    -1,
      -1,    -1,   436,   437,   438,   439,   440,   441,    -1,   443,
     444,    -1,   446,    -1,    -1,    -1,    -1,   451,   452,   453,
      -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,   462,    -1,
      -1,   465,    -1,   467,    -1,   469,    -1,    -1,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,   483,
      -1,    -1,   486,    -1,    -1,   489,    -1,   491,    -1,    -1,
      -1,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   505,   506,   507,   508,    -1,   510,   511,    -1,    -1,
     514,   515,   516,   517,    -1,    -1,   520,   521,    -1,   523,
     524,   525,   526,    -1,    -1,    -1,    -1,    -1,   532,   533,
      -1,    -1,    -1,    -1,   538,   539,   540,    -1,   542,   543,
      -1,   545,   546,    -1,    -1,    -1,    -1,    -1,   552,    -1,
      -1,   555,    -1,    -1,    -1,   559,   560,    -1,    -1,    -1,
      -1,    -1,    -1,   567,    -1,    -1,   570,    -1,    -1,    -1,
     574,   575,   576,   577,    -1,    -1,   580,    -1,    -1,    -1,
     584,    -1,    -1,   587,    -1,   589,    -1,     5,   592,     7,
       8,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    17,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      -1,    -1,    30,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      38,    -1,    -1,    41,    42,    43,    -1,    45,    -1,    -1,
      -1,    -1,    -1,    51,    52,    -1,    54,    55,    -1,    57,
      -1,    -1,    -1,    -1,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    -1,    72,    -1,    74,    -1,    76,    77,
      78,    79,    -1,    81,    82,    -1,    84,    85,    86,    -1,
      88,    -1,    90,    -1,    -1,    93,    -1,    -1,    96,    -1,
      -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,    -1,
      -1,   109,    -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,
      -1,    -1,   120,    -1,   122,    -1,    -1,    -1,   126,    -1,
     128,   129,   130,   131,    -1,    -1,    -1,    -1,    -1,    -1,
     138,   139,   140,    -1,    -1,    -1,   144,    -1,    -1,   147,
     148,    -1,   150,   151,   152,    -1,    -1,   155,   156,    -1,
     158,   159,   160,   161,    -1,    -1,    -1,   165,   166,   167,
      -1,    -1,   170,   171,   172,   173,   174,   175,    -1,    -1,
      -1,    -1,    -1,    -1,   182,    -1,   184,    -1,   186,    -1,
     188,   189,   190,   191,   192,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,
      -1,   209,   210,   211,   212,   213,    -1,   215,   216,   217,
      -1,    -1,   220,    -1,    -1,    -1,    -1,   225,    -1,    -1,
      -1,    -1,   230,    -1,   232,   233,    -1,   235,   236,   237,
      -1,    -1,   240,    -1,    -1,    -1,   244,    -1,    -1,   247,
     248,    -1,   250,   251,    -1,    -1,    -1,    -1,    -1,   257,
     258,    -1,   260,    -1,   262,    -1,   264,   265,    -1,    -1,
      -1,    -1,   270,    -1,    -1,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,    -1,   287,
     288,   289,    -1,   291,   292,   293,   294,    -1,   296,   297,
      -1,    -1,    -1,    -1,   302,   303,   304,   305,   306,   307,
      -1,    -1,   310,   311,    -1,   313,    -1,   315,    -1,   317,
     318,   319,   320,   321,   322,   323,   324,   325,    -1,    -1,
     328,   329,    -1,    -1,   332,   333,   334,   335,    -1,    -1,
      -1,    -1,   340,    -1,    -1,    -1,    -1,   345,   346,   347,
      -1,   349,   350,   351,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   364,   365,    -1,    -1,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
      -1,    -1,    -1,    -1,   382,   383,    -1,   385,    -1,   387,
     388,   389,   390,   391,    -1,   393,   394,   395,    -1,    -1,
     398,    -1,    -1,    -1,   402,   403,   404,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,    -1,    -1,
     418,    -1,   420,   421,    -1,   423,    -1,    -1,    -1,   427,
      -1,    -1,   430,   431,   432,    -1,    -1,    -1,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,    -1,   446,    -1,
      -1,    -1,    -1,   451,   452,   453,    -1,    -1,    -1,    -1,
     458,    -1,    -1,    -1,   462,    -1,    -1,   465,    -1,   467,
      -1,   469,    -1,    -1,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,   483,    -1,    -1,   486,    -1,
      -1,   489,    -1,   491,    -1,    -1,    -1,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   505,   506,   507,
     508,    -1,   510,   511,    -1,    -1,   514,   515,   516,   517,
      -1,    -1,   520,   521,    -1,   523,   524,   525,   526,    -1,
      -1,    -1,    -1,    -1,   532,   533,    -1,    -1,    -1,    -1,
     538,   539,   540,    -1,   542,   543,    -1,   545,   546,    -1,
      -1,    -1,    -1,    -1,   552,    -1,    -1,   555,    -1,    -1,
      -1,   559,   560,    -1,    -1,    -1,    -1,    -1,    -1,   567,
      -1,    -1,   570,    -1,    -1,    -1,   574,   575,   576,   577,
      -1,    -1,   580,    -1,    -1,    -1,   584,    -1,    -1,   587,
      -1,   589,    -1,     5,   592,     7,     8,     9,    10,    11,
      -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    -1,    -1,    30,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    38,    -1,    -1,    41,
      42,    43,    -1,    45,    -1,    -1,    -1,    -1,    -1,    51,
      52,    -1,    54,    55,    -1,    57,    -1,    -1,    -1,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    -1,
      72,    -1,    74,    -1,    76,    77,    78,    79,    -1,    81,
      82,    -1,    84,    85,    86,    -1,    88,    -1,    90,    -1,
      -1,    93,    -1,    -1,    96,    -1,    -1,    -1,   100,    -1,
      -1,    -1,   104,   105,   106,    -1,    -1,   109,    -1,    -1,
      -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,   120,    -1,
     122,    -1,    -1,    -1,   126,    -1,   128,   129,   130,   131,
      -1,    -1,    -1,    -1,    -1,    -1,   138,   139,   140,    -1,
      -1,    -1,   144,    -1,    -1,    -1,   148,    -1,   150,   151,
     152,    -1,    -1,   155,   156,    -1,   158,   159,   160,   161,
      -1,    -1,    -1,   165,   166,   167,    -1,    -1,   170,   171,
     172,   173,   174,   175,    -1,    -1,    -1,    -1,    -1,    -1,
     182,    -1,   184,    -1,   186,    -1,   188,   189,   190,   191,
     192,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    -1,    -1,   205,    -1,    -1,    -1,   209,   210,   211,
     212,   213,    -1,   215,   216,   217,    -1,    -1,   220,    -1,
      -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,   230,    -1,
     232,   233,    -1,   235,   236,   237,    -1,    -1,   240,    -1,
      -1,    -1,   244,    -1,    -1,   247,   248,    -1,   250,   251,
      -1,    -1,    -1,    -1,    -1,   257,   258,    -1,   260,    -1,
     262,    -1,   264,   265,    -1,    -1,    -1,    -1,   270,    -1,
      -1,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,    -1,   287,   288,   289,    -1,   291,
     292,   293,   294,    -1,   296,   297,    -1,    -1,    -1,    -1,
     302,   303,   304,   305,   306,   307,    -1,    -1,   310,   311,
      -1,   313,    -1,   315,    -1,   317,   318,   319,   320,   321,
     322,   323,   324,   325,    -1,    -1,   328,   329,    -1,    -1,
     332,   333,   334,   335,    -1,    -1,    -1,    -1,   340,    -1,
      -1,    -1,    -1,   345,   346,   347,    -1,   349,   350,   351,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   364,   365,    -1,    -1,   368,   369,   370,    -1,
     372,   373,   374,   375,   376,   377,    -1,    -1,    -1,    -1,
     382,   383,    -1,   385,    -1,   387,   388,   389,   390,   391,
      -1,   393,   394,   395,    -1,    -1,   398,    -1,    -1,    -1,
     402,   403,   404,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,    -1,    -1,   418,    -1,   420,   421,
      -1,   423,    -1,    -1,    -1,   427,    -1,    -1,   430,   431,
     432,    -1,    -1,    -1,   436,   437,   438,   439,   440,   441,
      -1,   443,   444,    -1,   446,    -1,    -1,    -1,    -1,   451,
     452,   453,    -1,    -1,    -1,    -1,   458,    -1,    -1,    -1,
     462,    -1,    -1,   465,    -1,   467,    -1,   469,    -1,    -1,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,   483,    -1,    -1,   486,    -1,    -1,   489,    -1,   491,
      -1,    -1,    -1,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,   505,   506,   507,   508,    -1,   510,   511,
      -1,    -1,   514,   515,   516,   517,    -1,    -1,   520,   521,
      -1,   523,   524,   525,   526,    -1,    -1,    -1,    -1,    -1,
     532,   533,    -1,    -1,    -1,    -1,   538,   539,   540,    -1,
     542,   543,    -1,   545,   546,    -1,    -1,    -1,    -1,    -1,
     552,    -1,    -1,   555,    -1,    -1,    -1,   559,   560,    -1,
      -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,   570,    -1,
      -1,    -1,   574,   575,   576,   577,    -1,    -1,   580,    -1,
      -1,    -1,   584,    -1,    -1,   587,    -1,   589,    -1,     5,
     592,     7,     8,     9,    10,    11,    -1,    -1,    -1,    -1,
      -1,    17,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    -1,    -1,    30,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    38,    -1,    -1,    41,    42,    43,    -1,    45,
      -1,    -1,    -1,    -1,    -1,    51,    52,    -1,    54,    55,
      -1,    57,    -1,    -1,    -1,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    -1,    72,    -1,    74,    -1,
      76,    77,    78,    79,    -1,    81,    82,    -1,    84,    85,
      86,    -1,    88,    -1,    90,    -1,    -1,    93,    -1,    -1,
      96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
     106,    -1,    -1,   109,    -1,    -1,    -1,    -1,   114,    -1,
      -1,    -1,    -1,    -1,   120,    -1,   122,    -1,    -1,    -1,
     126,    -1,   128,   129,   130,   131,    -1,    -1,    -1,    -1,
      -1,    -1,   138,   139,   140,    -1,    -1,    -1,   144,    -1,
      -1,    -1,   148,    -1,   150,   151,   152,    -1,    -1,   155,
     156,    -1,   158,   159,   160,   161,    -1,    -1,    -1,   165,
     166,   167,    -1,    -1,   170,   171,   172,   173,   174,   175,
      -1,    -1,    -1,    -1,    -1,    -1,   182,    -1,   184,    -1,
     186,    -1,   188,   189,   190,   191,   192,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   205,
      -1,    -1,    -1,   209,   210,   211,   212,   213,    -1,   215,
     216,   217,    -1,    -1,   220,    -1,    -1,    -1,    -1,   225,
      -1,    -1,    -1,    -1,   230,    -1,   232,   233,    -1,   235,
     236,   237,    -1,    -1,   240,    -1,    -1,    -1,   244,    -1,
      -1,   247,   248,    -1,   250,   251,    -1,    -1,    -1,    -1,
      -1,   257,   258,    -1,   260,    -1,   262,    -1,   264,   265,
      -1,    -1,    -1,    -1,   270,    -1,    -1,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
      -1,   287,   288,   289,    -1,   291,   292,   293,   294,    -1,
     296,   297,    -1,    -1,    -1,    -1,   302,   303,   304,   305,
     306,   307,    -1,    -1,   310,   311,    -1,   313,    -1,   315,
      -1,   317,   318,   319,   320,   321,   322,   323,   324,   325,
      -1,    -1,   328,   329,    -1,    -1,   332,   333,   334,   335,
      -1,    -1,    -1,    -1,   340,    -1,    -1,    -1,    -1,   345,
     346,   347,    -1,   349,   350,   351,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,   370,    -1,   372,   373,   374,   375,
     376,   377,    -1,    -1,    -1,    -1,   382,   383,    -1,   385,
      -1,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
      -1,    -1,   398,    -1,    -1,    -1,   402,   403,   404,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,    -1,   415,
      -1,    -1,   418,    -1,   420,   421,    -1,   423,    -1,    -1,
      -1,   427,    -1,    -1,   430,   431,   432,    -1,    -1,    -1,
     436,   437,   438,   439,   440,   441,    -1,   443,   444,    -1,
     446,    -1,    -1,    -1,    -1,   451,   452,   453,    -1,    -1,
      -1,    -1,   458,    -1,    -1,    -1,   462,    -1,    -1,   465,
      -1,   467,    -1,   469,    -1,    -1,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,   483,    -1,    -1,
     486,    -1,    -1,   489,    -1,   491,    -1,    -1,    -1,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   505,
     506,   507,   508,    -1,   510,   511,    -1,    -1,   514,   515,
     516,   517,    -1,    -1,   520,   521,    -1,   523,   524,   525,
     526,    -1,    -1,    -1,    -1,    -1,   532,   533,    -1,    -1,
      -1,    -1,   538,   539,   540,    -1,   542,   543,    -1,   545,
     546,    -1,    -1,    -1,    -1,    -1,   552,    -1,    -1,   555,
      -1,    -1,    -1,   559,   560,    -1,    -1,    -1,    -1,    -1,
      -1,   567,    -1,    -1,   570,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,   580,    -1,    -1,    -1,   584,    -1,
      -1,   587,    -1,   589,    -1,     5,   592,     7,     8,     9,
      10,    11,    -1,    -1,    -1,    -1,    -1,    17,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    38,    -1,
      -1,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    -1,
      -1,    51,    -1,    -1,    54,    55,    -1,    57,    -1,    -1,
      -1,    -1,    62,    63,    64,    -1,    66,    67,    -1,    69,
      70,    -1,    72,    -1,    74,    -1,    76,    77,    78,    79,
      -1,    81,    82,    -1,    84,    85,    86,    -1,    88,    -1,
      90,    -1,    -1,    93,    -1,    -1,    96,    -1,    -1,    -1,
     100,    -1,    -1,    -1,   104,   105,   106,    -1,    -1,   109,
      -1,    -1,    -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,
     120,    -1,   122,    -1,    -1,    -1,   126,    -1,   128,   129,
     130,   131,    -1,    -1,    -1,    -1,    -1,    -1,   138,   139,
     140,    -1,    -1,    -1,   144,    -1,    -1,    -1,   148,    -1,
     150,   151,   152,    -1,    -1,   155,   156,    -1,   158,   159,
     160,   161,    -1,    -1,    -1,   165,   166,   167,    -1,    -1,
     170,   171,    -1,   173,   174,   175,    -1,    -1,    -1,    -1,
      -1,    -1,   182,    -1,   184,    -1,   186,    -1,   188,   189,
     190,   191,   192,    -1,   194,    -1,    -1,    -1,    -1,   199,
      -1,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,   209,
     210,   211,   212,    -1,    -1,   215,   216,   217,    -1,    -1,
     220,    -1,    -1,    -1,    -1,   225,    -1,    -1,    -1,    -1,
     230,    -1,   232,   233,    -1,   235,   236,    -1,    -1,    -1,
     240,    -1,    -1,    -1,   244,    -1,    -1,   247,    -1,    -1,
     250,   251,    -1,    -1,    -1,    -1,    -1,   257,   258,    -1,
     260,    -1,   262,    -1,   264,   265,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,    -1,   287,   288,   289,
      -1,   291,   292,   293,   294,    -1,   296,   297,    -1,    -1,
      -1,    -1,   302,   303,   304,   305,   306,   307,    -1,    -1,
     310,   311,    -1,   313,    -1,   315,    -1,   317,   318,   319,
     320,   321,   322,   323,   324,   325,    -1,    -1,   328,   329,
      -1,    -1,   332,   333,   334,   335,    -1,    -1,    -1,    -1,
     340,    -1,    -1,    -1,    -1,   345,   346,   347,    -1,   349,
     350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,    -1,    -1,
      -1,    -1,   382,   383,    -1,   385,    -1,   387,   388,   389,
     390,   391,    -1,   393,   394,   395,    -1,    -1,   398,    -1,
      -1,    -1,   402,   403,   404,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,    -1,   415,    -1,    -1,   418,    -1,
     420,    -1,    -1,   423,    -1,    -1,    -1,   427,    -1,    -1,
     430,   431,    -1,    -1,    -1,    -1,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,    -1,   446,    -1,    -1,    -1,
      -1,   451,   452,   453,    -1,    -1,    -1,    -1,   458,    -1,
      -1,    -1,   462,    -1,    -1,   465,    -1,   467,    -1,   469,
      -1,    -1,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,   483,    -1,    -1,   486,    -1,    -1,   489,
      -1,   491,    -1,    -1,    -1,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,   505,   506,   507,   508,    -1,
     510,   511,    -1,    -1,   514,   515,   516,   517,    -1,    -1,
     520,   521,    -1,   523,   524,   525,   526,    -1,    -1,    -1,
      -1,    -1,   532,   533,    -1,    -1,    -1,    -1,   538,   539,
     540,    -1,   542,   543,    -1,   545,   546,    -1,    -1,    -1,
      -1,    -1,   552,    -1,    -1,   555,    -1,    -1,    -1,   559,
     560,    -1,    -1,    -1,    -1,    -1,    -1,   567,    -1,    -1,
     570,    -1,    -1,    -1,   574,   575,   576,   577,    -1,    -1,
      -1,    -1,    -1,    -1,   584,    -1,    -1,   587,    -1,   589,
      -1,    -1,   592
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    13,    14,    30,    34,    48,    49,    56,    60,    61,
      75,    94,   115,   123,   124,   125,   135,   136,   149,   162,
     178,   193,   198,   201,   224,   226,   242,   259,   263,   352,
     371,   381,   392,   414,   417,   419,   422,   425,   426,   433,
     435,   442,   448,   456,   461,   463,   466,   490,   494,   537,
     549,   553,   556,   561,   588,   603,   614,   617,   618,   619,
     620,   621,   623,   628,   630,   637,   667,   695,   702,   810,
     960,   998,  1001,  1009,  1012,  1017,  1019,  1020,  1025,  1028,
    1033,  1040,  1052,  1053,  1208,  1210,  1220,  1223,  1248,  1256,
    1267,  1274,  1288,  1291,  1294,  1303,  1307,  1311,  1313,  1314,
    1364,  1381,  1387,  1389,  1396,  1398,  1424,  1430,  1431,  1432,
    1433,  1486,  1494,  1495,    11,   102,   120,   186,   214,   264,
     386,   454,   511,   994,  1455,  1456,  1457,  1460,   260,   341,
    1027,  1425,   519,  1355,   218,     5,     7,     8,     9,    10,
      11,    17,    20,    22,    23,    24,    25,    26,    27,    28,
      30,    34,    38,    41,    42,    43,    45,    47,    48,    51,
      54,    55,    57,    58,    60,    62,    63,    64,    65,    66,
      67,    69,    70,    72,    73,    74,    75,    76,    77,    78,
      79,    81,    82,    84,    85,    86,    87,    88,    90,    93,
      96,   100,   104,   105,   106,   109,   114,   115,   120,   122,
     126,   128,   129,   130,   131,   135,   138,   139,   140,   144,
     147,   148,   150,   151,   152,   155,   156,   158,   159,   160,
     161,   162,   165,   166,   167,   170,   171,   173,   174,   175,
     178,   182,   184,   186,   188,   189,   190,   191,   192,   194,
     198,   199,   201,   204,   205,   209,   210,   211,   212,   215,
     216,   217,   220,   225,   226,   230,   232,   233,   235,   236,
     240,   243,   244,   247,   250,   251,   257,   258,   260,   262,
     264,   265,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   287,   288,   289,   291,   292,
     293,   294,   296,   297,   302,   303,   304,   305,   306,   307,
     310,   311,   313,   315,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   328,   329,   332,   333,   334,   335,   339,
     340,   345,   346,   347,   349,   350,   351,   353,   363,   364,
     365,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   381,   382,   383,   385,   387,   388,   389,
     390,   391,   393,   394,   395,   398,   402,   403,   404,   405,
     406,   409,   410,   411,   412,   413,   415,   416,   418,   419,
     420,   423,   425,   427,   428,   430,   431,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   446,   447,   451,
     452,   453,   454,   458,   462,   464,   465,   466,   467,   469,
     470,   471,   472,   473,   480,   481,   483,   486,   489,   490,
     491,   494,   495,   497,   498,   499,   500,   501,   502,   505,
     506,   507,   508,   510,   511,   514,   515,   516,   517,   520,
     521,   523,   524,   525,   526,   532,   533,   537,   538,   539,
     540,   542,   543,   545,   546,   548,   549,   552,   555,   557,
     559,   560,   567,   570,   574,   575,   576,   577,   584,   585,
     587,   588,   589,   592,   661,  1354,  1358,  1362,  1363,   287,
     510,   513,  1383,  1383,   584,  1426,   102,   185,   264,   454,
     474,   511,   516,   551,   559,   643,   644,   861,   862,   863,
     938,   939,   940,  1257,  1209,   102,   160,   186,   218,   264,
     386,   454,   511,   516,   534,   559,   574,  1219,  1358,  1027,
     660,   611,  1351,  1353,  1358,   629,  1221,   375,    81,   394,
    1312,   105,   218,   589,  1319,  1383,  1027,   811,  1358,  1308,
     442,   559,  1383,  1027,  1224,  1304,   477,   692,   696,   697,
    1358,   660,  1426,  1358,  1056,  1058,  1059,   354,  1366,  1275,
     696,   490,   494,   466,   532,   466,   513,  1269,   375,  1388,
    1249,  1358,    30,    75,   147,   381,   403,   435,   490,  1488,
     448,   603,  1054,     0,   149,   615,   381,   166,   370,  1292,
    1351,  1358,   153,   971,  1358,   153,   661,   195,   661,   252,
    1355,  1358,  1360,   757,   758,   761,   784,  1358,   513,   160,
     966,  1455,  1383,  1426,  1034,   668,   611,   530,  1010,  1021,
      16,  1427,   213,   864,   195,  1360,   759,   784,   660,   359,
    1452,  1456,  1457,  1458,  1459,  1460,   513,   862,   218,   218,
     218,   214,   271,   395,  1265,  1266,     7,    20,    27,    33,
      35,    36,    37,    39,    52,    53,    58,    59,    66,    69,
      87,    91,    92,    97,    98,   101,   102,   107,   108,   109,
     114,   116,   119,   163,   168,   169,   176,   189,   191,   196,
     202,   209,   213,   224,   227,   249,   257,   268,   290,   295,
     306,   310,   312,   316,   317,   318,   319,   320,   327,   336,
     337,   338,   342,   343,   347,   366,   372,   376,   377,   379,
     393,   421,   422,   434,   440,   446,   492,   493,   499,   503,
     504,   509,   519,   523,   524,   525,   526,   535,   536,   537,
     541,   544,   559,   563,   564,   565,   566,   571,   573,   577,
     592,   596,   597,   602,   603,   606,   607,   610,   611,  1073,
    1074,  1075,  1076,  1080,  1083,  1084,  1085,  1086,  1087,  1088,
    1096,  1100,  1110,  1338,  1340,  1342,  1343,  1347,  1349,  1354,
    1358,   213,  1218,  1218,  1218,  1358,   195,  1218,  1218,   784,
    1218,   660,  1218,  1383,   624,  1295,    12,    13,    94,   123,
     136,   160,   162,   173,   193,   218,   224,   263,   387,   391,
     407,   415,   423,   448,   461,   462,   505,   534,   556,   558,
    1399,  1401,  1403,  1404,  1358,   351,    65,   399,   611,  1360,
     121,   203,   271,  1226,  1358,  1073,   228,  1315,  1382,  1383,
      46,   812,   183,    33,   287,  1280,  1309,  1358,   660,  1029,
    1383,   121,   271,  1227,  1255,   287,   394,   466,  1305,  1306,
     567,   693,   456,   698,    12,   391,  1397,  1401,   530,  1427,
    1057,    12,   132,   203,   479,   480,   481,   482,   483,   484,
     496,  1063,  1064,  1065,  1451,  1365,    23,    34,    58,    59,
      69,    90,    92,    94,   103,   151,   156,   159,   184,   186,
     192,   194,   217,   218,   239,   260,   287,   351,   374,   385,
     386,   389,   390,   410,   453,   466,   495,   513,   576,   912,
     937,  1276,  1280,  1281,  1283,  1372,   698,  1003,  1004,  1003,
    1003,   581,  1002,  1003,  1268,  1358,  1383,  1255,    35,   202,
     519,  1339,  1356,  1487,  1487,  1487,  1487,  1487,  1058,  1054,
     604,   609,  1358,  1290,  1289,   304,   517,   543,   962,   557,
      98,  1360,  1361,   964,   763,   785,  1358,   963,   353,     6,
      56,   136,   337,   398,   400,   786,  1351,   661,   485,  1461,
    1462,   965,  1018,  1035,  1036,  1037,  1038,  1351,   603,   669,
    1358,   631,  1214,  1215,  1351,  1214,    55,   339,   339,   414,
    1428,   336,   337,  1079,  1358,   762,   785,   180,     6,  1361,
    1414,  1415,   422,    10,   386,   534,   647,  1069,  1454,  1462,
    1470,  1474,  1475,  1481,   647,  1069,  1453,  1462,  1470,  1475,
    1481,  1455,  1460,   864,  1358,  1358,  1358,   183,  1258,  1262,
    1263,  1358,  1265,   603,   603,   603,  1083,   603,   603,   603,
    1073,  1113,   603,   603,   603,   603,   603,   603,   603,   603,
     603,  1072,  1072,   603,  1072,   603,   603,   603,   544,   603,
    1338,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,  1073,   603,   603,   603,  1111,  1112,  1347,  1358,
     603,   603,   603,   603,   603,   603,   603,   603,   603,  1073,
     603,  1072,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,  1072,
     603,  1338,   603,   603,   603,  1338,   603,   603,    35,   202,
     519,   603,  1072,  1072,  1072,   603,   603,   603,   603,   603,
    1083,  1083,  1083,  1073,  1446,  1447,  1358,  1101,  1358,    15,
      16,   356,   359,   590,  1077,  1078,   153,   154,   187,   197,
     234,   245,   272,   330,  1081,    31,   133,   231,   253,   316,
     408,   459,   460,   472,   594,   595,   596,   597,   598,   599,
     600,   601,  1079,  1083,    68,   358,   605,  1356,   603,   611,
     163,  1358,   661,  1358,   348,   785,   661,  1360,   795,  1281,
     661,  1361,  1413,  1213,  1218,   562,   625,    33,   126,   151,
     155,   188,   205,   265,   287,   385,   394,   409,   427,   466,
     467,   491,  1296,  1300,  1301,  1383,   385,  1402,   437,   437,
     511,   516,   559,   574,   354,  1406,   510,   348,  1408,    64,
     466,  1405,   103,   574,  1407,   348,   605,    18,   153,  1163,
    1164,  1390,  1358,   994,   471,    48,    79,   271,  1321,  1351,
    1384,  1385,  1026,   255,   258,   396,   813,   815,   610,   622,
    1355,   265,  1030,  1361,  1031,  1032,  1351,  1013,   228,  1215,
    1228,  1229,    48,   605,  1356,    54,    63,    72,    84,    85,
      86,   100,   305,   322,   444,   498,   515,   699,   701,  1402,
     348,   348,   442,  1429,  1428,   550,  1434,  1435,   598,  1067,
    1068,  1069,  1065,  1367,  1368,  1369,   159,   456,   253,   579,
    1287,   603,   102,   160,   186,   386,   513,   534,   574,  1287,
      12,   873,  1360,   254,  1182,  1184,   183,   231,  1282,  1284,
      67,   491,   181,   491,   510,    67,   491,    12,    41,    88,
      93,   233,   303,   365,   473,   507,  1270,  1271,  1272,   159,
     205,   491,   491,  1182,  1287,  1284,   265,   150,    70,   388,
     510,   533,   491,   570,  1000,   413,   486,  1005,  1006,   999,
      82,  1215,   994,   605,   350,  1490,   506,  1491,   238,   430,
    1489,   604,  1435,  1437,  1439,  1440,   149,   616,  1052,  1293,
    1339,  1358,   119,   859,   860,   870,   871,   921,   105,  1072,
     610,   662,     6,   764,   662,   603,   104,   781,   781,   781,
       4,   961,   967,   447,   574,  1462,  1214,   231,   605,   371,
    1046,  1048,  1049,   670,   671,  1073,   215,   273,   274,   275,
     276,   277,   278,   280,   281,   282,   283,   284,   285,   286,
     288,   289,   411,   412,   632,   633,   636,   166,   395,   605,
    1011,    57,   166,   170,   181,   302,   395,  1022,  1023,  1024,
      55,   414,   163,   642,   764,   105,   781,   211,   605,  1069,
    1069,  1069,   160,   186,   186,  1462,  1351,   941,   942,   941,
     941,  1216,  1217,  1351,  1352,  1358,   605,  1260,   611,  1264,
    1073,  1073,    12,   132,  1106,  1165,  1106,  1106,  1106,   578,
    1115,  1073,  1073,  1110,  1110,  1073,  1073,  1073,   132,  1106,
    1165,   604,  1073,   604,  1073,  1073,  1073,  1073,  1347,  1446,
     110,   111,   112,   113,   114,   206,   207,   208,   209,   306,
     308,   309,   310,   317,   393,   445,   446,   577,   591,   592,
    1160,  1161,  1110,   106,   109,   523,   526,  1162,   132,  1103,
    1073,  1073,  1073,  1073,  1160,  1073,  1110,  1112,     9,   605,
     611,   132,  1106,  1073,  1073,   132,  1106,  1073,  1073,  1110,
    1110,  1110,  1073,  1073,  1073,  1073,  1110,  1076,  1073,  1073,
    1073,  1073,  1073,  1073,  1106,  1106,  1073,  1073,   132,  1106,
    1073,  1073,  1161,  1161,  1073,    44,   246,   531,  1073,  1073,
     604,  1348,  1349,  1358,  1106,  1106,  1073,  1073,   604,   605,
     604,   448,   603,  1443,  1444,  1073,   610,  1102,  1360,   611,
    1073,  1073,  1073,  1075,   169,   342,   536,   552,  1079,    12,
      17,  1075,  1082,  1076,  1076,   603,  1083,  1076,  1076,  1076,
    1076,   253,  1076,  1076,   227,  1076,   227,  1076,  1076,  1076,
    1076,  1076,    31,   231,   253,   408,  1360,  1083,  1073,  1089,
    1358,   611,  1351,   795,   340,   575,   796,   797,   151,   605,
    1214,  1211,   610,   626,   627,   265,   265,   265,   265,    48,
     265,   265,   605,  1297,   510,   603,  1416,  1361,  1416,  1416,
    1416,   186,   386,   513,  1400,  1404,  1358,   174,   333,  1358,
    1391,  1392,  1228,  1355,  1041,   260,  1320,  1164,   605,  1214,
      70,   603,   819,   820,   819,   820,   370,   822,   199,   241,
    1360,    29,   530,  1310,   605,   530,   605,   530,  1214,  1229,
    1225,  1306,   605,   153,   605,  1361,   186,   386,  1400,  1358,
      12,   132,  1442,   605,  1060,  1073,  1345,  1358,   605,   192,
     260,   349,   453,  1370,  1371,  1374,  1375,   231,  1285,  1355,
    1073,   598,   864,   661,   661,   661,  1351,   661,  1351,   265,
     321,   491,  1279,  1279,   268,   343,   541,  1185,  1186,  1340,
    1358,  1287,  1358,   661,  1287,  1361,  1282,   661,  1287,   232,
     508,   171,   181,  1273,   605,  1285,  1282,  1351,  1284,  1282,
    1282,  1287,  1287,   555,  1007,   605,  1007,   469,   448,   603,
     607,  1116,  1117,  1118,  1119,  1120,  1129,  1130,  1144,  1339,
     373,  1492,   357,  1178,  1184,  1441,   860,    68,   912,   128,
    1360,    73,    87,   243,   314,   339,   397,   485,   664,   666,
     404,   545,   782,   783,   220,   778,   779,   780,   787,   795,
     797,   102,   204,   363,   372,   378,   470,   559,   645,   646,
    1355,    24,   294,   772,   773,   774,   787,   788,   789,   795,
     797,   765,   766,   772,     6,    13,    14,    25,    26,    56,
      60,    61,    66,    73,    81,    91,   105,   122,   129,   130,
     136,   144,   151,   179,   216,   218,   225,   240,   293,   311,
     315,   352,   357,   364,   371,   372,   402,   416,   417,   418,
     419,   439,   495,   511,   514,   537,   550,   807,   866,   868,
     870,   871,   972,   976,   978,   981,   987,   988,   989,  1174,
     348,   655,   968,   120,   230,  1351,   119,  1039,  1358,  1037,
    1351,   809,  1048,   218,   241,   935,  1050,   604,   605,   153,
     153,   153,   153,   153,   153,   153,   153,   153,   153,   153,
     153,   153,   153,   153,   153,   153,   153,   605,  1215,   557,
    1023,   858,   859,    73,   334,   405,   546,   775,   776,   777,
     787,   791,   792,   793,   794,   795,   797,   585,   561,   760,
      46,   581,  1415,   186,   661,   661,   864,   661,  1358,   638,
     539,   562,   949,   348,   348,   348,   605,  1261,  1259,   611,
    1264,  1263,   183,   598,  1358,   605,   604,  1106,   604,  1107,
     604,   604,   604,  1073,   142,   578,  1114,    18,   604,   562,
     604,   604,   604,   605,   562,   605,  1097,   604,   598,   604,
     605,   605,   604,   604,   604,   604,   183,   604,   605,  1099,
     604,   605,   605,   605,   597,   605,   604,   604,   603,  1347,
    1358,  1106,   604,   604,   604,  1106,   604,   605,   604,   604,
     604,   604,   604,   604,   604,   605,   604,   231,   604,   605,
     605,   605,   605,   604,   604,   604,   605,   183,   605,  1106,
     604,   604,   604,   605,   605,   605,   604,   183,  1073,   183,
    1073,   183,  1073,   183,   604,   605,   604,   604,   604,   604,
     605,   604,  1110,  1134,  1135,  1136,   448,   603,  1055,  1438,
    1439,   550,  1448,   608,   192,   260,   453,  1373,   457,  1358,
     169,   342,   536,   552,   603,    16,  1073,  1446,   158,  1170,
    1076,  1073,  1073,  1076,   603,  1083,  1076,  1069,  1093,  1094,
    1095,   603,   611,  1358,  1212,   796,   153,   457,  1239,  1240,
    1361,    50,   429,   995,  1214,  1360,   605,  1301,  1214,  1302,
    1358,  1417,  1418,   530,   598,  1351,  1358,  1412,  1412,  1412,
     153,   174,   187,   197,   244,   245,   272,   333,   383,  1393,
    1395,   579,  1166,  1222,  1042,  1043,  1044,  1045,  1351,   219,
     271,   399,   586,  1386,  1385,   603,  1069,   116,   176,   202,
     268,   343,   541,  1189,  1192,  1193,   502,   823,   814,   603,
    1073,  1355,  1361,  1361,  1032,  1351,   166,   395,   560,  1014,
    1015,  1016,   448,   456,   566,   567,   603,   854,  1230,  1233,
     701,   109,   523,   526,   700,  1100,  1342,  1347,   193,   183,
    1412,  1412,  1412,  1436,  1068,   183,   228,  1061,  1062,  1177,
    1178,  1203,  1070,  1070,   611,  1368,   119,   532,  1358,  1377,
     323,   372,   610,   912,  1376,  1355,   183,  1286,   604,  1358,
     346,   605,  1287,   394,  1182,  1272,  1286,  1287,  1282,  1351,
    1287,  1287,   636,  1008,  1006,  1143,  1358,    95,   221,   238,
     249,   326,   434,   496,  1128,   456,   605,  1351,  1143,   605,
     181,  1493,    46,  1182,  1240,  1240,   324,  1355,   485,   485,
     485,   485,   485,   447,  1355,  1355,  1240,   605,   780,  1355,
    1355,  1355,  1355,   116,   176,   202,   268,   343,   541,  1188,
    1355,  1355,   604,   605,  1240,  1240,   605,   774,   767,   768,
     787,   788,   789,    71,    83,   371,   882,   885,   886,   933,
     935,   939,   940,   993,   993,   371,  1240,  1240,   993,  1240,
     371,   371,  1240,  1240,   530,   128,  1240,   239,   511,   180,
     371,   384,   935,   993,   239,  1240,   511,   128,  1240,  1240,
    1240,  1240,   993,   371,    46,  1240,   809,  1240,   371,   369,
      18,   153,   530,   997,   371,   371,  1240,   131,   303,  1358,
    1240,   371,  1240,   866,   605,   806,   807,   976,   603,   611,
     881,   887,  1350,  1358,    77,   443,   417,   969,  1463,  1047,
     603,  1073,   603,  1188,  1355,  1355,   116,   176,   268,   343,
     541,  1190,  1355,  1188,  1355,  1355,  1355,  1355,  1355,  1188,
    1188,  1355,  1343,  1355,  1188,   633,  1240,  1240,  1240,  1240,
     605,   777,  1360,   264,   167,   769,   770,   771,   787,   788,
     789,   790,   793,   794,   795,   797,   372,   519,  1360,  1358,
    1482,     8,    29,   755,   661,   603,   431,   253,   603,   799,
     865,   867,   868,    45,   199,   441,   954,   954,  1351,  1351,
    1351,  1217,  1358,   562,  1166,  1358,  1117,   611,  1264,   227,
    1073,   604,  1073,   522,  1073,  1073,   147,    33,    59,   106,
     109,   117,   328,   464,   526,   554,  1108,    33,   913,  1360,
    1073,   913,  1108,  1110,   604,   227,   227,  1073,  1073,  1110,
    1073,  1073,  1073,  1073,  1073,  1076,   604,   604,  1073,  1073,
    1073,  1073,  1073,  1073,  1110,   227,  1073,  1073,  1073,   604,
    1073,  1073,  1073,  1073,   183,  1073,   183,  1073,   183,  1073,
    1073,  1073,   604,  1449,  1450,  1451,  1135,  1055,   604,  1442,
     611,   611,   611,  1360,  1073,  1446,  1075,   604,   605,   604,
    1083,  1160,  1160,    16,  1073,  1446,  1170,  1073,   604,   605,
    1109,  1110,  1358,   872,  1360,   995,   627,  1298,   604,   605,
    1414,   611,   611,   530,   530,   530,  1394,  1167,  1183,  1184,
    1230,   605,  1046,  1048,   519,  1357,   586,   260,   816,   817,
     818,  1358,   828,  1076,    46,   603,   830,   820,   816,   530,
    1015,   855,  1231,   603,  1236,  1241,  1236,   604,   854,  1232,
    1344,  1345,  1348,  1358,  1234,   153,   354,  1414,   183,   183,
     183,  1053,   137,  1117,  1204,   181,   263,  1066,  1203,  1183,
    1062,    18,  1071,  1355,  1358,   598,  1358,   611,   235,   611,
    1239,   119,   913,   914,  1239,   181,  1239,   610,  1360,    33,
     119,   916,   917,  1360,  1190,  1277,   156,   576,  1186,  1186,
     343,  1278,  1166,  1282,   605,  1131,  1138,  1143,  1116,   238,
     238,   360,  1145,   238,   249,   434,  1145,  1129,  1116,  1251,
    1252,  1348,  1118,  1164,  1140,  1141,  1188,   307,  1179,   119,
     918,   920,  1360,   914,   105,   105,   120,   230,   210,   798,
    1189,   780,   646,   798,   798,   774,   605,   768,   957,  1350,
    1027,    61,   180,   384,   551,   884,   934,   957,   935,   936,
     936,  1350,  1027,  1190,  1188,  1350,  1188,    12,   977,   985,
     986,  1358,  1027,  1355,  1355,   912,  1240,  1188,   241,   985,
     241,  1350,  1350,   872,  1240,   174,   244,   339,   875,  1188,
    1190,  1190,  1350,  1027,  1175,  1176,  1348,   119,  1188,   808,
    1355,  1027,  1351,  1027,  1027,    76,    78,   119,   140,   175,
     406,   874,  1188,   977,   869,     6,   136,   989,   878,   879,
     880,   881,   882,  1358,     8,   174,   996,   407,   883,   884,
     927,   888,   611,   337,   382,    22,   161,   649,   530,   129,
     144,   651,   603,  1464,   603,   384,  1156,  1157,  1158,  1358,
     634,   635,  1188,  1355,  1189,   798,   798,   777,   353,   195,
    1240,   605,   771,   519,    18,   431,   603,   123,   224,   556,
     756,   648,  1476,   117,   229,   401,   497,   877,  1351,   253,
     371,   800,   805,   806,   878,   805,   605,   867,   639,   640,
     641,   611,  1117,  1177,  1264,  1166,  1073,   604,  1073,   522,
     603,   904,   905,   905,   603,   899,   900,   904,   905,   229,
     229,   604,   604,   604,   604,   604,  1098,  1073,  1073,   604,
     604,  1105,  1178,   605,   605,   604,   605,   604,   231,  1090,
    1091,   604,   604,   604,   604,   605,   604,   604,  1073,   604,
     181,   604,   604,   605,   604,   605,   605,   604,  1073,   604,
    1073,   604,  1073,   604,   604,   604,  1067,  1451,   604,  1445,
     611,   958,   604,  1110,  1075,   604,   605,   604,  1070,  1095,
     604,   581,  1299,  1418,   581,  1421,   598,   598,  1414,  1414,
    1414,   603,  1073,   348,  1246,  1044,  1351,  1048,   214,  1051,
    1316,   604,   605,  1070,   815,   371,   831,   832,   604,  1361,
    1063,  1237,  1238,  1348,  1242,   605,   603,  1233,   604,   604,
     605,   611,  1434,   700,   183,  1414,  1414,  1414,  1166,  1166,
     138,   361,  1199,  1200,  1205,   556,   231,  1355,  1358,   611,
    1358,   251,  1358,    12,    33,   119,   348,  1073,  1380,    68,
     919,  1073,  1361,   347,   372,   519,  1379,  1373,  1239,  1182,
    1182,  1287,   636,   550,   604,  1438,  1139,   608,   238,  1129,
    1145,  1145,   238,   348,   348,   562,   605,  1250,  1239,  1154,
    1155,  1063,  1073,  1180,  1346,   768,   979,   603,   241,   241,
     936,   957,   942,   957,   957,   136,   456,   977,   990,   974,
     605,  1189,   914,  1355,   957,   995,  1355,   991,   977,   605,
      19,   124,  1181,   812,   977,   982,   977,   603,   604,   605,
    1358,  1351,    32,    33,    38,    40,    42,    43,    59,   106,
     109,   117,   134,   152,   175,   177,   189,   190,   229,   257,
     266,   267,   269,   299,   300,   301,   318,   319,   320,   325,
     328,   344,   345,   376,   377,   401,   452,   456,   468,   520,
     523,   526,   527,   528,   529,   568,   569,   592,   889,   892,
     893,   894,   895,   896,   897,   898,  1358,   382,  1073,  1073,
     348,   655,   661,   348,    73,   656,  1358,  1465,    18,   977,
     604,   605,   604,   605,   603,  1358,   798,   771,  1355,   877,
    1483,   348,   348,   672,   673,   675,  1358,   471,  1351,   854,
     604,   214,   422,   802,  1322,   867,   603,   603,   603,  1358,
    1166,   254,  1187,  1160,  1073,   116,   268,   343,   541,    20,
      33,    47,   548,   912,   922,   923,   924,   343,   604,  1160,
    1160,   450,  1104,  1073,  1073,  1110,    42,   326,   604,   581,
    1092,  1073,  1160,  1073,  1073,  1073,  1073,   604,   604,   604,
    1137,  1443,  1358,   604,  1110,  1071,   399,   193,   424,  1419,
    1419,  1419,   119,  1073,  1244,  1245,   139,  1051,   247,  1322,
     818,   604,   199,   241,   833,   604,   605,  1067,   605,  1239,
    1243,  1244,  1241,  1235,  1233,  1344,  1358,  1414,  1183,   195,
    1171,  1357,  1357,   610,  1201,  1202,  1360,   458,   598,   399,
     420,   451,  1378,   920,  1239,   603,   603,  1377,  1073,  1442,
    1164,  1119,  1116,  1129,   238,   238,  1116,  1129,  1122,  1121,
    1123,  1252,  1166,  1245,  1152,  1153,  1067,   605,  1181,   370,
     603,   980,  1073,   957,   942,   603,   941,   941,   119,   119,
     887,  1022,   986,   919,   889,   973,  1176,   983,   985,   975,
    1302,   880,   603,   928,   904,   904,   905,   899,   380,   890,
     899,   899,   924,    59,   568,   893,   895,   924,   924,    59,
     569,   569,   572,   899,   891,   905,   924,   904,   905,    25,
      68,    73,   119,   145,   342,   348,   384,   452,   551,   907,
     908,   909,   926,  1079,   572,   904,   924,    33,   904,   925,
     904,   904,   905,   603,   900,   906,   611,  1160,   466,  1355,
     135,   970,   604,   605,  1466,  1467,   604,  1157,   635,   645,
     471,   222,   231,   362,   676,   677,   678,   679,  1069,   443,
     604,   605,   674,  1355,   604,   604,   865,    18,   857,   955,
     956,  1358,   955,   955,  1186,   604,   604,   604,   604,   604,
      33,    20,   548,   912,    33,   913,   605,   604,   604,  1339,
     604,   604,   605,   604,   313,   243,   394,   604,   604,   604,
     604,   604,   604,   876,  1062,  1183,  1438,   604,   263,   354,
      62,   236,   335,   487,   500,   587,  1410,  1411,   581,  1420,
    1420,  1420,   604,   605,  1247,   228,   603,   821,   603,   834,
    1358,   832,   856,  1238,  1245,   604,  1437,    46,   200,  1168,
    1206,  1360,   605,   313,    74,   542,   399,  1379,   519,   519,
    1239,  1132,   348,  1125,  1129,  1129,   348,  1127,  1073,  1073,
     603,  1177,   179,   214,   561,  1147,  1148,  1151,  1142,  1346,
    1189,   831,   604,   603,   603,   955,   603,   603,   109,   523,
     526,   596,   597,  1341,  1342,   996,   907,  1027,   984,  1014,
     604,   929,  1358,   290,   930,   464,   554,   593,   901,   902,
     903,   603,   901,   901,   924,   572,   901,   603,   924,   901,
     918,  1355,   338,   911,  1341,   181,   556,   119,   241,   909,
     241,   342,   924,   925,   924,   925,   901,   343,   901,  1358,
     650,   657,   658,  1358,   448,   603,  1468,   604,  1355,   604,
     605,   674,  1471,   649,  1477,   675,   889,   910,   801,   805,
     603,   854,   604,   605,  1181,   603,   604,   604,   913,   925,
     343,  1073,   313,   165,  1066,  1066,   519,   519,   519,    16,
    1409,   193,   291,   292,   296,   297,  1422,  1423,  1245,   241,
     513,  1069,   824,   826,   827,  1358,   566,   835,   876,  1172,
    1346,  1169,  1177,   912,   915,  1202,   604,   604,  1380,  1443,
    1124,   562,  1126,   562,  1159,  1358,  1187,   935,   935,  1148,
     876,  1181,   604,   955,   955,   604,   955,   955,  1343,  1343,
     992,   228,   604,   605,   184,   368,   465,   348,   931,   903,
     959,  1339,   959,  1072,  1350,   338,   567,   489,   652,    52,
      65,   172,   213,   237,   248,   351,   432,   659,   706,   708,
     709,   710,   712,   713,   714,   715,   716,   717,   719,   727,
     728,   731,   742,   745,   747,   748,  1354,  1359,  1363,  1056,
    1054,   581,  1469,  1484,   678,  1358,  1351,   654,   655,   431,
     919,  1437,   802,   854,   803,    73,   240,   943,   946,   949,
     950,   951,   956,   343,   581,   944,   948,   950,   953,   945,
     947,   950,   952,   604,   604,  1410,   354,  1188,  1188,  1188,
    1188,  1423,   556,  1351,   828,   501,   829,   604,   605,   231,
     250,    73,   105,   218,   293,   311,   334,   511,   851,   852,
     853,  1281,   582,   583,   605,  1173,  1181,  1073,  1183,   914,
    1207,  1133,  1073,   603,  1073,   603,   604,   605,   181,  1146,
    1146,   604,   604,   943,   604,   604,   996,   603,  1358,   123,
     556,   604,   605,   604,  1072,  1073,   148,   653,   729,   732,
    1358,   183,   333,   720,   707,  1359,  1359,  1358,   711,   618,
     270,   421,   580,   751,    30,   749,   612,   604,    51,    61,
     260,   663,   910,   181,   651,  1478,   604,  1434,  1355,  1240,
     951,  1181,   604,   367,   953,   952,  1253,  1254,  1348,  1317,
    1070,  1189,   825,   827,   837,   521,  1240,   128,   128,  1240,
    1240,  1240,  1240,   603,   846,   853,   151,  1346,   386,  1194,
      70,  1323,  1438,  1159,  1159,  1358,   195,   238,   357,  1150,
    1149,   927,   943,   944,   945,   831,    50,   339,   429,   456,
     932,   932,   924,  1339,   924,  1073,  1073,   578,   734,   738,
     183,  1358,   722,   723,  1073,   681,   705,   706,   708,   710,
     712,   714,   715,   716,   717,   719,   727,   742,   745,   747,
     681,   752,   750,   743,   746,  1437,    61,   354,    61,   127,
     664,   665,  1079,  1485,  1069,   656,   910,   804,  1188,  1354,
     605,  1239,   915,   604,   829,   603,   839,   841,   836,  1355,
    1240,  1240,   268,   343,   541,  1191,  1192,  1191,  1189,  1360,
     502,   847,   848,  1240,  1181,  1358,   146,   157,   355,   518,
    1324,  1325,   256,  1326,   604,   604,    46,    46,   603,   603,
     604,     5,   119,   342,   348,   348,   730,   739,   142,   738,
     741,   228,   147,  1073,   147,   705,   609,   555,  1073,   682,
     751,   749,   354,   354,   127,   705,  1472,   135,  1479,  1437,
    1254,  1245,  1318,   603,   840,   841,   842,   298,   838,   841,
    1355,  1355,   849,   604,   605,   872,  1195,    46,    46,   146,
      46,  1325,   488,   518,  1327,  1328,  1156,  1158,   556,   123,
     578,   733,   735,  1073,   681,   147,   718,   213,   522,   270,
     609,   754,   135,   118,   680,   683,   744,  1359,   744,   141,
     657,   663,   438,  1329,   604,   605,   298,   844,   845,  1076,
     850,  1360,   848,   603,  1339,  1339,    46,  1339,    46,    46,
    1328,   604,   604,   932,   932,   736,   735,   741,   740,    52,
     721,  1358,   724,  1073,   753,    89,   164,   688,   703,  1358,
     147,   705,   609,   440,  1480,   211,  1323,   841,   605,   843,
     851,  1069,  1196,  1197,  1198,  1339,  1339,  1339,  1073,   147,
     522,   605,   681,   147,   681,   198,   605,   684,    80,    99,
     609,  1473,   705,    46,  1326,   845,   604,  1073,   604,   605,
     737,    52,   681,  1358,   725,   421,   147,   181,  1358,   910,
     181,   181,   705,  1339,   214,  1330,  1070,  1198,   522,   142,
     143,   726,   580,   685,   119,   704,   691,   692,  1188,   686,
     687,   343,   603,  1332,   681,   681,   722,   476,   478,   689,
     690,   691,   694,  1079,  1358,  1073,  1052,   256,   438,  1331,
     604,   610,  1333,  1334,  1348,   456,  1335,   605,   705,   182,
    1360,   604,   605,  1336,  1337,  1348,   690,  1334,   605,  1239,
    1337,  1069,  1245,  1070
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  However,
   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
   discussed.  */

#define YYFAIL		goto yyerrlab
#if defined YYFAIL
  /* This is here to suppress warnings from the GCC cpp's
     -Wunused-macros.  Normally we don't worry about that warning, but
     some users do, and we want to make it easy for users to remove
     YYFAIL uses, which will produce warnings from Bison 2.5.  */
#endif

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* This macro is provided for backward compatibility. */

#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
#else
static void
yy_stack_print (yybottom, yytop)
    yytype_int16 *yybottom;
    yytype_int16 *yytop;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
#else
static void
yy_reduce_print (yyvsp, yyrule)
    YYSTYPE *yyvsp;
    int yyrule;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (0, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  YYSIZE_T yysize1;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = 0;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - Assume YYFAIL is not used.  It's too flawed to consider.  See
       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
       for details.  YYERROR is fine as it does not invoke this
       function.
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                yysize1 = yysize + yytnamerr (0, yytname[yyx]);
                if (! (yysize <= yysize1
                       && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                  return 2;
                yysize = yysize1;
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  yysize1 = yysize + yystrlen (yyformat);
  if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
    return 2;
  yysize = yysize1;

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yymsg, yytype, yyvaluep)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  YYUSE (yyvaluep);

  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */
#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (void);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */


/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void)
#else
int
yyparse ()

#endif
#endif
{
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       `yyss': related to states.
       `yyvs': related to semantic values.

       Refer to the stacks thru separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yytoken = 0;
  yyss = yyssa;
  yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */
  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss_alloc, yyss);
	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:

/* Line 1806 of yacc.c  */
#line 1657 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 3:

/* Line 1806 of yacc.c  */
#line 1669 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex_input_stream *lip = YYLIP;

            if ((YYTHD->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
    break;

  case 5:

/* Line 1806 of yacc.c  */
#line 1694 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
    break;

  case 61:

/* Line 1806 of yacc.c  */
#line 1767 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 64:

/* Line 1806 of yacc.c  */
#line 1782 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[(2) - (4)].lex_str);
          }
    break;

  case 65:

/* Line 1806 of yacc.c  */
#line 1792 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(1) - (1)].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
    break;

  case 66:

/* Line 1806 of yacc.c  */
#line 1799 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[(2) - (2)].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
    break;

  case 67:

/* Line 1806 of yacc.c  */
#line 1809 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 68:

/* Line 1806 of yacc.c  */
#line 1816 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 73:

/* Line 1806 of yacc.c  */
#line 1831 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[(2) - (2)].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
    break;

  case 74:

/* Line 1806 of yacc.c  */
#line 1843 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
    break;

  case 75:

/* Line 1806 of yacc.c  */
#line 1851 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 76:

/* Line 1806 of yacc.c  */
#line 1862 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;
            lex->sql_command = SQLCOM_CHANGE_MASTER;
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /*
              resetting flags that can left from the previous CHANGE MASTER
            */
            lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_UNCHANGED;
            my_init_dynamic_array(&Lex->mi.repl_ignore_server_ids,
                                  sizeof(::server_id), 16, 16);
          }
    break;

  case 77:

/* Line 1806 of yacc.c  */
#line 1874 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 80:

/* Line 1806 of yacc.c  */
#line 1884 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.host = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 81:

/* Line 1806 of yacc.c  */
#line 1888 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.user = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 82:

/* Line 1806 of yacc.c  */
#line 1892 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.password = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 83:

/* Line 1806 of yacc.c  */
#line 1896 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.port = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 84:

/* Line 1806 of yacc.c  */
#line 1900 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.connect_retry = (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 85:

/* Line 1806 of yacc.c  */
#line 1904 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl= (yyvsp[(3) - (3)].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 86:

/* Line 1806 of yacc.c  */
#line 1909 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_ca= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 87:

/* Line 1806 of yacc.c  */
#line 1913 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_capath= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 88:

/* Line 1806 of yacc.c  */
#line 1917 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cert= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 89:

/* Line 1806 of yacc.c  */
#line 1921 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_cipher= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 90:

/* Line 1806 of yacc.c  */
#line 1925 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_key= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 91:

/* Line 1806 of yacc.c  */
#line 1929 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[(3) - (3)].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
    break;

  case 92:

/* Line 1806 of yacc.c  */
#line 1935 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[(3) - (3)].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
    break;

  case 93:

/* Line 1806 of yacc.c  */
#line 1966 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
    break;

  case 98:

/* Line 1806 of yacc.c  */
#line 1981 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[(1) - (1)].ulong_num)));
          }
    break;

  case 99:

/* Line 1806 of yacc.c  */
#line 1987 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.log_file_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 100:

/* Line 1806 of yacc.c  */
#line 1991 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.pos = (yyvsp[(3) - (3)].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
    break;

  case 101:

/* Line 1806 of yacc.c  */
#line 2007 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_name = (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 102:

/* Line 1806 of yacc.c  */
#line 2011 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->mi.relay_log_pos = (yyvsp[(3) - (3)].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos = max(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
    break;

  case 103:

/* Line 1806 of yacc.c  */
#line 2022 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(5) - (5)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            /*
              For CREATE TABLE, an non-existing table is not an error.
              Instruct open_tables() to just take an MDL lock if the
              table does not exist.
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_IF_EXISTS;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.options=(yyvsp[(2) - (5)].num) | (yyvsp[(4) - (5)].num);
            lex->create_info.db_type= ha_default_handlerton(thd);
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
    break;

  case 104:

/* Line 1806 of yacc.c  */
#line 2048 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= YYTHD->lex;
            lex->current_select= &lex->select_lex; 
            if (!lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(YYTHD);
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  ha_resolve_storage_engine_name(lex->create_info.db_type),
                                  (yyvsp[(5) - (7)].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
    break;

  case 105:

/* Line 1806 of yacc.c  */
#line 2063 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 106:

/* Line 1806 of yacc.c  */
#line 2068 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 107:

/* Line 1806 of yacc.c  */
#line 2074 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 108:

/* Line 1806 of yacc.c  */
#line 2079 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 109:

/* Line 1806 of yacc.c  */
#line 2085 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index_prepare(Lex, (yyvsp[(7) - (7)].table)))
              MYSQL_YYABORT;
          }
    break;

  case 110:

/* Line 1806 of yacc.c  */
#line 2090 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index(Lex, (yyvsp[(2) - (12)].key_type), (yyvsp[(4) - (12)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 111:

/* Line 1806 of yacc.c  */
#line 2095 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 112:

/* Line 1806 of yacc.c  */
#line 2100 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[(4) - (6)].lex_str);
            lex->create_info.options=(yyvsp[(3) - (6)].num);
          }
    break;

  case 113:

/* Line 1806 of yacc.c  */
#line 2107 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_view_mode= VIEW_CREATE_NEW;
            Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
    break;

  case 114:

/* Line 1806 of yacc.c  */
#line 2113 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 115:

/* Line 1806 of yacc.c  */
#line 2115 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
    break;

  case 116:

/* Line 1806 of yacc.c  */
#line 2119 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
    break;

  case 117:

/* Line 1806 of yacc.c  */
#line 2123 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
    break;

  case 118:

/* Line 1806 of yacc.c  */
#line 2127 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
    break;

  case 119:

/* Line 1806 of yacc.c  */
#line 2138 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.server_name= (yyvsp[(2) - (10)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(2) - (10)].lex_str).length;
            Lex->server_options.scheme= (yyvsp[(6) - (10)].lex_str).str;
          }
    break;

  case 122:

/* Line 1806 of yacc.c  */
#line 2152 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.username= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 123:

/* Line 1806 of yacc.c  */
#line 2156 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.host= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 124:

/* Line 1806 of yacc.c  */
#line 2160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 125:

/* Line 1806 of yacc.c  */
#line 2164 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.owner= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 126:

/* Line 1806 of yacc.c  */
#line 2168 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.password= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 127:

/* Line 1806 of yacc.c  */
#line 2172 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.socket= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 128:

/* Line 1806 of yacc.c  */
#line 2176 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->server_options.port= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 129:

/* Line 1806 of yacc.c  */
#line 2183 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->create_info.options= (yyvsp[(3) - (4)].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
    break;

  case 130:

/* Line 1806 of yacc.c  */
#line 2203 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
    break;

  case 131:

/* Line 1806 of yacc.c  */
#line 2214 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_expression= (yyvsp[(2) - (3)].item);
            Lex->event_parse_data->interval= (yyvsp[(3) - (3)].interval);
          }
    break;

  case 133:

/* Line 1806 of yacc.c  */
#line 2221 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[(2) - (2)].item);
          }
    break;

  case 134:

/* Line 1806 of yacc.c  */
#line 2227 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 135:

/* Line 1806 of yacc.c  */
#line 2229 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            (yyval.num)= 1;
          }
    break;

  case 136:

/* Line 1806 of yacc.c  */
#line 2234 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 137:

/* Line 1806 of yacc.c  */
#line 2239 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            (yyval.num)= 1;
          }
    break;

  case 138:

/* Line 1806 of yacc.c  */
#line 2247 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
    break;

  case 139:

/* Line 1806 of yacc.c  */
#line 2254 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_starts= (yyvsp[(2) - (2)].item);
          }
    break;

  case 141:

/* Line 1806 of yacc.c  */
#line 2262 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->item_ends= (yyvsp[(2) - (2)].item);
          }
    break;

  case 142:

/* Line 1806 of yacc.c  */
#line 2268 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 144:

/* Line 1806 of yacc.c  */
#line 2274 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
    break;

  case 145:

/* Line 1806 of yacc.c  */
#line 2280 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
    break;

  case 146:

/* Line 1806 of yacc.c  */
#line 2288 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 147:

/* Line 1806 of yacc.c  */
#line 2290 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[(2) - (2)].lex_str);
            (yyval.num)= 1;
          }
    break;

  case 148:

/* Line 1806 of yacc.c  */
#line 2297 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 149:

/* Line 1806 of yacc.c  */
#line 2340 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
    break;

  case 163:

/* Line 1806 of yacc.c  */
#line 2372 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
    break;

  case 164:

/* Line 1806 of yacc.c  */
#line 2387 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(1) - (3)].lex_str).str || check_db_name(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[(3) - (3)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(YYTHD);
          }
    break;

  case 165:

/* Line 1806 of yacc.c  */
#line 2403 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[(1) - (1)].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[(1) - (1)].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
    break;

  case 166:

/* Line 1806 of yacc.c  */
#line 2421 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 167:

/* Line 1806 of yacc.c  */
#line 2422 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 168:

/* Line 1806 of yacc.c  */
#line 2426 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 169:

/* Line 1806 of yacc.c  */
#line 2427 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 170:

/* Line 1806 of yacc.c  */
#line 2433 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 171:

/* Line 1806 of yacc.c  */
#line 2435 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* Just parse it, we only have one language for now. */ }
    break;

  case 172:

/* Line 1806 of yacc.c  */
#line 2437 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
    break;

  case 173:

/* Line 1806 of yacc.c  */
#line 2439 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
    break;

  case 174:

/* Line 1806 of yacc.c  */
#line 2441 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
    break;

  case 175:

/* Line 1806 of yacc.c  */
#line 2443 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
    break;

  case 176:

/* Line 1806 of yacc.c  */
#line 2445 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 177:

/* Line 1806 of yacc.c  */
#line 2450 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 178:

/* Line 1806 of yacc.c  */
#line 2451 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= TRUE; }
    break;

  case 179:

/* Line 1806 of yacc.c  */
#line 2452 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sp_chistics.detistic= FALSE; }
    break;

  case 180:

/* Line 1806 of yacc.c  */
#line 2457 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
    break;

  case 181:

/* Line 1806 of yacc.c  */
#line 2461 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
    break;

  case 182:

/* Line 1806 of yacc.c  */
#line 2468 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[(2) - (2)].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, YYTHD, (yyvsp[(2) - (2)].spname), TYPE_ENUM_PROCEDURE);
          }
    break;

  case 183:

/* Line 1806 of yacc.c  */
#line 2476 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 188:

/* Line 1806 of yacc.c  */
#line 2492 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
           Lex->value_list.push_back((yyvsp[(3) - (3)].item));
          }
    break;

  case 189:

/* Line 1806 of yacc.c  */
#line 2496 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->value_list.push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 194:

/* Line 1806 of yacc.c  */
#line 2514 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
          }
    break;

  case 195:

/* Line 1806 of yacc.c  */
#line 2534 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(1) - (3)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(3) - (3)].num),
                                                     sp_param_in);

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(3) - (3)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 200:

/* Line 1806 of yacc.c  */
#line 2571 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (4)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable_t *spvar= spc->push_variable(&(yyvsp[(3) - (4)].lex_str),
                                                     (enum enum_field_types)(yyvsp[(4) - (4)].num),
                                                     (sp_param_mode_t)(yyvsp[(1) - (4)].num));

            if (lex->sphead->fill_field_definition(YYTHD, lex,
                                                   (enum enum_field_types) (yyvsp[(4) - (4)].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
    break;

  case 201:

/* Line 1806 of yacc.c  */
#line 2596 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 202:

/* Line 1806 of yacc.c  */
#line 2597 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_in; }
    break;

  case 203:

/* Line 1806 of yacc.c  */
#line 2598 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_out; }
    break;

  case 204:

/* Line 1806 of yacc.c  */
#line 2599 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= sp_param_inout; }
    break;

  case 205:

/* Line 1806 of yacc.c  */
#line 2603 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 207:

/* Line 1806 of yacc.c  */
#line 2608 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 209:

/* Line 1806 of yacc.c  */
#line 2614 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 210:

/* Line 1806 of yacc.c  */
#line 2618 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[(2) - (3)].spblock).vars || (yyvsp[(2) - (3)].spblock).conds) && ((yyvsp[(1) - (3)].spblock).curs || (yyvsp[(1) - (3)].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[(2) - (3)].spblock).curs && (yyvsp[(1) - (3)].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[(1) - (3)].spblock).vars + (yyvsp[(2) - (3)].spblock).vars;
            (yyval.spblock).conds= (yyvsp[(1) - (3)].spblock).conds + (yyvsp[(2) - (3)].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[(1) - (3)].spblock).hndlrs + (yyvsp[(2) - (3)].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[(1) - (3)].spblock).curs + (yyvsp[(2) - (3)].spblock).curs;
          }
    break;

  case 211:

/* Line 1806 of yacc.c  */
#line 2644 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(YYTHD);
            lex->spcont->declare_var_boundary((yyvsp[(2) - (2)].num));
          }
    break;

  case 212:

/* Line 1806 of yacc.c  */
#line 2652 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[(4) - (5)].num);
            Item *dflt_value_item= (yyvsp[(5) - (5)].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[(2) - (5)].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable_t *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->dflt= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(YYTHD, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[(2) - (5)].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
    break;

  case 213:

/* Line 1806 of yacc.c  */
#line 2709 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_cond(&(yyvsp[(2) - (5)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if(YYTHD->lex->spcont->push_cond(&(yyvsp[(2) - (5)].lex_str), (yyvsp[(5) - (5)].spcondtype)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
    break;

  case 214:

/* Line 1806 of yacc.c  */
#line 2724 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->spcont= lex->spcont->push_context(LABEL_HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, (yyvsp[(2) - (4)].num),
                                      ctx->current_var_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)))
              MYSQL_YYABORT;
          }
    break;

  case 215:

/* Line 1806 of yacc.c  */
#line 2740 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[(2) - (7)].num) == SP_HANDLER_CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx,
                                      ctx->current_var_count());
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx, 0);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= (yyvsp[(6) - (7)].num);
            lex->spcont->add_handlers((yyvsp[(6) - (7)].num));
          }
    break;

  case 216:

/* Line 1806 of yacc.c  */
#line 2772 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor(&(yyvsp[(2) - (5)].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[(2) - (5)].lex_str).str);
              delete (yyvsp[(5) - (5)].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[(5) - (5)].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->push_cursor(&(yyvsp[(2) - (5)].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
    break;

  case 217:

/* Line 1806 of yacc.c  */
#line 2797 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD);
          }
    break;

  case 218:

/* Line 1806 of yacc.c  */
#line 2801 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 219:

/* Line 1806 of yacc.c  */
#line 2820 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_EXIT; }
    break;

  case 220:

/* Line 1806 of yacc.c  */
#line 2821 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= SP_HANDLER_CONTINUE; }
    break;

  case 221:

/* Line 1806 of yacc.c  */
#line 2827 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 222:

/* Line 1806 of yacc.c  */
#line 2829 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)+= 1; }
    break;

  case 223:

/* Line 1806 of yacc.c  */
#line 2834 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->find_handler((yyvsp[(1) - (1)].spcondtype)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[(1) - (1)].spcondtype));
              ctx->push_handler((yyvsp[(1) - (1)].spcondtype));
            }
          }
    break;

  case 224:

/* Line 1806 of yacc.c  */
#line 2857 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* mysql errno */
            if ((yyvsp[(1) - (1)].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::number;
            (yyval.spcondtype)->mysqlerr= (yyvsp[(1) - (1)].ulong_num);
          }
    break;

  case 226:

/* Line 1806 of yacc.c  */
#line 2874 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* SQLSTATE */
            if (!sp_cond_check(&(yyvsp[(3) - (3)].lex_str)))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::state;
            memcpy((yyval.spcondtype)->sqlstate, (yyvsp[(3) - (3)].lex_str).str, SQLSTATE_LENGTH);
            (yyval.spcondtype)->sqlstate[SQLSTATE_LENGTH]= '\0';
          }
    break;

  case 227:

/* Line 1806 of yacc.c  */
#line 2890 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 228:

/* Line 1806 of yacc.c  */
#line 2891 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 229:

/* Line 1806 of yacc.c  */
#line 2896 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype);
          }
    break;

  case 230:

/* Line 1806 of yacc.c  */
#line 2900 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= Lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if ((yyval.spcondtype) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 231:

/* Line 1806 of yacc.c  */
#line 2909 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::warning;
          }
    break;

  case 232:

/* Line 1806 of yacc.c  */
#line 2916 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::notfound;
          }
    break;

  case 233:

/* Line 1806 of yacc.c  */
#line 2923 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.spcondtype)= (sp_cond_type_t *)YYTHD->alloc(sizeof(sp_cond_type_t));
            if ((yyval.spcondtype) == NULL)
              MYSQL_YYABORT;
            (yyval.spcondtype)->type= sp_cond_type_t::exception;
          }
    break;

  case 234:

/* Line 1806 of yacc.c  */
#line 2933 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_stmt= new (thd->mem_root) Signal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 235:

/* Line 1806 of yacc.c  */
#line 2948 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_cond_type_t *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_cond(&(yyvsp[(1) - (1)].lex_str));
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_cond_type_t::state)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondtype)= cond;
          }
    break;

  case 236:

/* Line 1806 of yacc.c  */
#line 2971 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 237:

/* Line 1806 of yacc.c  */
#line 2976 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.spcondtype)= NULL; }
    break;

  case 238:

/* Line 1806 of yacc.c  */
#line 2978 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.spcondtype)= (yyvsp[(1) - (1)].spcondtype); }
    break;

  case 239:

/* Line 1806 of yacc.c  */
#line 2983 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            YYTHD->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
    break;

  case 241:

/* Line 1806 of yacc.c  */
#line 2991 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(1) - (3)].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[(3) - (3)].item);
          }
    break;

  case 242:

/* Line 1806 of yacc.c  */
#line 3000 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Set_signal_information *info;
            info= & YYTHD->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[(3) - (5)].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[(5) - (5)].item);
          }
    break;

  case 243:

/* Line 1806 of yacc.c  */
#line 3019 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 244:

/* Line 1806 of yacc.c  */
#line 3021 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if ((yyvsp[(1) - (1)].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[(1) - (1)].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[(1) - (1)].item);
          }
    break;

  case 245:

/* Line 1806 of yacc.c  */
#line 3039 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 246:

/* Line 1806 of yacc.c  */
#line 3045 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
    break;

  case 247:

/* Line 1806 of yacc.c  */
#line 3047 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
    break;

  case 248:

/* Line 1806 of yacc.c  */
#line 3049 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
    break;

  case 249:

/* Line 1806 of yacc.c  */
#line 3051 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
    break;

  case 250:

/* Line 1806 of yacc.c  */
#line 3053 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
    break;

  case 251:

/* Line 1806 of yacc.c  */
#line 3055 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
    break;

  case 252:

/* Line 1806 of yacc.c  */
#line 3057 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
    break;

  case 253:

/* Line 1806 of yacc.c  */
#line 3059 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
    break;

  case 254:

/* Line 1806 of yacc.c  */
#line 3061 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
    break;

  case 255:

/* Line 1806 of yacc.c  */
#line 3063 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
    break;

  case 256:

/* Line 1806 of yacc.c  */
#line 3065 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
    break;

  case 257:

/* Line 1806 of yacc.c  */
#line 3067 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
    break;

  case 258:

/* Line 1806 of yacc.c  */
#line 3072 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_stmt= new (thd->mem_root) Resignal_statement(lex, (yyvsp[(2) - (3)].spcondtype),
                                                      state->m_set_signal_info);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 259:

/* Line 1806 of yacc.c  */
#line 3087 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(1) - (1)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(1) - (1)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= 1;
          }
    break;

  case 260:

/* Line 1806 of yacc.c  */
#line 3102 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable(&(yyvsp[(3) - (3)].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->push_variable(&(yyvsp[(3) - (3)].lex_str), (enum_field_types)0, sp_param_in);
            (yyval.num)= (yyvsp[(1) - (3)].num) + 1;
          }
    break;

  case 261:

/* Line 1806 of yacc.c  */
#line 3119 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = NULL; }
    break;

  case 262:

/* Line 1806 of yacc.c  */
#line 3120 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 276:

/* Line 1806 of yacc.c  */
#line 3141 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sphead->new_cont_backpatch(NULL); }
    break;

  case 277:

/* Line 1806 of yacc.c  */
#line 3143 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sphead->do_cont_backpatch(); }
    break;

  case 278:

/* Line 1806 of yacc.c  */
#line 3147 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
    break;

  case 279:

/* Line 1806 of yacc.c  */
#line 3156 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_end() - sp->m_tmp_query;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
    break;

  case 280:

/* Line 1806 of yacc.c  */
#line 3204 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 281:

/* Line 1806 of yacc.c  */
#line 3206 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[(3) - (3)].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 282:

/* Line 1806 of yacc.c  */
#line 3232 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label((char *)"", lex->sphead->instructions());
          }
    break;

  case 283:

/* Line 1806 of yacc.c  */
#line 3238 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 284:

/* Line 1806 of yacc.c  */
#line 3247 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == SP_LAB_BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
    break;

  case 285:

/* Line 1806 of yacc.c  */
#line 3300 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(2) - (2)].lex_str).str);

            if (! lab || lab->type != SP_LAB_ITER)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
    break;

  case 286:

/* Line 1806 of yacc.c  */
#line 3343 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 287:

/* Line 1806 of yacc.c  */
#line 3363 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(3) - (4)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(3) - (4)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 288:

/* Line 1806 of yacc.c  */
#line 3380 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 289:

/* Line 1806 of yacc.c  */
#line 3385 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor(&(yyvsp[(2) - (2)].lex_str), &offset))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[(2) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 293:

/* Line 1806 of yacc.c  */
#line 3411 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 294:

/* Line 1806 of yacc.c  */
#line 3431 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable_t *spv;

            if (!spc || !(spv = spc->find_variable(&(yyvsp[(3) - (3)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
    break;

  case 295:

/* Line 1806 of yacc.c  */
#line 3453 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 296:

/* Line 1806 of yacc.c  */
#line 3455 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[(2) - (3)].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label((char *)"", 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 297:

/* Line 1806 of yacc.c  */
#line 3471 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label((char *)"", 0));
          }
    break;

  case 298:

/* Line 1806 of yacc.c  */
#line 3483 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
    break;

  case 304:

/* Line 1806 of yacc.c  */
#line 3503 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 305:

/* Line 1806 of yacc.c  */
#line 3509 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 306:

/* Line 1806 of yacc.c  */
#line 3522 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
    break;

  case 307:

/* Line 1806 of yacc.c  */
#line 3530 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
    break;

  case 308:

/* Line 1806 of yacc.c  */
#line 3538 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
    break;

  case 313:

/* Line 1806 of yacc.c  */
#line 3556 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 314:

/* Line 1806 of yacc.c  */
#line 3560 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 315:

/* Line 1806 of yacc.c  */
#line 3572 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 316:

/* Line 1806 of yacc.c  */
#line 3581 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sphead->reset_lex(YYTHD); /* For expr $3 */
          }
    break;

  case 317:

/* Line 1806 of yacc.c  */
#line 3585 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[(3) - (3)].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 318:

/* Line 1806 of yacc.c  */
#line 3595 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
    break;

  case 319:

/* Line 1806 of yacc.c  */
#line 3604 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 321:

/* Line 1806 of yacc.c  */
#line 3619 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                           lex->sphead->instructions());
              lab->type= SP_LAB_ITER;
            }
          }
    break;

  case 322:

/* Line 1806 of yacc.c  */
#line 3637 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
    break;

  case 323:

/* Line 1806 of yacc.c  */
#line 3654 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 324:

/* Line 1806 of yacc.c  */
#line 3655 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 325:

/* Line 1806 of yacc.c  */
#line 3660 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label_t *lab= ctx->find_label((yyvsp[(1) - (2)].lex_str).str);

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[(1) - (2)].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label((yyvsp[(1) - (2)].lex_str).str,
                                         lex->sphead->instructions());
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 326:

/* Line 1806 of yacc.c  */
#line 3676 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_label_t *lab= lex->spcont->pop_label();

            if ((yyvsp[(5) - (5)].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[(5) - (5)].lex_str).str, lab->name) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[(5) - (5)].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 327:

/* Line 1806 of yacc.c  */
#line 3692 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->push_label((char *)"", ip);
            lab->type= SP_LAB_BEGIN;
          }
    break;

  case 328:

/* Line 1806 of yacc.c  */
#line 3699 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
    break;

  case 329:

/* Line 1806 of yacc.c  */
#line 3707 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(LABEL_DEFAULT_SCOPE);
          }
    break;

  case 330:

/* Line 1806 of yacc.c  */
#line 3716 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[(3) - (5)].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[(3) - (5)].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[(3) - (5)].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
    break;

  case 331:

/* Line 1806 of yacc.c  */
#line 3744 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
    break;

  case 332:

/* Line 1806 of yacc.c  */
#line 3754 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 333:

/* Line 1806 of yacc.c  */
#line 3756 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(3) - (4)].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(YYTHD))
              MYSQL_YYABORT;
          }
    break;

  case 334:

/* Line 1806 of yacc.c  */
#line 3772 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
    break;

  case 335:

/* Line 1806 of yacc.c  */
#line 3783 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sphead->reset_lex(YYTHD); }
    break;

  case 336:

/* Line 1806 of yacc.c  */
#line 3785 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label_t *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[(5) - (7)].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(YYTHD))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
    break;

  case 337:

/* Line 1806 of yacc.c  */
#line 3804 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
    break;

  case 338:

/* Line 1806 of yacc.c  */
#line 3806 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
    break;

  case 339:

/* Line 1806 of yacc.c  */
#line 3811 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
    break;

  case 340:

/* Line 1806 of yacc.c  */
#line 3813 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
    break;

  case 341:

/* Line 1806 of yacc.c  */
#line 3815 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
    break;

  case 345:

/* Line 1806 of yacc.c  */
#line 3849 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 346:

/* Line 1806 of yacc.c  */
#line 3851 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(4) - (4)].lex_str).str;
          }
    break;

  case 347:

/* Line 1806 of yacc.c  */
#line 3861 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
    break;

  case 348:

/* Line 1806 of yacc.c  */
#line 3867 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
    break;

  case 353:

/* Line 1806 of yacc.c  */
#line 3890 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 400:

/* Line 1806 of yacc.c  */
#line 3984 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 401:

/* Line 1806 of yacc.c  */
#line 3992 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 402:

/* Line 1806 of yacc.c  */
#line 4000 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 403:

/* Line 1806 of yacc.c  */
#line 4008 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 404:

/* Line 1806 of yacc.c  */
#line 4020 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[(1) - (1)].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
    break;

  case 405:

/* Line 1806 of yacc.c  */
#line 4032 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
    break;

  case 406:

/* Line 1806 of yacc.c  */
#line 4037 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
    break;

  case 407:

/* Line 1806 of yacc.c  */
#line 4042 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
    break;

  case 408:

/* Line 1806 of yacc.c  */
#line 4050 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 409:

/* Line 1806 of yacc.c  */
#line 4058 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 410:

/* Line 1806 of yacc.c  */
#line 4066 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 411:

/* Line 1806 of yacc.c  */
#line 4074 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 412:

/* Line 1806 of yacc.c  */
#line 4082 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 413:

/* Line 1806 of yacc.c  */
#line 4090 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[(3) - (3)].ulonglong_number);
          }
    break;

  case 414:

/* Line 1806 of yacc.c  */
#line 4098 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 415:

/* Line 1806 of yacc.c  */
#line 4111 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[(3) - (3)].lex_str).str;
          }
    break;

  case 416:

/* Line 1806 of yacc.c  */
#line 4124 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 419:

/* Line 1806 of yacc.c  */
#line 4143 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
    break;

  case 420:

/* Line 1806 of yacc.c  */
#line 4148 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
    break;

  case 421:

/* Line 1806 of yacc.c  */
#line 4160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ulonglong_number)= (yyvsp[(1) - (1)].ulong_num);}
    break;

  case 422:

/* Line 1806 of yacc.c  */
#line 4162 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[(1) - (1)].lex_str).str;
            uint str_len= (yyvsp[(1) - (1)].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                case 'm':
                case 'M':
                  text_shift_number+=10;
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
    break;

  case 423:

/* Line 1806 of yacc.c  */
#line 4212 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 424:

/* Line 1806 of yacc.c  */
#line 4215 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 425:

/* Line 1806 of yacc.c  */
#line 4217 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(2) - (2)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 426:

/* Line 1806 of yacc.c  */
#line 4232 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            TABLE_LIST *src_table;
            LEX *lex= thd->lex;

            lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            src_table= lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (4)].table), NULL, 0,
                                                         TL_READ,
                                                         MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
    break;

  case 427:

/* Line 1806 of yacc.c  */
#line 4251 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 428:

/* Line 1806 of yacc.c  */
#line 4254 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 429:

/* Line 1806 of yacc.c  */
#line 4255 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 430:

/* Line 1806 of yacc.c  */
#line 4259 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 431:

/* Line 1806 of yacc.c  */
#line 4261 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 432:

/* Line 1806 of yacc.c  */
#line 4262 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 433:

/* Line 1806 of yacc.c  */
#line 4264 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 434:

/* Line 1806 of yacc.c  */
#line 4265 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 435:

/* Line 1806 of yacc.c  */
#line 4270 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
    break;

  case 436:

/* Line 1806 of yacc.c  */
#line 4306 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 438:

/* Line 1806 of yacc.c  */
#line 4312 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= ALTER_PARTITION;
            }
          }
    break;

  case 440:

/* Line 1806 of yacc.c  */
#line 4330 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
    break;

  case 441:

/* Line 1806 of yacc.c  */
#line 4349 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
    break;

  case 442:

/* Line 1806 of yacc.c  */
#line 4361 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 444:

/* Line 1806 of yacc.c  */
#line 4370 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
    break;

  case 445:

/* Line 1806 of yacc.c  */
#line 4377 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->part_type= HASH_PARTITION; }
    break;

  case 446:

/* Line 1806 of yacc.c  */
#line 4378 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 447:

/* Line 1806 of yacc.c  */
#line 4380 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 448:

/* Line 1806 of yacc.c  */
#line 4382 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->part_type= RANGE_PARTITION; }
    break;

  case 449:

/* Line 1806 of yacc.c  */
#line 4384 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 450:

/* Line 1806 of yacc.c  */
#line 4386 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->part_type= LIST_PARTITION; }
    break;

  case 451:

/* Line 1806 of yacc.c  */
#line 4390 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 452:

/* Line 1806 of yacc.c  */
#line 4392 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->linear_hash_ind= TRUE;}
    break;

  case 453:

/* Line 1806 of yacc.c  */
#line 4396 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 454:

/* Line 1806 of yacc.c  */
#line 4397 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 455:

/* Line 1806 of yacc.c  */
#line 4401 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 456:

/* Line 1806 of yacc.c  */
#line 4402 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 457:

/* Line 1806 of yacc.c  */
#line 4407 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 458:

/* Line 1806 of yacc.c  */
#line 4426 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
    break;

  case 459:

/* Line 1806 of yacc.c  */
#line 4436 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
    break;

  case 460:

/* Line 1806 of yacc.c  */
#line 4447 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->part_info->set_part_expr((yyvsp[(2) - (5)].simple_string)+1, (yyvsp[(3) - (5)].item), (yyvsp[(4) - (5)].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
    break;

  case 461:

/* Line 1806 of yacc.c  */
#line 4455 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 462:

/* Line 1806 of yacc.c  */
#line 4457 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 463:

/* Line 1806 of yacc.c  */
#line 4472 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 464:

/* Line 1806 of yacc.c  */
#line 4474 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->subpart_type= HASH_PARTITION; }
    break;

  case 465:

/* Line 1806 of yacc.c  */
#line 4475 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 466:

/* Line 1806 of yacc.c  */
#line 4478 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
    break;

  case 467:

/* Line 1806 of yacc.c  */
#line 4483 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 468:

/* Line 1806 of yacc.c  */
#line 4487 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 469:

/* Line 1806 of yacc.c  */
#line 4488 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 470:

/* Line 1806 of yacc.c  */
#line 4493 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
    break;

  case 471:

/* Line 1806 of yacc.c  */
#line 4511 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[(1) - (1)].item);
          }
    break;

  case 472:

/* Line 1806 of yacc.c  */
#line 4526 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 473:

/* Line 1806 of yacc.c  */
#line 4528 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            uint num_parts= (yyvsp[(2) - (2)].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
    break;

  case 474:

/* Line 1806 of yacc.c  */
#line 4543 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
    break;

  case 475:

/* Line 1806 of yacc.c  */
#line 4559 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 476:

/* Line 1806 of yacc.c  */
#line 4580 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 477:

/* Line 1806 of yacc.c  */
#line 4581 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 478:

/* Line 1806 of yacc.c  */
#line 4586 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
    break;

  case 479:

/* Line 1806 of yacc.c  */
#line 4605 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 480:

/* Line 1806 of yacc.c  */
#line 4610 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            p_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str;
          }
    break;

  case 481:

/* Line 1806 of yacc.c  */
#line 4619 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
    break;

  case 482:

/* Line 1806 of yacc.c  */
#line 4641 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
    break;

  case 483:

/* Line 1806 of yacc.c  */
#line 4656 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 484:

/* Line 1806 of yacc.c  */
#line 4658 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
    break;

  case 485:

/* Line 1806 of yacc.c  */
#line 4673 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 486:

/* Line 1806 of yacc.c  */
#line 4678 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 487:

/* Line 1806 of yacc.c  */
#line 4699 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 488:

/* Line 1806 of yacc.c  */
#line 4704 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
    break;

  case 489:

/* Line 1806 of yacc.c  */
#line 4733 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 490:

/* Line 1806 of yacc.c  */
#line 4744 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 491:

/* Line 1806 of yacc.c  */
#line 4745 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 492:

/* Line 1806 of yacc.c  */
#line 4750 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 493:

/* Line 1806 of yacc.c  */
#line 4761 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 494:

/* Line 1806 of yacc.c  */
#line 4763 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
    break;

  case 495:

/* Line 1806 of yacc.c  */
#line 4786 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 496:

/* Line 1806 of yacc.c  */
#line 4787 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 497:

/* Line 1806 of yacc.c  */
#line 4792 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 498:

/* Line 1806 of yacc.c  */
#line 4805 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[(1) - (1)].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(YYTHD, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 499:

/* Line 1806 of yacc.c  */
#line 4825 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 500:

/* Line 1806 of yacc.c  */
#line 4839 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
    break;

  case 501:

/* Line 1806 of yacc.c  */
#line 4864 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 502:

/* Line 1806 of yacc.c  */
#line 4865 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 503:

/* Line 1806 of yacc.c  */
#line 4870 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
    break;

  case 504:

/* Line 1806 of yacc.c  */
#line 4902 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 505:

/* Line 1806 of yacc.c  */
#line 4907 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->partition_name= (yyvsp[(1) - (1)].lex_str).str; }
    break;

  case 506:

/* Line 1806 of yacc.c  */
#line 4911 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 507:

/* Line 1806 of yacc.c  */
#line 4912 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 508:

/* Line 1806 of yacc.c  */
#line 4916 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 509:

/* Line 1806 of yacc.c  */
#line 4917 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 510:

/* Line 1806 of yacc.c  */
#line 4922 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 511:

/* Line 1806 of yacc.c  */
#line 4924 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[(4) - (4)].db_type);
            part_info->default_engine_type= (yyvsp[(4) - (4)].db_type);
          }
    break;

  case 512:

/* Line 1806 of yacc.c  */
#line 4930 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 513:

/* Line 1806 of yacc.c  */
#line 4932 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 514:

/* Line 1806 of yacc.c  */
#line 4934 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[(3) - (3)].ulonglong_number); }
    break;

  case 515:

/* Line 1806 of yacc.c  */
#line 4936 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 516:

/* Line 1806 of yacc.c  */
#line 4938 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[(4) - (4)].lex_str).str; }
    break;

  case 517:

/* Line 1806 of yacc.c  */
#line 4940 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[(3) - (3)].lex_str).str; }
    break;

  case 518:

/* Line 1806 of yacc.c  */
#line 4949 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 519:

/* Line 1806 of yacc.c  */
#line 4964 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 520:

/* Line 1806 of yacc.c  */
#line 4968 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
    break;

  case 521:

/* Line 1806 of yacc.c  */
#line 4978 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 522:

/* Line 1806 of yacc.c  */
#line 4979 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 523:

/* Line 1806 of yacc.c  */
#line 4983 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 524:

/* Line 1806 of yacc.c  */
#line 4984 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 525:

/* Line 1806 of yacc.c  */
#line 4988 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 526:

/* Line 1806 of yacc.c  */
#line 4989 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 527:

/* Line 1806 of yacc.c  */
#line 4993 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 528:

/* Line 1806 of yacc.c  */
#line 4994 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 529:

/* Line 1806 of yacc.c  */
#line 4998 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 530:

/* Line 1806 of yacc.c  */
#line 4999 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (1)].num);}
    break;

  case 531:

/* Line 1806 of yacc.c  */
#line 5003 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (1)].num); }
    break;

  case 532:

/* Line 1806 of yacc.c  */
#line 5004 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 533:

/* Line 1806 of yacc.c  */
#line 5008 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
    break;

  case 534:

/* Line 1806 of yacc.c  */
#line 5012 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 535:

/* Line 1806 of yacc.c  */
#line 5013 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS; }
    break;

  case 543:

/* Line 1806 of yacc.c  */
#line 5034 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.db_type= (yyvsp[(3) - (3)].db_type);
            if ((yyvsp[(3) - (3)].db_type))
              Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
    break;

  case 544:

/* Line 1806 of yacc.c  */
#line 5040 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.max_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
    break;

  case 545:

/* Line 1806 of yacc.c  */
#line 5045 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.min_rows= (yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
    break;

  case 546:

/* Line 1806 of yacc.c  */
#line 5050 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.avg_row_length=(yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
    break;

  case 547:

/* Line 1806 of yacc.c  */
#line 5055 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.password=(yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
    break;

  case 548:

/* Line 1806 of yacc.c  */
#line 5060 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.comment=(yyvsp[(3) - (3)].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
    break;

  case 549:

/* Line 1806 of yacc.c  */
#line 5065 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.auto_increment_value=(yyvsp[(3) - (3)].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
    break;

  case 550:

/* Line 1806 of yacc.c  */
#line 5070 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            switch((yyvsp[(3) - (3)].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 551:

/* Line 1806 of yacc.c  */
#line 5085 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
    break;

  case 552:

/* Line 1806 of yacc.c  */
#line 5091 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 553:

/* Line 1806 of yacc.c  */
#line 5096 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
             Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
    break;

  case 554:

/* Line 1806 of yacc.c  */
#line 5101 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.table_options|= (yyvsp[(3) - (3)].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
    break;

  case 555:

/* Line 1806 of yacc.c  */
#line 5106 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.row_type= (yyvsp[(3) - (3)].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
    break;

  case 556:

/* Line 1806 of yacc.c  */
#line 5111 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
    break;

  case 557:

/* Line 1806 of yacc.c  */
#line 5115 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
    break;

  case 560:

/* Line 1806 of yacc.c  */
#line 5139 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.merge_insert_method= (yyvsp[(3) - (3)].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
    break;

  case 561:

/* Line 1806 of yacc.c  */
#line 5144 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.data_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
    break;

  case 562:

/* Line 1806 of yacc.c  */
#line 5149 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.index_file_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
    break;

  case 563:

/* Line 1806 of yacc.c  */
#line 5154 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {Lex->create_info.tablespace= (yyvsp[(2) - (2)].lex_str).str;}
    break;

  case 564:

/* Line 1806 of yacc.c  */
#line 5156 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_DISK;}
    break;

  case 565:

/* Line 1806 of yacc.c  */
#line 5158 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
    break;

  case 566:

/* Line 1806 of yacc.c  */
#line 5160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.connect_string.str= (yyvsp[(3) - (3)].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[(3) - (3)].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
    break;

  case 567:

/* Line 1806 of yacc.c  */
#line 5166 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[(3) - (3)].ulong_num);
          }
    break;

  case 568:

/* Line 1806 of yacc.c  */
#line 5174 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !my_charset_same(cinfo->default_table_charset,(yyvsp[(4) - (4)].charset)))
            {
              my_error(ER_CONFLICTING_DECLARATIONS, MYF(0),
                       "CHARACTER SET ", cinfo->default_table_charset->csname,
                       "CHARACTER SET ", (yyvsp[(4) - (4)].charset)->csname);
              MYSQL_YYABORT;
            }
            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 569:

/* Line 1806 of yacc.c  */
#line 5192 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[(4) - (4)].charset) &&
                 !((yyvsp[(4) - (4)].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[(4) - (4)].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[(4) - (4)].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
    break;

  case 570:

/* Line 1806 of yacc.c  */
#line 5209 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            plugin_ref plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              if (YYTHD->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(YYTHD, MYSQL_ERROR::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[(1) - (1)].lex_str).str);
            }
          }
    break;

  case 571:

/* Line 1806 of yacc.c  */
#line 5232 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(YYTHD, &(yyvsp[(1) - (1)].lex_str))))
              (yyval.db_type)= plugin_data(plugin, handlerton*);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 572:

/* Line 1806 of yacc.c  */
#line 5245 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
    break;

  case 573:

/* Line 1806 of yacc.c  */
#line 5246 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_FIXED; }
    break;

  case 574:

/* Line 1806 of yacc.c  */
#line 5247 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
    break;

  case 575:

/* Line 1806 of yacc.c  */
#line 5248 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
    break;

  case 576:

/* Line 1806 of yacc.c  */
#line 5249 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
    break;

  case 577:

/* Line 1806 of yacc.c  */
#line 5250 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
    break;

  case 578:

/* Line 1806 of yacc.c  */
#line 5254 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
    break;

  case 579:

/* Line 1806 of yacc.c  */
#line 5255 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
    break;

  case 580:

/* Line 1806 of yacc.c  */
#line 5256 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
    break;

  case 581:

/* Line 1806 of yacc.c  */
#line 5260 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 583:

/* Line 1806 of yacc.c  */
#line 5265 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.num) = (int) STRING_RESULT; }
    break;

  case 584:

/* Line 1806 of yacc.c  */
#line 5266 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.num) = (int) REAL_RESULT; }
    break;

  case 585:

/* Line 1806 of yacc.c  */
#line 5267 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.num) = (int) DECIMAL_RESULT; }
    break;

  case 586:

/* Line 1806 of yacc.c  */
#line 5268 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.num) = (int) INT_RESULT; }
    break;

  case 587:

/* Line 1806 of yacc.c  */
#line 5274 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
    break;

  case 593:

/* Line 1806 of yacc.c  */
#line 5292 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 594:

/* Line 1806 of yacc.c  */
#line 5299 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (7)].key_type), (yyvsp[(2) - (7)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 595:

/* Line 1806 of yacc.c  */
#line 5305 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 596:

/* Line 1806 of yacc.c  */
#line 5311 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(1) - (8)].key_type), (yyvsp[(3) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 597:

/* Line 1806 of yacc.c  */
#line 5317 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_create_index (Lex, (yyvsp[(2) - (8)].key_type), (yyvsp[(3) - (8)].lex_str).str ? (yyvsp[(3) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str)))
              MYSQL_YYABORT;
          }
    break;

  case 598:

/* Line 1806 of yacc.c  */
#line 5322 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[(4) - (8)].lex_str).str ? (yyvsp[(4) - (8)].lex_str) : (yyvsp[(1) - (8)].lex_str), lex->col_list,
                                      (yyvsp[(8) - (8)].table),
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[(1) - (8)].lex_str).str ? (yyvsp[(1) - (8)].lex_str) : (yyvsp[(4) - (8)].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= ALTER_FOREIGN_KEY;
          }
    break;

  case 599:

/* Line 1806 of yacc.c  */
#line 5340 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
    break;

  case 603:

/* Line 1806 of yacc.c  */
#line 5355 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 604:

/* Line 1806 of yacc.c  */
#line 5356 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 605:

/* Line 1806 of yacc.c  */
#line 5360 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 606:

/* Line 1806 of yacc.c  */
#line 5365 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
          }
    break;

  case 607:

/* Line 1806 of yacc.c  */
#line 5374 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[(1) - (4)].lex_str), (enum enum_field_types) (yyvsp[(3) - (4)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change,&lex->interval_list,lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 608:

/* Line 1806 of yacc.c  */
#line 5387 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 609:

/* Line 1806 of yacc.c  */
#line 5388 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=(yyvsp[(1) - (3)].num); }
    break;

  case 610:

/* Line 1806 of yacc.c  */
#line 5389 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
    break;

  case 611:

/* Line 1806 of yacc.c  */
#line 5391 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 612:

/* Line 1806 of yacc.c  */
#line 5396 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
    break;

  case 613:

/* Line 1806 of yacc.c  */
#line 5400 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 614:

/* Line 1806 of yacc.c  */
#line 5405 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
    break;

  case 615:

/* Line 1806 of yacc.c  */
#line 5410 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 616:

/* Line 1806 of yacc.c  */
#line 5414 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 617:

/* Line 1806 of yacc.c  */
#line 5419 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 618:

/* Line 1806 of yacc.c  */
#line 5424 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
    break;

  case 619:

/* Line 1806 of yacc.c  */
#line 5430 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 620:

/* Line 1806 of yacc.c  */
#line 5435 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
    break;

  case 621:

/* Line 1806 of yacc.c  */
#line 5441 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 622:

/* Line 1806 of yacc.c  */
#line 5445 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
    break;

  case 623:

/* Line 1806 of yacc.c  */
#line 5450 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
    break;

  case 624:

/* Line 1806 of yacc.c  */
#line 5455 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_YEAR; }
    break;

  case 625:

/* Line 1806 of yacc.c  */
#line 5457 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATE; }
    break;

  case 626:

/* Line 1806 of yacc.c  */
#line 5459 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TIME; }
    break;

  case 627:

/* Line 1806 of yacc.c  */
#line 5461 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (YYTHD->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
    break;

  case 628:

/* Line 1806 of yacc.c  */
#line 5474 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
    break;

  case 629:

/* Line 1806 of yacc.c  */
#line 5476 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
    break;

  case 630:

/* Line 1806 of yacc.c  */
#line 5481 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
    break;

  case 631:

/* Line 1806 of yacc.c  */
#line 5486 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[(1) - (1)].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 632:

/* Line 1806 of yacc.c  */
#line 5498 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 633:

/* Line 1806 of yacc.c  */
#line 5503 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
    break;

  case 634:

/* Line 1806 of yacc.c  */
#line 5508 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
    break;

  case 635:

/* Line 1806 of yacc.c  */
#line 5513 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 636:

/* Line 1806 of yacc.c  */
#line 5515 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
    break;

  case 637:

/* Line 1806 of yacc.c  */
#line 5517 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_BLOB; }
    break;

  case 638:

/* Line 1806 of yacc.c  */
#line 5519 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 639:

/* Line 1806 of yacc.c  */
#line 5521 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
    break;

  case 640:

/* Line 1806 of yacc.c  */
#line 5523 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 641:

/* Line 1806 of yacc.c  */
#line 5525 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 642:

/* Line 1806 of yacc.c  */
#line 5527 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
    break;

  case 643:

/* Line 1806 of yacc.c  */
#line 5529 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {Lex->interval_list.empty();}
    break;

  case 644:

/* Line 1806 of yacc.c  */
#line 5531 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_ENUM; }
    break;

  case 645:

/* Line 1806 of yacc.c  */
#line 5533 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->interval_list.empty();}
    break;

  case 646:

/* Line 1806 of yacc.c  */
#line 5535 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SET; }
    break;

  case 647:

/* Line 1806 of yacc.c  */
#line 5537 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
    break;

  case 648:

/* Line 1806 of yacc.c  */
#line 5539 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
    break;

  case 649:

/* Line 1806 of yacc.c  */
#line 5547 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRY; }
    break;

  case 650:

/* Line 1806 of yacc.c  */
#line 5548 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
    break;

  case 651:

/* Line 1806 of yacc.c  */
#line 5550 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->length= (char*)"25";
            (yyval.num)= Field::GEOM_POINT;
          }
    break;

  case 652:

/* Line 1806 of yacc.c  */
#line 5554 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
    break;

  case 653:

/* Line 1806 of yacc.c  */
#line 5555 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_LINESTRING; }
    break;

  case 654:

/* Line 1806 of yacc.c  */
#line 5556 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
    break;

  case 655:

/* Line 1806 of yacc.c  */
#line 5557 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_POLYGON; }
    break;

  case 656:

/* Line 1806 of yacc.c  */
#line 5558 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
    break;

  case 657:

/* Line 1806 of yacc.c  */
#line 5562 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 658:

/* Line 1806 of yacc.c  */
#line 5566 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 659:

/* Line 1806 of yacc.c  */
#line 5567 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 660:

/* Line 1806 of yacc.c  */
#line 5571 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 661:

/* Line 1806 of yacc.c  */
#line 5572 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 662:

/* Line 1806 of yacc.c  */
#line 5576 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 663:

/* Line 1806 of yacc.c  */
#line 5577 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 664:

/* Line 1806 of yacc.c  */
#line 5578 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 665:

/* Line 1806 of yacc.c  */
#line 5579 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 666:

/* Line 1806 of yacc.c  */
#line 5580 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 667:

/* Line 1806 of yacc.c  */
#line 5584 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONG; }
    break;

  case 668:

/* Line 1806 of yacc.c  */
#line 5585 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_TINY; }
    break;

  case 669:

/* Line 1806 of yacc.c  */
#line 5586 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_SHORT; }
    break;

  case 670:

/* Line 1806 of yacc.c  */
#line 5587 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_INT24; }
    break;

  case 671:

/* Line 1806 of yacc.c  */
#line 5588 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
    break;

  case 672:

/* Line 1806 of yacc.c  */
#line 5593 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)= YYTHD->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
    break;

  case 673:

/* Line 1806 of yacc.c  */
#line 5598 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 674:

/* Line 1806 of yacc.c  */
#line 5600 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
    break;

  case 675:

/* Line 1806 of yacc.c  */
#line 5605 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->dec=Lex->length= (char*)0; }
    break;

  case 676:

/* Line 1806 of yacc.c  */
#line 5607 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->dec= (char*)0; }
    break;

  case 677:

/* Line 1806 of yacc.c  */
#line 5609 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 678:

/* Line 1806 of yacc.c  */
#line 5614 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[(2) - (5)].lex_str).str;
            lex->dec=(yyvsp[(4) - (5)].lex_str).str;
          }
    break;

  case 679:

/* Line 1806 of yacc.c  */
#line 5622 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 680:

/* Line 1806 of yacc.c  */
#line 5623 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 681:

/* Line 1806 of yacc.c  */
#line 5627 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 682:

/* Line 1806 of yacc.c  */
#line 5628 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 683:

/* Line 1806 of yacc.c  */
#line 5632 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 684:

/* Line 1806 of yacc.c  */
#line 5633 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG;}
    break;

  case 685:

/* Line 1806 of yacc.c  */
#line 5634 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
    break;

  case 686:

/* Line 1806 of yacc.c  */
#line 5638 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 687:

/* Line 1806 of yacc.c  */
#line 5639 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 688:

/* Line 1806 of yacc.c  */
#line 5640 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 689:

/* Line 1806 of yacc.c  */
#line 5641 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->length= (yyvsp[(2) - (3)].lex_str).str; }
    break;

  case 690:

/* Line 1806 of yacc.c  */
#line 5644 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->length=(char*) 0; /* use default length */ }
    break;

  case 691:

/* Line 1806 of yacc.c  */
#line 5645 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 692:

/* Line 1806 of yacc.c  */
#line 5649 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 693:

/* Line 1806 of yacc.c  */
#line 5650 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 694:

/* Line 1806 of yacc.c  */
#line 5654 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 695:

/* Line 1806 of yacc.c  */
#line 5655 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 696:

/* Line 1806 of yacc.c  */
#line 5659 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 698:

/* Line 1806 of yacc.c  */
#line 5664 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type&= ~ NOT_NULL_FLAG; }
    break;

  case 699:

/* Line 1806 of yacc.c  */
#line 5665 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= NOT_NULL_FLAG; }
    break;

  case 700:

/* Line 1806 of yacc.c  */
#line 5666 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->default_value=(yyvsp[(2) - (2)].item); }
    break;

  case 701:

/* Line 1806 of yacc.c  */
#line 5667 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= ENC_FLAG; }
    break;

  case 702:

/* Line 1806 of yacc.c  */
#line 5668 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= ENC_FLAG; Lex->enc_for_field=(yyvsp[(3) - (3)].lex_str); }
    break;

  case 703:

/* Line 1806 of yacc.c  */
#line 5670 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_now_local();
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
    break;

  case 704:

/* Line 1806 of yacc.c  */
#line 5676 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
    break;

  case 705:

/* Line 1806 of yacc.c  */
#line 5678 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 706:

/* Line 1806 of yacc.c  */
#line 5684 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 707:

/* Line 1806 of yacc.c  */
#line 5690 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 708:

/* Line 1806 of yacc.c  */
#line 5696 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= ALTER_ADD_INDEX; 
          }
    break;

  case 709:

/* Line 1806 of yacc.c  */
#line 5701 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 710:

/* Line 1806 of yacc.c  */
#line 5703 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[(2) - (2)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(2) - (2)].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[(2) - (2)].charset);
            }
          }
    break;

  case 711:

/* Line 1806 of yacc.c  */
#line 5720 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          (yyval.num)= (yyvsp[(1) - (2)].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[(2) - (2)].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[(2) - (2)].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
    break;

  case 712:

/* Line 1806 of yacc.c  */
#line 5741 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 713:

/* Line 1806 of yacc.c  */
#line 5747 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 714:

/* Line 1806 of yacc.c  */
#line 5751 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 715:

/* Line 1806 of yacc.c  */
#line 5752 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 716:

/* Line 1806 of yacc.c  */
#line 5757 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 717:

/* Line 1806 of yacc.c  */
#line 5764 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 718:

/* Line 1806 of yacc.c  */
#line 5768 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 719:

/* Line 1806 of yacc.c  */
#line 5769 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 720:

/* Line 1806 of yacc.c  */
#line 5773 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)= NULL; }
    break;

  case 721:

/* Line 1806 of yacc.c  */
#line 5774 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)= (yyvsp[(2) - (2)].charset); }
    break;

  case 722:

/* Line 1806 of yacc.c  */
#line 5779 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[(1) - (1)].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[(1) - (1)].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 723:

/* Line 1806 of yacc.c  */
#line 5787 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)= &my_charset_bin; }
    break;

  case 724:

/* Line 1806 of yacc.c  */
#line 5791 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset);   }
    break;

  case 725:

/* Line 1806 of yacc.c  */
#line 5792 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 726:

/* Line 1806 of yacc.c  */
#line 5797 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyval.charset)=get_charset_by_name((yyvsp[(1) - (1)].lex_str).str,MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 727:

/* Line 1806 of yacc.c  */
#line 5807 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 728:

/* Line 1806 of yacc.c  */
#line 5808 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(2) - (2)].charset); }
    break;

  case 729:

/* Line 1806 of yacc.c  */
#line 5812 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=(yyvsp[(1) - (1)].charset); }
    break;

  case 730:

/* Line 1806 of yacc.c  */
#line 5813 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.charset)=NULL; }
    break;

  case 731:

/* Line 1806 of yacc.c  */
#line 5817 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 732:

/* Line 1806 of yacc.c  */
#line 5818 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 733:

/* Line 1806 of yacc.c  */
#line 5823 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->charset= &my_charset_latin1; }
    break;

  case 734:

/* Line 1806 of yacc.c  */
#line 5825 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 735:

/* Line 1806 of yacc.c  */
#line 5829 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset= &my_charset_latin1_bin;
          }
    break;

  case 736:

/* Line 1806 of yacc.c  */
#line 5836 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
    break;

  case 737:

/* Line 1806 of yacc.c  */
#line 5845 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 738:

/* Line 1806 of yacc.c  */
#line 5853 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!(Lex->charset=get_charset_by_name("ucs2_bin", MYF(0))))
            {
              my_error(ER_UNKNOWN_COLLATION, MYF(0), "ucs2_bin");
              MYSQL_YYABORT;
            }
          }
    break;

  case 739:

/* Line 1806 of yacc.c  */
#line 5863 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->charset=NULL; }
    break;

  case 742:

/* Line 1806 of yacc.c  */
#line 5866 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->charset=&my_charset_bin; }
    break;

  case 743:

/* Line 1806 of yacc.c  */
#line 5867 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->charset=(yyvsp[(2) - (3)].charset); }
    break;

  case 744:

/* Line 1806 of yacc.c  */
#line 5869 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 745:

/* Line 1806 of yacc.c  */
#line 5874 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->charset= (yyvsp[(3) - (3)].charset);
            Lex->type|= BINCMP_FLAG;
          }
    break;

  case 746:

/* Line 1806 of yacc.c  */
#line 5881 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 747:

/* Line 1806 of yacc.c  */
#line 5882 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= BINCMP_FLAG; }
    break;

  case 750:

/* Line 1806 of yacc.c  */
#line 5897 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.table)=(yyvsp[(2) - (5)].table);
          }
    break;

  case 751:

/* Line 1806 of yacc.c  */
#line 5904 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ref_list.empty(); }
    break;

  case 753:

/* Line 1806 of yacc.c  */
#line 5910 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(3) - (3)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
    break;

  case 754:

/* Line 1806 of yacc.c  */
#line 5917 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
    break;

  case 755:

/* Line 1806 of yacc.c  */
#line 5929 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
    break;

  case 756:

/* Line 1806 of yacc.c  */
#line 5931 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
    break;

  case 757:

/* Line 1806 of yacc.c  */
#line 5933 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
    break;

  case 758:

/* Line 1806 of yacc.c  */
#line 5935 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
    break;

  case 759:

/* Line 1806 of yacc.c  */
#line 5940 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 760:

/* Line 1806 of yacc.c  */
#line 5946 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (3)].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
    break;

  case 761:

/* Line 1806 of yacc.c  */
#line 5952 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[(3) - (3)].m_fk_option);
          }
    break;

  case 762:

/* Line 1806 of yacc.c  */
#line 5959 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(3) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(6) - (6)].m_fk_option);
          }
    break;

  case 763:

/* Line 1806 of yacc.c  */
#line 5966 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[(6) - (6)].m_fk_option);
            lex->fk_delete_opt= (yyvsp[(3) - (6)].m_fk_option);
          }
    break;

  case 764:

/* Line 1806 of yacc.c  */
#line 5974 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
    break;

  case 765:

/* Line 1806 of yacc.c  */
#line 5975 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
    break;

  case 766:

/* Line 1806 of yacc.c  */
#line 5976 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
    break;

  case 767:

/* Line 1806 of yacc.c  */
#line 5977 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
    break;

  case 768:

/* Line 1806 of yacc.c  */
#line 5978 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
    break;

  case 769:

/* Line 1806 of yacc.c  */
#line 5982 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 770:

/* Line 1806 of yacc.c  */
#line 5986 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::PRIMARY; }
    break;

  case 771:

/* Line 1806 of yacc.c  */
#line 5987 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 772:

/* Line 1806 of yacc.c  */
#line 5991 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 773:

/* Line 1806 of yacc.c  */
#line 5992 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 774:

/* Line 1806 of yacc.c  */
#line 5996 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 776:

/* Line 1806 of yacc.c  */
#line 6001 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 777:

/* Line 1806 of yacc.c  */
#line 6002 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 778:

/* Line 1806 of yacc.c  */
#line 6003 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 779:

/* Line 1806 of yacc.c  */
#line 6007 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::MULTIPLE; }
    break;

  case 780:

/* Line 1806 of yacc.c  */
#line 6008 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::UNIQUE; }
    break;

  case 781:

/* Line 1806 of yacc.c  */
#line 6012 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_type)= Key::FULLTEXT;}
    break;

  case 782:

/* Line 1806 of yacc.c  */
#line 6017 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 783:

/* Line 1806 of yacc.c  */
#line 6029 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->key_create_info= default_key_create_info;
          }
    break;

  case 786:

/* Line 1806 of yacc.c  */
#line 6046 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 788:

/* Line 1806 of yacc.c  */
#line 6051 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 790:

/* Line 1806 of yacc.c  */
#line 6056 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 798:

/* Line 1806 of yacc.c  */
#line 6076 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 799:

/* Line 1806 of yacc.c  */
#line 6077 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->key_create_info.algorithm= (yyvsp[(2) - (2)].key_alg); }
    break;

  case 800:

/* Line 1806 of yacc.c  */
#line 6082 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->key_create_info.block_size= (yyvsp[(3) - (3)].ulong_num); }
    break;

  case 801:

/* Line 1806 of yacc.c  */
#line 6083 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->key_create_info.comment= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 806:

/* Line 1806 of yacc.c  */
#line 6098 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (plugin_is_ready(&(yyvsp[(3) - (3)].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[(3) - (3)].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
          }
    break;

  case 807:

/* Line 1806 of yacc.c  */
#line 6110 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
    break;

  case 808:

/* Line 1806 of yacc.c  */
#line 6111 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
    break;

  case 809:

/* Line 1806 of yacc.c  */
#line 6112 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
    break;

  case 810:

/* Line 1806 of yacc.c  */
#line 6116 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(3) - (4)].key_part)); }
    break;

  case 811:

/* Line 1806 of yacc.c  */
#line 6117 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->col_list.push_back((yyvsp[(1) - (2)].key_part)); }
    break;

  case 812:

/* Line 1806 of yacc.c  */
#line 6122 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (1)].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 813:

/* Line 1806 of yacc.c  */
#line 6128 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            int key_part_len= atoi((yyvsp[(3) - (4)].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[(1) - (4)].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[(1) - (4)].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 814:

/* Line 1806 of yacc.c  */
#line 6141 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 815:

/* Line 1806 of yacc.c  */
#line 6142 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 816:

/* Line 1806 of yacc.c  */
#line 6146 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= null_lex_str; }
    break;

  case 817:

/* Line 1806 of yacc.c  */
#line 6147 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(2) - (2)].lex_str); }
    break;

  case 818:

/* Line 1806 of yacc.c  */
#line 6151 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(1) - (1)].string)); }
    break;

  case 819:

/* Line 1806 of yacc.c  */
#line 6152 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->interval_list.push_back((yyvsp[(3) - (3)].string)); }
    break;

  case 820:

/* Line 1806 of yacc.c  */
#line 6160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->sql_command= SQLCOM_ALTER_TABLE;
            lex->duplicates= DUP_ERROR; 
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(4) - (4)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            lex->col_list.empty();
            lex->select_lex.init_order();
            lex->select_lex.db= (lex->select_lex.table_list.first)->db;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            lex->create_info.db_type= 0;
            lex->create_info.default_table_charset= NULL;
            lex->create_info.row_type= ROW_TYPE_NOT_USED;
            lex->alter_info.reset();
            lex->no_write_to_binlog= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
            lex->create_last_non_select_table= lex->last_table();
            DBUG_ASSERT(!lex->m_stmt);
          }
    break;

  case 821:

/* Line 1806 of yacc.c  */
#line 6186 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (!lex->m_stmt)
            {
              /* Create a generic ALTER TABLE statment. */
              lex->m_stmt= new (thd->mem_root) Alter_table_statement(lex);
              if (lex->m_stmt == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 822:

/* Line 1806 of yacc.c  */
#line 6198 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
    break;

  case 823:

/* Line 1806 of yacc.c  */
#line 6203 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[(3) - (5)].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
    break;

  case 824:

/* Line 1806 of yacc.c  */
#line 6212 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[(3) - (7)].lex_str);
          }
    break;

  case 825:

/* Line 1806 of yacc.c  */
#line 6223 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 826:

/* Line 1806 of yacc.c  */
#line 6234 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 827:

/* Line 1806 of yacc.c  */
#line 6241 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 828:

/* Line 1806 of yacc.c  */
#line 6252 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[(3) - (5)].spname);
          }
    break;

  case 829:

/* Line 1806 of yacc.c  */
#line 6259 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 830:

/* Line 1806 of yacc.c  */
#line 6270 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 831:

/* Line 1806 of yacc.c  */
#line 6277 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED;
            lex->create_view_mode= VIEW_ALTER;
          }
    break;

  case 832:

/* Line 1806 of yacc.c  */
#line 6289 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 833:

/* Line 1806 of yacc.c  */
#line 6291 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(YYTHD)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[(4) - (4)].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 834:

/* Line 1806 of yacc.c  */
#line 6311 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyvsp[(6) - (10)].num) || (yyvsp[(7) - (10)].num) || (yyvsp[(8) - (10)].num) || (yyvsp[(9) - (10)].num) || (yyvsp[(10) - (10)].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
    break;

  case 835:

/* Line 1806 of yacc.c  */
#line 6324 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
    break;

  case 836:

/* Line 1806 of yacc.c  */
#line 6329 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
    break;

  case 837:

/* Line 1806 of yacc.c  */
#line 6334 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
    break;

  case 838:

/* Line 1806 of yacc.c  */
#line 6339 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
    break;

  case 839:

/* Line 1806 of yacc.c  */
#line 6344 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[(3) - (7)].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[(3) - (7)].lex_str).length;
          }
    break;

  case 840:

/* Line 1806 of yacc.c  */
#line 6353 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 841:

/* Line 1806 of yacc.c  */
#line 6354 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 842:

/* Line 1806 of yacc.c  */
#line 6355 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 843:

/* Line 1806 of yacc.c  */
#line 6356 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 844:

/* Line 1806 of yacc.c  */
#line 6360 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 845:

/* Line 1806 of yacc.c  */
#line 6362 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[(3) - (3)].spname); 
            (yyval.num)= 1;
          }
    break;

  case 846:

/* Line 1806 of yacc.c  */
#line 6373 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0;}
    break;

  case 847:

/* Line 1806 of yacc.c  */
#line 6374 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 848:

/* Line 1806 of yacc.c  */
#line 6378 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
    break;

  case 849:

/* Line 1806 of yacc.c  */
#line 6379 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 851:

/* Line 1806 of yacc.c  */
#line 6384 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= DISCARD_TABLESPACE; }
    break;

  case 852:

/* Line 1806 of yacc.c  */
#line 6385 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->alter_info.tablespace_op= IMPORT_TABLESPACE; }
    break;

  case 858:

/* Line 1806 of yacc.c  */
#line 6402 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_PARTITION;
          }
    break;

  case 859:

/* Line 1806 of yacc.c  */
#line 6407 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
          }
    break;

  case 860:

/* Line 1806 of yacc.c  */
#line 6414 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_optimize_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 862:

/* Line 1806 of yacc.c  */
#line 6428 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_analyze_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 863:

/* Line 1806 of yacc.c  */
#line 6440 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_check_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 865:

/* Line 1806 of yacc.c  */
#line 6453 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_repair_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 867:

/* Line 1806 of yacc.c  */
#line 6466 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (4)].num);
            lex->alter_info.num_parts= (yyvsp[(4) - (4)].ulong_num);
          }
    break;

  case 868:

/* Line 1806 of yacc.c  */
#line 6473 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root)
                          Alter_table_truncate_partition_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 870:

/* Line 1806 of yacc.c  */
#line 6488 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REMOVE_PARTITIONING;
          }
    break;

  case 871:

/* Line 1806 of yacc.c  */
#line 6495 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ALL_PARTITION;
          }
    break;

  case 873:

/* Line 1806 of yacc.c  */
#line 6503 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 874:

/* Line 1806 of yacc.c  */
#line 6515 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 876:

/* Line 1806 of yacc.c  */
#line 6521 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
    break;

  case 877:

/* Line 1806 of yacc.c  */
#line 6526 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->part_info->num_parts= (yyvsp[(2) - (2)].ulong_num);
          }
    break;

  case 878:

/* Line 1806 of yacc.c  */
#line 6533 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[(3) - (3)].num);
          }
    break;

  case 880:

/* Line 1806 of yacc.c  */
#line 6548 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_TABLE_REORG;
          }
    break;

  case 881:

/* Line 1806 of yacc.c  */
#line 6552 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_REORGANIZE_PARTITION;
          }
    break;

  case 882:

/* Line 1806 of yacc.c  */
#line 6556 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
    break;

  case 883:

/* Line 1806 of yacc.c  */
#line 6563 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 884:

/* Line 1806 of yacc.c  */
#line 6564 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 885:

/* Line 1806 of yacc.c  */
#line 6569 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[(1) - (1)].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
    break;

  case 888:

/* Line 1806 of yacc.c  */
#line 6589 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= ALTER_ADD_COLUMN;
          }
    break;

  case 889:

/* Line 1806 of yacc.c  */
#line 6598 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 890:

/* Line 1806 of yacc.c  */
#line 6602 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= ALTER_ADD_INDEX;
          }
    break;

  case 891:

/* Line 1806 of yacc.c  */
#line 6607 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADD_COLUMN | ALTER_ADD_INDEX;
          }
    break;

  case 892:

/* Line 1806 of yacc.c  */
#line 6611 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[(3) - (3)].lex_str).str;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 893:

/* Line 1806 of yacc.c  */
#line 6617 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 894:

/* Line 1806 of yacc.c  */
#line 6621 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN;
          }
    break;

  case 895:

/* Line 1806 of yacc.c  */
#line 6630 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[(3) - (6)].lex_str),
                                  (enum enum_field_types) (yyvsp[(5) - (6)].num),
                                  lex->length,lex->dec,lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[(3) - (6)].lex_str).str, &lex->interval_list, lex->charset,
                                  lex->uint_geom_type))
              MYSQL_YYABORT;
          }
    break;

  case 896:

/* Line 1806 of yacc.c  */
#line 6642 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
    break;

  case 897:

/* Line 1806 of yacc.c  */
#line 6646 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[(3) - (4)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_COLUMN;
          }
    break;

  case 898:

/* Line 1806 of yacc.c  */
#line 6655 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_DROP_INDEX | ALTER_FOREIGN_KEY;
          }
    break;

  case 899:

/* Line 1806 of yacc.c  */
#line 6659 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 900:

/* Line 1806 of yacc.c  */
#line 6668 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (3)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= ALTER_DROP_INDEX;
          }
    break;

  case 901:

/* Line 1806 of yacc.c  */
#line 6677 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= DISABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 902:

/* Line 1806 of yacc.c  */
#line 6683 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= ENABLE;
            lex->alter_info.flags|= ALTER_KEYS_ONOFF;
          }
    break;

  case 903:

/* Line 1806 of yacc.c  */
#line 6689 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (6)].lex_str).str,(yyvsp[(6) - (6)].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 904:

/* Line 1806 of yacc.c  */
#line 6698 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[(3) - (5)].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= ALTER_CHANGE_COLUMN_DEFAULT;
          }
    break;

  case 905:

/* Line 1806 of yacc.c  */
#line 6707 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[(3) - (3)].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[(3) - (3)].table)->table.str,(yyvsp[(3) - (3)].table)->table.length, FALSE) ||
                ((yyvsp[(3) - (3)].table)->db.str && check_db_name(&(yyvsp[(3) - (3)].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (3)].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[(3) - (3)].table)->table;
            lex->alter_info.flags|= ALTER_RENAME;
          }
    break;

  case 906:

/* Line 1806 of yacc.c  */
#line 6726 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!(yyvsp[(4) - (5)].charset))
            {
              THD *thd= YYTHD;
              (yyvsp[(4) - (5)].charset)= thd->variables.collation_database;
            }
            (yyvsp[(5) - (5)].charset)= (yyvsp[(5) - (5)].charset) ? (yyvsp[(5) - (5)].charset) : (yyvsp[(4) - (5)].charset);
            if (!my_charset_same((yyvsp[(4) - (5)].charset),(yyvsp[(5) - (5)].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[(5) - (5)].charset)->name, (yyvsp[(4) - (5)].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            lex->create_info.table_charset=
            lex->create_info.default_table_charset= (yyvsp[(5) - (5)].charset);
            lex->create_info.used_fields|= (HA_CREATE_USED_CHARSET |
              HA_CREATE_USED_DEFAULT_CHARSET);
            lex->alter_info.flags|= ALTER_CONVERT;
          }
    break;

  case 907:

/* Line 1806 of yacc.c  */
#line 6747 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_OPTIONS;
          }
    break;

  case 908:

/* Line 1806 of yacc.c  */
#line 6752 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_RECREATE;
          }
    break;

  case 909:

/* Line 1806 of yacc.c  */
#line 6756 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= ALTER_ORDER;
          }
    break;

  case 910:

/* Line 1806 of yacc.c  */
#line 6763 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 911:

/* Line 1806 of yacc.c  */
#line 6764 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 912:

/* Line 1806 of yacc.c  */
#line 6768 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ignore= 0;}
    break;

  case 913:

/* Line 1806 of yacc.c  */
#line 6769 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ignore= 1;}
    break;

  case 914:

/* Line 1806 of yacc.c  */
#line 6773 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_DEFAULT; }
    break;

  case 915:

/* Line 1806 of yacc.c  */
#line 6774 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_RESTRICT; }
    break;

  case 916:

/* Line 1806 of yacc.c  */
#line 6775 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->drop_mode= DROP_CASCADE; }
    break;

  case 917:

/* Line 1806 of yacc.c  */
#line 6779 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 918:

/* Line 1806 of yacc.c  */
#line 6780 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { store_position_for_column((yyvsp[(2) - (2)].lex_str).str); }
    break;

  case 919:

/* Line 1806 of yacc.c  */
#line 6781 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { store_position_for_column(first_keyword); }
    break;

  case 920:

/* Line 1806 of yacc.c  */
#line 6785 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 921:

/* Line 1806 of yacc.c  */
#line 6786 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 922:

/* Line 1806 of yacc.c  */
#line 6787 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 923:

/* Line 1806 of yacc.c  */
#line 6788 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 924:

/* Line 1806 of yacc.c  */
#line 6797 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
            /* If you change this code don't forget to update SLAVE START too */
          }
    break;

  case 925:

/* Line 1806 of yacc.c  */
#line 6806 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 926:

/* Line 1806 of yacc.c  */
#line 6808 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
    break;

  case 927:

/* Line 1806 of yacc.c  */
#line 6815 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* We'll use mi structure for UNTIL options */
            bzero((char*) &lex->mi, sizeof(lex->mi));
          }
    break;

  case 928:

/* Line 1806 of yacc.c  */
#line 6823 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 929:

/* Line 1806 of yacc.c  */
#line 6825 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
          }
    break;

  case 930:

/* Line 1806 of yacc.c  */
#line 6834 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            lex->start_transaction_opt= (yyvsp[(3) - (3)].num);
          }
    break;

  case 931:

/* Line 1806 of yacc.c  */
#line 6842 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 932:

/* Line 1806 of yacc.c  */
#line 6844 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
    break;

  case 933:

/* Line 1806 of yacc.c  */
#line 6850 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->slave_thd_opt= 0; }
    break;

  case 934:

/* Line 1806 of yacc.c  */
#line 6852 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 937:

/* Line 1806 of yacc.c  */
#line 6861 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 938:

/* Line 1806 of yacc.c  */
#line 6862 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_SQL; }
    break;

  case 939:

/* Line 1806 of yacc.c  */
#line 6863 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->slave_thd_opt|=SLAVE_IO; }
    break;

  case 940:

/* Line 1806 of yacc.c  */
#line 6867 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 941:

/* Line 1806 of yacc.c  */
#line 6869 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
    break;

  case 944:

/* Line 1806 of yacc.c  */
#line 6890 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 945:

/* Line 1806 of yacc.c  */
#line 6897 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 946:

/* Line 1806 of yacc.c  */
#line 6901 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags= 0; }
    break;

  case 947:

/* Line 1806 of yacc.c  */
#line 6902 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_QUICK; }
    break;

  case 948:

/* Line 1806 of yacc.c  */
#line 6903 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags= T_EXTEND; }
    break;

  case 949:

/* Line 1806 of yacc.c  */
#line 6908 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 950:

/* Line 1806 of yacc.c  */
#line 6918 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Repair_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 951:

/* Line 1806 of yacc.c  */
#line 6929 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 952:

/* Line 1806 of yacc.c  */
#line 6930 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 953:

/* Line 1806 of yacc.c  */
#line 6934 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 954:

/* Line 1806 of yacc.c  */
#line 6935 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 955:

/* Line 1806 of yacc.c  */
#line 6939 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 956:

/* Line 1806 of yacc.c  */
#line 6940 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 957:

/* Line 1806 of yacc.c  */
#line 6941 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
    break;

  case 958:

/* Line 1806 of yacc.c  */
#line 6946 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 959:

/* Line 1806 of yacc.c  */
#line 6956 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Analyze_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 960:

/* Line 1806 of yacc.c  */
#line 6968 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 961:

/* Line 1806 of yacc.c  */
#line 6976 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 962:

/* Line 1806 of yacc.c  */
#line 6991 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Check_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 963:

/* Line 1806 of yacc.c  */
#line 7002 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags = T_MEDIUM; }
    break;

  case 964:

/* Line 1806 of yacc.c  */
#line 7003 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 965:

/* Line 1806 of yacc.c  */
#line 7007 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 966:

/* Line 1806 of yacc.c  */
#line 7008 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 967:

/* Line 1806 of yacc.c  */
#line 7012 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_QUICK; }
    break;

  case 968:

/* Line 1806 of yacc.c  */
#line 7013 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_FAST; }
    break;

  case 969:

/* Line 1806 of yacc.c  */
#line 7014 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_MEDIUM; }
    break;

  case 970:

/* Line 1806 of yacc.c  */
#line 7015 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_EXTEND; }
    break;

  case 971:

/* Line 1806 of yacc.c  */
#line 7016 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
    break;

  case 972:

/* Line 1806 of yacc.c  */
#line 7017 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
    break;

  case 973:

/* Line 1806 of yacc.c  */
#line 7022 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[(2) - (3)].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
    break;

  case 974:

/* Line 1806 of yacc.c  */
#line 7032 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Optimize_table_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 975:

/* Line 1806 of yacc.c  */
#line 7043 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 976:

/* Line 1806 of yacc.c  */
#line 7044 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 977:

/* Line 1806 of yacc.c  */
#line 7045 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 978:

/* Line 1806 of yacc.c  */
#line 7050 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
    break;

  case 979:

/* Line 1806 of yacc.c  */
#line 7054 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 980:

/* Line 1806 of yacc.c  */
#line 7056 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
    break;

  case 981:

/* Line 1806 of yacc.c  */
#line 7063 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (3)].lex_user)) || Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 982:

/* Line 1806 of yacc.c  */
#line 7068 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (5)].lex_user)) || Lex->users_list.push_back((yyvsp[(5) - (5)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 985:

/* Line 1806 of yacc.c  */
#line 7081 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[(1) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[(3) - (3)].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
    break;

  case 986:

/* Line 1806 of yacc.c  */
#line 7094 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.reset();
          }
    break;

  case 987:

/* Line 1806 of yacc.c  */
#line 7098 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 992:

/* Line 1806 of yacc.c  */
#line 7117 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (2)].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 993:

/* Line 1806 of yacc.c  */
#line 7127 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 994:

/* Line 1806 of yacc.c  */
#line 7136 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 995:

/* Line 1806 of yacc.c  */
#line 7137 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str) = default_key_cache_base; }
    break;

  case 996:

/* Line 1806 of yacc.c  */
#line 7142 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
    break;

  case 997:

/* Line 1806 of yacc.c  */
#line 7148 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1002:

/* Line 1806 of yacc.c  */
#line 7163 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), NULL, (yyvsp[(3) - (3)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1003:

/* Line 1806 of yacc.c  */
#line 7173 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (4)].table), NULL, (yyvsp[(4) - (4)].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
    break;

  case 1004:

/* Line 1806 of yacc.c  */
#line 7183 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->alter_info.flags|= ALTER_ADMIN_PARTITION;
          }
    break;

  case 1006:

/* Line 1806 of yacc.c  */
#line 7190 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->select_lex.alloc_index_hints(YYTHD);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        old_mode ? 
                                        INDEX_HINT_MASK_JOIN : 
                                        INDEX_HINT_MASK_ALL);
          }
    break;

  case 1008:

/* Line 1806 of yacc.c  */
#line 7201 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 1010:

/* Line 1806 of yacc.c  */
#line 7207 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1011:

/* Line 1806 of yacc.c  */
#line 7208 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
    break;

  case 1012:

/* Line 1806 of yacc.c  */
#line 7218 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
    break;

  case 1015:

/* Line 1806 of yacc.c  */
#line 7232 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1017:

/* Line 1806 of yacc.c  */
#line 7242 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1019:

/* Line 1806 of yacc.c  */
#line 7251 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1021:

/* Line 1806 of yacc.c  */
#line 7270 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1022:

/* Line 1806 of yacc.c  */
#line 7278 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1024:

/* Line 1806 of yacc.c  */
#line 7285 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1029:

/* Line 1806 of yacc.c  */
#line 7295 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
    break;

  case 1032:

/* Line 1806 of yacc.c  */
#line 7310 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1036:

/* Line 1806 of yacc.c  */
#line 7327 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
    break;

  case 1037:

/* Line 1806 of yacc.c  */
#line 7355 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
    break;

  case 1039:

/* Line 1806 of yacc.c  */
#line 7387 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1040:

/* Line 1806 of yacc.c  */
#line 7393 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
    break;

  case 1043:

/* Line 1806 of yacc.c  */
#line 7405 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
    break;

  case 1044:

/* Line 1806 of yacc.c  */
#line 7420 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_item_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1045:

/* Line 1806 of yacc.c  */
#line 7427 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            DBUG_ASSERT((yyvsp[(1) - (4)].simple_string) < (yyvsp[(3) - (4)].simple_string));

            if (add_item_to_list(thd, (yyvsp[(2) - (4)].item)))
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[(4) - (4)].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[(4) - (4)].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[(2) - (4)].item)->name)
            {
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), thd->charset());
            }
          }
    break;

  case 1046:

/* Line 1806 of yacc.c  */
#line 7452 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
    break;

  case 1047:

/* Line 1806 of yacc.c  */
#line 7458 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
    break;

  case 1048:

/* Line 1806 of yacc.c  */
#line 7464 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=null_lex_str;}
    break;

  case 1049:

/* Line 1806 of yacc.c  */
#line 7465 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1050:

/* Line 1806 of yacc.c  */
#line 7466 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str); }
    break;

  case 1051:

/* Line 1806 of yacc.c  */
#line 7467 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1052:

/* Line 1806 of yacc.c  */
#line 7468 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1053:

/* Line 1806 of yacc.c  */
#line 7472 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1054:

/* Line 1806 of yacc.c  */
#line 7473 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1055:

/* Line 1806 of yacc.c  */
#line 7479 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_or*) (yyvsp[(1) - (3)].item);
              if (is_cond_or((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_or((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_or*) (yyvsp[(3) - (3)].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_or((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1056:

/* Line 1806 of yacc.c  */
#line 7530 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (YYTHD->mem_root) Item_cond_xor((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1057:

/* Line 1806 of yacc.c  */
#line 7537 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[(1) - (3)].item)))
            {
              item1= (Item_cond_and*) (yyvsp[(1) - (3)].item);
              if (is_cond_and((yyvsp[(3) - (3)].item)))
              {
                item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[(3) - (3)].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[(3) - (3)].item));
                (yyval.item) = (yyvsp[(1) - (3)].item);
              }
            }
            else if (is_cond_and((yyvsp[(3) - (3)].item)))
            {
              item3= (Item_cond_and*) (yyvsp[(3) - (3)].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[(1) - (3)].item));
              (yyval.item) = (yyvsp[(3) - (3)].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (YYTHD->mem_root) Item_cond_and((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1058:

/* Line 1806 of yacc.c  */
#line 7580 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1059:

/* Line 1806 of yacc.c  */
#line 7586 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_istrue((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1060:

/* Line 1806 of yacc.c  */
#line 7592 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnottrue((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1061:

/* Line 1806 of yacc.c  */
#line 7598 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isfalse((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1062:

/* Line 1806 of yacc.c  */
#line 7604 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotfalse((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1063:

/* Line 1806 of yacc.c  */
#line 7610 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1064:

/* Line 1806 of yacc.c  */
#line 7616 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1066:

/* Line 1806 of yacc.c  */
#line 7626 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnull((yyvsp[(1) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1067:

/* Line 1806 of yacc.c  */
#line 7632 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_isnotnull((yyvsp[(1) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1068:

/* Line 1806 of yacc.c  */
#line 7638 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_equal((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1069:

/* Line 1806 of yacc.c  */
#line 7644 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= (*(yyvsp[(2) - (3)].boolfunc2creator))(0)->create((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1070:

/* Line 1806 of yacc.c  */
#line 7650 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[(1) - (6)].item), (yyvsp[(2) - (6)].boolfunc2creator), (yyvsp[(3) - (6)].num), (yyvsp[(5) - (6)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1072:

/* Line 1806 of yacc.c  */
#line 7660 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_in_subselect((yyvsp[(1) - (5)].item), (yyvsp[(4) - (5)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1073:

/* Line 1806 of yacc.c  */
#line 7666 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[(1) - (6)].item), (yyvsp[(5) - (6)].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1074:

/* Line 1806 of yacc.c  */
#line 7676 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (5)].item), true, (yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1075:

/* Line 1806 of yacc.c  */
#line 7682 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(4) - (7)].item));
            (yyvsp[(6) - (7)].item_list)->push_front((yyvsp[(1) - (7)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_func_in(*(yyvsp[(6) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1076:

/* Line 1806 of yacc.c  */
#line 7690 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= handle_sql2003_note184_exception(YYTHD, (yyvsp[(1) - (6)].item), false, (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1077:

/* Line 1806 of yacc.c  */
#line 7696 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(1) - (8)].item));
            Item_func_in *item = new (YYTHD->mem_root) Item_func_in(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1078:

/* Line 1806 of yacc.c  */
#line 7706 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (5)].item),(yyvsp[(3) - (5)].item),(yyvsp[(5) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1079:

/* Line 1806 of yacc.c  */
#line 7712 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item_func_between *item;
            item= new (YYTHD->mem_root) Item_func_between((yyvsp[(1) - (6)].item),(yyvsp[(4) - (6)].item),(yyvsp[(6) - (6)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
    break;

  case 1080:

/* Line 1806 of yacc.c  */
#line 7721 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *item1= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(1) - (4)].item));
            Item *item4= new (YYTHD->mem_root) Item_func_soundex((yyvsp[(4) - (4)].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1081:

/* Line 1806 of yacc.c  */
#line 7731 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (4)].item),(yyvsp[(3) - (4)].item),(yyvsp[(4) - (4)].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1082:

/* Line 1806 of yacc.c  */
#line 7737 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_like((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1083:

/* Line 1806 of yacc.c  */
#line 7747 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1084:

/* Line 1806 of yacc.c  */
#line 7753 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_func_regex((yyvsp[(1) - (4)].item),(yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(YYTHD, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1086:

/* Line 1806 of yacc.c  */
#line 7766 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_or((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1087:

/* Line 1806 of yacc.c  */
#line 7772 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_and((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1088:

/* Line 1806 of yacc.c  */
#line 7778 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_left((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1089:

/* Line 1806 of yacc.c  */
#line 7784 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_shift_right((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1090:

/* Line 1806 of yacc.c  */
#line 7790 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_plus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1091:

/* Line 1806 of yacc.c  */
#line 7796 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minus((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1092:

/* Line 1806 of yacc.c  */
#line 7802 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1093:

/* Line 1806 of yacc.c  */
#line 7808 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(1) - (5)].item),(yyvsp[(4) - (5)].item),(yyvsp[(5) - (5)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1094:

/* Line 1806 of yacc.c  */
#line 7814 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mul((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1095:

/* Line 1806 of yacc.c  */
#line 7820 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1096:

/* Line 1806 of yacc.c  */
#line 7826 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1097:

/* Line 1806 of yacc.c  */
#line 7832 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_int_div((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1098:

/* Line 1806 of yacc.c  */
#line 7838 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_mod((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1099:

/* Line 1806 of yacc.c  */
#line 7844 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_xor((yyvsp[(1) - (3)].item),(yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1109:

/* Line 1806 of yacc.c  */
#line 7873 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
    break;

  case 1110:

/* Line 1806 of yacc.c  */
#line 7874 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
    break;

  case 1111:

/* Line 1806 of yacc.c  */
#line 7875 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
    break;

  case 1112:

/* Line 1806 of yacc.c  */
#line 7876 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_le_creator; }
    break;

  case 1113:

/* Line 1806 of yacc.c  */
#line 7877 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
    break;

  case 1114:

/* Line 1806 of yacc.c  */
#line 7878 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
    break;

  case 1115:

/* Line 1806 of yacc.c  */
#line 7882 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1116:

/* Line 1806 of yacc.c  */
#line 7883 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1122:

/* Line 1806 of yacc.c  */
#line 7893 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_string((yyvsp[(3) - (3)].lex_str).str,
                                                      (yyvsp[(3) - (3)].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[(1) - (3)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1127:

/* Line 1806 of yacc.c  */
#line 7909 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_concat((yyvsp[(1) - (3)].item), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1128:

/* Line 1806 of yacc.c  */
#line 7915 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1129:

/* Line 1806 of yacc.c  */
#line 7919 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1130:

/* Line 1806 of yacc.c  */
#line 7925 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_bit_neg((yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1131:

/* Line 1806 of yacc.c  */
#line 7931 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= negate_expression(YYTHD, (yyvsp[(2) - (2)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1132:

/* Line 1806 of yacc.c  */
#line 7937 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            (yyval.item)= new (YYTHD->mem_root) Item_singlerow_subselect((yyvsp[(2) - (3)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1133:

/* Line 1806 of yacc.c  */
#line 7943 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (3)].item); }
    break;

  case 1134:

/* Line 1806 of yacc.c  */
#line 7945 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(4) - (5)].item_list)->push_front((yyvsp[(2) - (5)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(4) - (5)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1135:

/* Line 1806 of yacc.c  */
#line 7952 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(5) - (6)].item_list)->push_front((yyvsp[(3) - (6)].item));
            (yyval.item)= new (YYTHD->mem_root) Item_row(*(yyvsp[(5) - (6)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1136:

/* Line 1806 of yacc.c  */
#line 7959 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_exists_subselect((yyvsp[(3) - (4)].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1137:

/* Line 1806 of yacc.c  */
#line 7965 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(3) - (4)].item); }
    break;

  case 1138:

/* Line 1806 of yacc.c  */
#line 7967 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (7)].item_list)->push_front((yyvsp[(5) - (7)].item));
            Item_func_match *i1= new (YYTHD->mem_root) Item_func_match(*(yyvsp[(2) - (7)].item_list), (yyvsp[(6) - (7)].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
    break;

  case 1139:

/* Line 1806 of yacc.c  */
#line 7976 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(2) - (2)].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1140:

/* Line 1806 of yacc.c  */
#line 7983 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1141:

/* Line 1806 of yacc.c  */
#line 7991 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_case(* (yyvsp[(3) - (5)].item_list), (yyvsp[(2) - (5)].item), (yyvsp[(4) - (5)].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1142:

/* Line 1806 of yacc.c  */
#line 7997 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= create_func_cast(YYTHD, (yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1143:

/* Line 1806 of yacc.c  */
#line 8004 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_conv_charset((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1144:

/* Line 1806 of yacc.c  */
#line 8010 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if ((yyvsp[(3) - (4)].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[(3) - (4)].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1145:

/* Line 1806 of yacc.c  */
#line 8024 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1146:

/* Line 1806 of yacc.c  */
#line 8032 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(5) - (5)].item),(yyvsp[(2) - (5)].item),(yyvsp[(3) - (5)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1147:

/* Line 1806 of yacc.c  */
#line 8047 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1148:

/* Line 1806 of yacc.c  */
#line 8053 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_char(*(yyvsp[(3) - (6)].item_list), (yyvsp[(5) - (6)].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1149:

/* Line 1806 of yacc.c  */
#line 8059 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
    break;

  case 1150:

/* Line 1806 of yacc.c  */
#line 8067 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1151:

/* Line 1806 of yacc.c  */
#line 8073 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_dayofmonth((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1152:

/* Line 1806 of yacc.c  */
#line 8079 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_hour((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1153:

/* Line 1806 of yacc.c  */
#line 8085 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_insert((yyvsp[(3) - (10)].item),(yyvsp[(5) - (10)].item),(yyvsp[(7) - (10)].item),(yyvsp[(9) - (10)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1154:

/* Line 1806 of yacc.c  */
#line 8091 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[(5) - (6)].item));
            list->push_front((yyvsp[(3) - (6)].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1155:

/* Line 1806 of yacc.c  */
#line 8106 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(5) - (8)].item));
            (yyvsp[(7) - (8)].item_list)->push_front((yyvsp[(3) - (8)].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[(7) - (8)].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1156:

/* Line 1806 of yacc.c  */
#line 8118 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_left((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1157:

/* Line 1806 of yacc.c  */
#line 8124 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_minute((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1158:

/* Line 1806 of yacc.c  */
#line 8130 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_month((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1159:

/* Line 1806 of yacc.c  */
#line 8136 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_right((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1160:

/* Line 1806 of yacc.c  */
#line 8142 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_second((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1161:

/* Line 1806 of yacc.c  */
#line 8148 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_time_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1162:

/* Line 1806 of yacc.c  */
#line 8154 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_datetime_typecast((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1163:

/* Line 1806 of yacc.c  */
#line 8160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_add_time((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1164:

/* Line 1806 of yacc.c  */
#line 8166 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1165:

/* Line 1806 of yacc.c  */
#line 8172 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1166:

/* Line 1806 of yacc.c  */
#line 8178 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1167:

/* Line 1806 of yacc.c  */
#line 8184 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(6) - (7)].item),(yyvsp[(4) - (7)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1168:

/* Line 1806 of yacc.c  */
#line 8190 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ltrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1169:

/* Line 1806 of yacc.c  */
#line 8196 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_rtrim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1170:

/* Line 1806 of yacc.c  */
#line 8202 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1171:

/* Line 1806 of yacc.c  */
#line 8208 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_trim((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1172:

/* Line 1806 of yacc.c  */
#line 8214 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1173:

/* Line 1806 of yacc.c  */
#line 8222 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_year((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1174:

/* Line 1806 of yacc.c  */
#line 8243 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1175:

/* Line 1806 of yacc.c  */
#line 8250 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1176:

/* Line 1806 of yacc.c  */
#line 8256 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1177:

/* Line 1806 of yacc.c  */
#line 8263 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1178:

/* Line 1806 of yacc.c  */
#line 8270 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1179:

/* Line 1806 of yacc.c  */
#line 8278 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1180:

/* Line 1806 of yacc.c  */
#line 8285 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item),(yyvsp[(6) - (8)].item),(yyvsp[(7) - (8)].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1181:

/* Line 1806 of yacc.c  */
#line 8291 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_extract( (yyvsp[(3) - (6)].interval), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1182:

/* Line 1806 of yacc.c  */
#line 8297 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_format((yyvsp[(3) - (6)].date_time_type), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1183:

/* Line 1806 of yacc.c  */
#line 8303 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1184:

/* Line 1806 of yacc.c  */
#line 8310 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1185:

/* Line 1806 of yacc.c  */
#line 8317 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_locate((yyvsp[(5) - (6)].item),(yyvsp[(3) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1186:

/* Line 1806 of yacc.c  */
#line 8323 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1187:

/* Line 1806 of yacc.c  */
#line 8330 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(3) - (8)].item), (yyvsp[(6) - (8)].item), (yyvsp[(7) - (8)].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1188:

/* Line 1806 of yacc.c  */
#line 8336 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1189:

/* Line 1806 of yacc.c  */
#line 8342 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1190:

/* Line 1806 of yacc.c  */
#line 8348 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1191:

/* Line 1806 of yacc.c  */
#line 8354 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_substr((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1192:

/* Line 1806 of yacc.c  */
#line 8360 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local();
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1193:

/* Line 1806 of yacc.c  */
#line 8378 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (YYTHD->mem_root) Item_func_sysdate_local((yyvsp[(3) - (4)].item));
            else
              (yyval.item)= new (YYTHD->mem_root) Item_func_now_local((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1194:

/* Line 1806 of yacc.c  */
#line 8388 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_date_add_interval((yyvsp[(7) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(3) - (8)].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1195:

/* Line 1806 of yacc.c  */
#line 8394 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_timestamp_diff((yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item),(yyvsp[(3) - (8)].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1196:

/* Line 1806 of yacc.c  */
#line 8400 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1197:

/* Line 1806 of yacc.c  */
#line 8407 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_curtime_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1198:

/* Line 1806 of yacc.c  */
#line 8414 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_now_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1199:

/* Line 1806 of yacc.c  */
#line 8429 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_ascii((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1200:

/* Line 1806 of yacc.c  */
#line 8435 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_charset((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1201:

/* Line 1806 of yacc.c  */
#line 8441 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_coalesce(* (yyvsp[(3) - (4)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1202:

/* Line 1806 of yacc.c  */
#line 8447 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_collation((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1203:

/* Line 1806 of yacc.c  */
#line 8453 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
    break;

  case 1204:

/* Line 1806 of yacc.c  */
#line 8460 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_if((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1205:

/* Line 1806 of yacc.c  */
#line 8466 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_microsecond((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1206:

/* Line 1806 of yacc.c  */
#line 8472 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_mod((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1207:

/* Line 1806 of yacc.c  */
#line 8478 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)=  new (YYTHD->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1208:

/* Line 1806 of yacc.c  */
#line 8484 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[(3) - (4)].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[(3) - (4)].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
    break;

  case 1209:

/* Line 1806 of yacc.c  */
#line 8496 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_func_quarter((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1210:

/* Line 1806 of yacc.c  */
#line 8502 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_repeat((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1211:

/* Line 1806 of yacc.c  */
#line 8508 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_replace((yyvsp[(3) - (8)].item),(yyvsp[(5) - (8)].item),(yyvsp[(7) - (8)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1212:

/* Line 1806 of yacc.c  */
#line 8514 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_round((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1213:

/* Line 1806 of yacc.c  */
#line 8520 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[(3) - (4)].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1214:

/* Line 1806 of yacc.c  */
#line 8532 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_week((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1215:

/* Line 1806 of yacc.c  */
#line 8538 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[(1) - (1)].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
    break;

  case 1216:

/* Line 1806 of yacc.c  */
#line 8554 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_rel((yyvsp[(3) - (6)].item), (yyvsp[(5) - (6)].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
    break;

  case 1217:

/* Line 1806 of yacc.c  */
#line 8560 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
    break;

  case 1218:

/* Line 1806 of yacc.c  */
#line 8567 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
    break;

  case 1219:

/* Line 1806 of yacc.c  */
#line 8574 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
    break;

  case 1220:

/* Line 1806 of yacc.c  */
#line 8581 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
    break;

  case 1221:

/* Line 1806 of yacc.c  */
#line 8588 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
    break;

  case 1222:

/* Line 1806 of yacc.c  */
#line 8595 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD, Item_func_point((yyvsp[(3) - (6)].item),(yyvsp[(5) - (6)].item)));
          }
    break;

  case 1223:

/* Line 1806 of yacc.c  */
#line 8599 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= GEOM_NEW(YYTHD,
                         Item_func_spatial_collection(* (yyvsp[(3) - (4)].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
    break;

  case 1224:

/* Line 1806 of yacc.c  */
#line 8618 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[(1) - (2)].lex_str).str, (yyvsp[(1) - (2)].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
    break;

  case 1225:

/* Line 1806 of yacc.c  */
#line 8637 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_func *builder;
            Item *item= NULL;

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[(1) - (5)].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[(3) - (5)].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[(4) - (5)].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[(1) - (5)].lex_str), (yyvsp[(4) - (5)].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1226:

/* Line 1806 of yacc.c  */
#line 8686 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create(thd, (yyvsp[(1) - (6)].lex_str), (yyvsp[(3) - (6)].lex_str), true, (yyvsp[(5) - (6)].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1227:

/* Line 1806 of yacc.c  */
#line 8718 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= (yyvsp[(1) - (2)].num) | (yyvsp[(2) - (2)].num); }
    break;

  case 1228:

/* Line 1806 of yacc.c  */
#line 8720 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= FT_BOOL; }
    break;

  case 1229:

/* Line 1806 of yacc.c  */
#line 8724 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1230:

/* Line 1806 of yacc.c  */
#line 8725 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= FT_NL; }
    break;

  case 1231:

/* Line 1806 of yacc.c  */
#line 8729 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0;         }
    break;

  case 1232:

/* Line 1806 of yacc.c  */
#line 8730 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= FT_EXPAND; }
    break;

  case 1233:

/* Line 1806 of yacc.c  */
#line 8734 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1234:

/* Line 1806 of yacc.c  */
#line 8735 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1235:

/* Line 1806 of yacc.c  */
#line 8740 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1236:

/* Line 1806 of yacc.c  */
#line 8747 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1237:

/* Line 1806 of yacc.c  */
#line 8755 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[(4) - (4)].lex_str).str)
            {
              (yyvsp[(2) - (4)].item)->is_autogenerated_name= FALSE;
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[(2) - (4)].item)->type() != Item::FIELD_ITEM)
              (yyvsp[(2) - (4)].item)->set_name((yyvsp[(1) - (4)].simple_string), (uint) ((yyvsp[(3) - (4)].simple_string) - (yyvsp[(1) - (4)].simple_string)), YYTHD->charset());
            (yyval.item)= (yyvsp[(2) - (4)].item);
          }
    break;

  case 1238:

/* Line 1806 of yacc.c  */
#line 8781 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1239:

/* Line 1806 of yacc.c  */
#line 8787 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_avg((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1240:

/* Line 1806 of yacc.c  */
#line 8793 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_and((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1241:

/* Line 1806 of yacc.c  */
#line 8799 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_or((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1242:

/* Line 1806 of yacc.c  */
#line 8805 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_xor((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1243:

/* Line 1806 of yacc.c  */
#line 8811 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *item= new (YYTHD->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1244:

/* Line 1806 of yacc.c  */
#line 8820 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1245:

/* Line 1806 of yacc.c  */
#line 8826 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1246:

/* Line 1806 of yacc.c  */
#line 8828 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->in_sum_expr--; }
    break;

  case 1247:

/* Line 1806 of yacc.c  */
#line 8830 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_count(* (yyvsp[(5) - (7)].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1248:

/* Line 1806 of yacc.c  */
#line 8836 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1249:

/* Line 1806 of yacc.c  */
#line 8847 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_min((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1250:

/* Line 1806 of yacc.c  */
#line 8853 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(3) - (4)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1251:

/* Line 1806 of yacc.c  */
#line 8859 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_max((yyvsp[(4) - (5)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1252:

/* Line 1806 of yacc.c  */
#line 8865 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1253:

/* Line 1806 of yacc.c  */
#line 8871 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1254:

/* Line 1806 of yacc.c  */
#line 8877 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_std((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1255:

/* Line 1806 of yacc.c  */
#line 8883 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_variance((yyvsp[(3) - (4)].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1256:

/* Line 1806 of yacc.c  */
#line 8889 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(3) - (4)].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1257:

/* Line 1806 of yacc.c  */
#line 8895 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_sum_sum((yyvsp[(4) - (5)].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1258:

/* Line 1806 of yacc.c  */
#line 8901 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->in_sum_expr++; }
    break;

  case 1259:

/* Line 1806 of yacc.c  */
#line 8905 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (YYTHD->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[(3) - (8)].num), (yyvsp[(5) - (8)].item_list),
                                         sel->gorder_list, (yyvsp[(7) - (8)].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[(5) - (8)].item_list)->empty();
          }
    break;

  case 1260:

/* Line 1806 of yacc.c  */
#line 8919 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1261:

/* Line 1806 of yacc.c  */
#line 8927 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1262:

/* Line 1806 of yacc.c  */
#line 8934 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(1) - (3)].lex_str), (yyvsp[(3) - (3)].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
            lex->set_var_list.push_back(item);
          }
    break;

  case 1263:

/* Line 1806 of yacc.c  */
#line 8944 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_func_get_user_var((yyvsp[(1) - (1)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_RAND);
          }
    break;

  case 1264:

/* Line 1806 of yacc.c  */
#line 8952 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[(3) - (4)].lex_str).str && (yyvsp[(4) - (4)].lex_str).str && check_reserved_words(&(yyvsp[(3) - (4)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(YYTHD, (yyvsp[(2) - (4)].var_type), (yyvsp[(3) - (4)].lex_str), (yyvsp[(4) - (4)].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
    break;

  case 1265:

/* Line 1806 of yacc.c  */
#line 8967 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) = 0; }
    break;

  case 1266:

/* Line 1806 of yacc.c  */
#line 8968 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) = 1; }
    break;

  case 1267:

/* Line 1806 of yacc.c  */
#line 8973 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1268:

/* Line 1806 of yacc.c  */
#line 8978 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.string) = (yyvsp[(2) - (2)].string); }
    break;

  case 1269:

/* Line 1806 of yacc.c  */
#line 8983 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->gorder_list = NULL;
          }
    break;

  case 1270:

/* Line 1806 of yacc.c  */
#line 8987 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->gorder_list= new (YYTHD->mem_root)
                                   SQL_I_List<ORDER>(select->order_list);
            if (select->gorder_list == NULL)
              MYSQL_YYABORT;
            select->order_list.empty();
          }
    break;

  case 1271:

/* Line 1806 of yacc.c  */
#line 8999 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1272:

/* Line 1806 of yacc.c  */
#line 9008 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[(3) - (3)].item);
          }
    break;

  case 1273:

/* Line 1806 of yacc.c  */
#line 9016 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
    break;

  case 1274:

/* Line 1806 of yacc.c  */
#line 9018 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
    break;

  case 1275:

/* Line 1806 of yacc.c  */
#line 9020 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
    break;

  case 1276:

/* Line 1806 of yacc.c  */
#line 9022 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1277:

/* Line 1806 of yacc.c  */
#line 9024 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1278:

/* Line 1806 of yacc.c  */
#line 9026 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1279:

/* Line 1806 of yacc.c  */
#line 9028 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1280:

/* Line 1806 of yacc.c  */
#line 9030 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1281:

/* Line 1806 of yacc.c  */
#line 9032 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_TIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1282:

/* Line 1806 of yacc.c  */
#line 9034 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DATETIME; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
    break;

  case 1283:

/* Line 1806 of yacc.c  */
#line 9036 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
    break;

  case 1284:

/* Line 1806 of yacc.c  */
#line 9040 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item_list)= NULL; }
    break;

  case 1285:

/* Line 1806 of yacc.c  */
#line 9041 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list);}
    break;

  case 1286:

/* Line 1806 of yacc.c  */
#line 9046 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1287:

/* Line 1806 of yacc.c  */
#line 9053 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1288:

/* Line 1806 of yacc.c  */
#line 9060 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(1) - (1)].item_list); }
    break;

  case 1289:

/* Line 1806 of yacc.c  */
#line 9061 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item_list)= (yyvsp[(2) - (3)].item_list); }
    break;

  case 1290:

/* Line 1806 of yacc.c  */
#line 9066 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new (YYTHD->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(1) - (1)].item));
          }
    break;

  case 1291:

/* Line 1806 of yacc.c  */
#line 9073 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (3)].item_list)->push_back((yyvsp[(3) - (3)].item));
            (yyval.item_list)= (yyvsp[(1) - (3)].item_list);
          }
    break;

  case 1292:

/* Line 1806 of yacc.c  */
#line 9080 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1293:

/* Line 1806 of yacc.c  */
#line 9081 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1294:

/* Line 1806 of yacc.c  */
#line 9085 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= NULL; }
    break;

  case 1295:

/* Line 1806 of yacc.c  */
#line 9086 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(2) - (2)].item); }
    break;

  case 1296:

/* Line 1806 of yacc.c  */
#line 9091 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[(2) - (4)].item));
            (yyval.item_list)->push_back((yyvsp[(4) - (4)].item));
          }
    break;

  case 1297:

/* Line 1806 of yacc.c  */
#line 9099 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(3) - (5)].item));
            (yyvsp[(1) - (5)].item_list)->push_back((yyvsp[(5) - (5)].item));
            (yyval.item_list)= (yyvsp[(1) - (5)].item_list);
          }
    break;

  case 1298:

/* Line 1806 of yacc.c  */
#line 9109 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1299:

/* Line 1806 of yacc.c  */
#line 9111 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
              MYSQL_YYABORT;
          }
    break;

  case 1300:

/* Line 1806 of yacc.c  */
#line 9119 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[(1) - (1)].table_list)); }
    break;

  case 1301:

/* Line 1806 of yacc.c  */
#line 9130 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1302:

/* Line 1806 of yacc.c  */
#line 9131 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(3) - (4)].table_list); }
    break;

  case 1303:

/* Line 1806 of yacc.c  */
#line 9137 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.table_list)=(yyvsp[(1) - (1)].table_list); }
    break;

  case 1304:

/* Line 1806 of yacc.c  */
#line 9139 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list)));
          }
    break;

  case 1305:

/* Line 1806 of yacc.c  */
#line 9159 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); }
    break;

  case 1306:

/* Line 1806 of yacc.c  */
#line 9161 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].table_list) && ((yyval.table_list)=(yyvsp[(3) - (3)].table_list))); (yyvsp[(3) - (3)].table_list)->straight=1; }
    break;

  case 1307:

/* Line 1806 of yacc.c  */
#line 9164 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1308:

/* Line 1806 of yacc.c  */
#line 9172 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1309:

/* Line 1806 of yacc.c  */
#line 9179 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (4)].table_list), (yyvsp[(3) - (4)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1310:

/* Line 1806 of yacc.c  */
#line 9187 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(3) - (6)].table_list)->straight=1;
            add_join_on((yyvsp[(3) - (6)].table_list),(yyvsp[(6) - (6)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1311:

/* Line 1806 of yacc.c  */
#line 9195 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && (yyvsp[(3) - (4)].table_list));
          }
    break;

  case 1312:

/* Line 1806 of yacc.c  */
#line 9199 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { add_join_natural((yyvsp[(1) - (8)].table_list),(yyvsp[(3) - (8)].table_list),(yyvsp[(7) - (8)].string_list),Select); (yyval.table_list)=(yyvsp[(3) - (8)].table_list); }
    break;

  case 1313:

/* Line 1806 of yacc.c  */
#line 9201 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (4)].table_list) && ((yyval.table_list)=(yyvsp[(4) - (4)].table_list)));
            add_join_natural((yyvsp[(1) - (4)].table_list),(yyvsp[(4) - (4)].table_list),NULL,Select);
          }
    break;

  case 1314:

/* Line 1806 of yacc.c  */
#line 9209 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1315:

/* Line 1806 of yacc.c  */
#line 9217 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            add_join_on((yyvsp[(5) - (8)].table_list),(yyvsp[(8) - (8)].item));
            Lex->pop_context();
            (yyvsp[(5) - (8)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(5) - (8)].table_list);
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1316:

/* Line 1806 of yacc.c  */
#line 9225 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1317:

/* Line 1806 of yacc.c  */
#line 9229 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            add_join_natural((yyvsp[(1) - (10)].table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select); 
            (yyvsp[(5) - (10)].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[(5) - (10)].table_list); 
          }
    break;

  case 1318:

/* Line 1806 of yacc.c  */
#line 9235 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(1) - (6)].table_list),(yyvsp[(6) - (6)].table_list),NULL,Select);
            (yyvsp[(6) - (6)].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[(6) - (6)].table_list);
          }
    break;

  case 1319:

/* Line 1806 of yacc.c  */
#line 9245 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(5) - (6)].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(YYTHD, (yyvsp[(1) - (6)].table_list), (yyvsp[(5) - (6)].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
    break;

  case 1320:

/* Line 1806 of yacc.c  */
#line 9253 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[(8) - (8)].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1321:

/* Line 1806 of yacc.c  */
#line 9262 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].table_list) && (yyvsp[(5) - (5)].table_list));
          }
    break;

  case 1322:

/* Line 1806 of yacc.c  */
#line 9266 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[(5) - (10)].table_list),(yyvsp[(9) - (10)].string_list),Select);
          }
    break;

  case 1323:

/* Line 1806 of yacc.c  */
#line 9273 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (6)].table_list) && (yyvsp[(6) - (6)].table_list));
            add_join_natural((yyvsp[(6) - (6)].table_list),(yyvsp[(1) - (6)].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
    break;

  case 1324:

/* Line 1806 of yacc.c  */
#line 9283 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1325:

/* Line 1806 of yacc.c  */
#line 9284 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1326:

/* Line 1806 of yacc.c  */
#line 9285 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1327:

/* Line 1806 of yacc.c  */
#line 9297 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
    break;

  case 1328:

/* Line 1806 of yacc.c  */
#line 9302 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyval.table_list)= Select->add_table_to_list(YYTHD, (yyvsp[(2) - (4)].table), (yyvsp[(3) - (4)].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints())))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
    break;

  case 1329:

/* Line 1806 of yacc.c  */
#line 9312 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[(1) - (3)].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[(2) - (3)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
    break;

  case 1330:

/* Line 1806 of yacc.c  */
#line 9352 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[(3) - (5)].table_list) || (yyvsp[(5) - (5)].lex_str_ptr)) && (yyvsp[(2) - (5)].select_lex)->embedding &&
                !(yyvsp[(2) - (5)].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[(3) - (5)].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               new Table_ident(unit), (yyvsp[(5) - (5)].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            else if (((yyvsp[(3) - (5)].table_list)->select_lex &&
                     (yyvsp[(3) - (5)].table_list)->select_lex->master_unit()->is_union()) || (yyvsp[(5) - (5)].lex_str_ptr))
            {
              /* simple nested joins cannot have aliases or unions */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[(3) - (5)].table_list);
            }
          }
    break;

  case 1332:

/* Line 1806 of yacc.c  */
#line 9406 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 1333:

/* Line 1806 of yacc.c  */
#line 9411 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
    break;

  case 1335:

/* Line 1806 of yacc.c  */
#line 9424 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1336:

/* Line 1806 of yacc.c  */
#line 9443 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1337:

/* Line 1806 of yacc.c  */
#line 9451 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1339:

/* Line 1806 of yacc.c  */
#line 9460 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if ((yyvsp[(1) - (1)].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
    break;

  case 1340:

/* Line 1806 of yacc.c  */
#line 9466 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[(1) - (3)].select_lex)->end_nested_join(lex->thd)) && (yyvsp[(3) - (3)].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[(3) - (3)].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1341:

/* Line 1806 of yacc.c  */
#line 9482 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
    break;

  case 1342:

/* Line 1806 of yacc.c  */
#line 9499 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->parsing_place= NO_MATTER;
          }
    break;

  case 1344:

/* Line 1806 of yacc.c  */
#line 9506 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.select_lex)= Select; }
    break;

  case 1345:

/* Line 1806 of yacc.c  */
#line 9511 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
    break;

  case 1346:

/* Line 1806 of yacc.c  */
#line 9536 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1347:

/* Line 1806 of yacc.c  */
#line 9537 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1348:

/* Line 1806 of yacc.c  */
#line 9542 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.num)= old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
    break;

  case 1349:

/* Line 1806 of yacc.c  */
#line 9545 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
    break;

  case 1350:

/* Line 1806 of yacc.c  */
#line 9546 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
    break;

  case 1351:

/* Line 1806 of yacc.c  */
#line 9547 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
    break;

  case 1352:

/* Line 1806 of yacc.c  */
#line 9551 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
    break;

  case 1353:

/* Line 1806 of yacc.c  */
#line 9552 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
    break;

  case 1354:

/* Line 1806 of yacc.c  */
#line 9557 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type((yyvsp[(1) - (3)].index_hint), (yyvsp[(3) - (3)].num));
          }
    break;

  case 1356:

/* Line 1806 of yacc.c  */
#line 9562 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[(3) - (3)].num));
          }
    break;

  case 1361:

/* Line 1806 of yacc.c  */
#line 9575 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->alloc_index_hints(YYTHD); }
    break;

  case 1363:

/* Line 1806 of yacc.c  */
#line 9579 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {  Select->clear_index_hints(); }
    break;

  case 1365:

/* Line 1806 of yacc.c  */
#line 9584 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, NULL, 0); }
    break;

  case 1366:

/* Line 1806 of yacc.c  */
#line 9585 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1367:

/* Line 1806 of yacc.c  */
#line 9590 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length); }
    break;

  case 1368:

/* Line 1806 of yacc.c  */
#line 9592 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->add_index_hint(YYTHD, (char *)"PRIMARY", 7); }
    break;

  case 1371:

/* Line 1806 of yacc.c  */
#line 9602 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
    break;

  case 1372:

/* Line 1806 of yacc.c  */
#line 9613 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            String *s= new (YYTHD->mem_root) String((const char *) (yyvsp[(3) - (3)].lex_str).str,
                                                    (yyvsp[(3) - (3)].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[(1) - (3)].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[(1) - (3)].string_list);
          }
    break;

  case 1373:

/* Line 1806 of yacc.c  */
#line 9625 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1374:

/* Line 1806 of yacc.c  */
#line 9626 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
    break;

  case 1375:

/* Line 1806 of yacc.c  */
#line 9627 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
    break;

  case 1376:

/* Line 1806 of yacc.c  */
#line 9628 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
    break;

  case 1377:

/* Line 1806 of yacc.c  */
#line 9629 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
    break;

  case 1378:

/* Line 1806 of yacc.c  */
#line 9630 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
    break;

  case 1379:

/* Line 1806 of yacc.c  */
#line 9631 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
    break;

  case 1380:

/* Line 1806 of yacc.c  */
#line 9632 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
    break;

  case 1381:

/* Line 1806 of yacc.c  */
#line 9633 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
    break;

  case 1382:

/* Line 1806 of yacc.c  */
#line 9634 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
    break;

  case 1383:

/* Line 1806 of yacc.c  */
#line 9635 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
    break;

  case 1384:

/* Line 1806 of yacc.c  */
#line 9636 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
    break;

  case 1385:

/* Line 1806 of yacc.c  */
#line 9640 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_DAY; }
    break;

  case 1386:

/* Line 1806 of yacc.c  */
#line 9641 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
    break;

  case 1387:

/* Line 1806 of yacc.c  */
#line 9642 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
    break;

  case 1388:

/* Line 1806 of yacc.c  */
#line 9643 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
    break;

  case 1389:

/* Line 1806 of yacc.c  */
#line 9644 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
    break;

  case 1390:

/* Line 1806 of yacc.c  */
#line 9645 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
    break;

  case 1391:

/* Line 1806 of yacc.c  */
#line 9646 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
    break;

  case 1392:

/* Line 1806 of yacc.c  */
#line 9647 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
    break;

  case 1393:

/* Line 1806 of yacc.c  */
#line 9648 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
    break;

  case 1394:

/* Line 1806 of yacc.c  */
#line 9652 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
    break;

  case 1395:

/* Line 1806 of yacc.c  */
#line 9653 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
    break;

  case 1396:

/* Line 1806 of yacc.c  */
#line 9654 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1397:

/* Line 1806 of yacc.c  */
#line 9655 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
    break;

  case 1401:

/* Line 1806 of yacc.c  */
#line 9665 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str_ptr)=0; }
    break;

  case 1402:

/* Line 1806 of yacc.c  */
#line 9667 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[(2) - (2)].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1405:

/* Line 1806 of yacc.c  */
#line 9680 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->where= 0; }
    break;

  case 1406:

/* Line 1806 of yacc.c  */
#line 9682 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_WHERE;
          }
    break;

  case 1407:

/* Line 1806 of yacc.c  */
#line 9686 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *select= Select;
            select->where= (yyvsp[(3) - (3)].item);
            select->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1409:

/* Line 1806 of yacc.c  */
#line 9698 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->parsing_place= IN_HAVING;
          }
    break;

  case 1410:

/* Line 1806 of yacc.c  */
#line 9702 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->having= (yyvsp[(3) - (3)].item);
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[(3) - (3)].item))
              (yyvsp[(3) - (3)].item)->top_level_item();
          }
    break;

  case 1411:

/* Line 1806 of yacc.c  */
#line 9713 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[(2) - (2)].item);
          }
    break;

  case 1412:

/* Line 1806 of yacc.c  */
#line 9718 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string("", 0, &my_charset_latin1) :
                 new (thd->mem_root) Item_string("\\", 1, &my_charset_latin1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1415:

/* Line 1806 of yacc.c  */
#line 9740 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1416:

/* Line 1806 of yacc.c  */
#line 9742 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { if (add_group_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1417:

/* Line 1806 of yacc.c  */
#line 9746 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1418:

/* Line 1806 of yacc.c  */
#line 9748 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
    break;

  case 1419:

/* Line 1806 of yacc.c  */
#line 9768 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
    break;

  case 1423:

/* Line 1806 of yacc.c  */
#line 9802 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            bool ascending= ((yyvsp[(2) - (2)].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[(1) - (2)].item), ascending))
              MYSQL_YYABORT;
          }
    break;

  case 1426:

/* Line 1806 of yacc.c  */
#line 9821 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1428:

/* Line 1806 of yacc.c  */
#line 9856 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(3) - (4)].item),(bool) (yyvsp[(4) - (4)].num))) MYSQL_YYABORT; }
    break;

  case 1429:

/* Line 1806 of yacc.c  */
#line 9858 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { if (add_order_to_list(YYTHD, (yyvsp[(1) - (2)].item),(bool) (yyvsp[(2) - (2)].num))) MYSQL_YYABORT; }
    break;

  case 1430:

/* Line 1806 of yacc.c  */
#line 9862 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) =  1; }
    break;

  case 1431:

/* Line 1806 of yacc.c  */
#line 9863 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) =1; }
    break;

  case 1432:

/* Line 1806 of yacc.c  */
#line 9864 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num) =0; }
    break;

  case 1433:

/* Line 1806 of yacc.c  */
#line 9869 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
          }
    break;

  case 1434:

/* Line 1806 of yacc.c  */
#line 9875 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1435:

/* Line 1806 of yacc.c  */
#line 9879 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1436:

/* Line 1806 of yacc.c  */
#line 9880 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1437:

/* Line 1806 of yacc.c  */
#line 9885 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
    break;

  case 1438:

/* Line 1806 of yacc.c  */
#line 9892 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (1)].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
    break;

  case 1439:

/* Line 1806 of yacc.c  */
#line 9899 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(3) - (3)].item);
            sel->offset_limit= (yyvsp[(1) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1440:

/* Line 1806 of yacc.c  */
#line 9906 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(1) - (3)].item);
            sel->offset_limit= (yyvsp[(3) - (3)].item);
            sel->explicit_limit= 1;
          }
    break;

  case 1441:

/* Line 1806 of yacc.c  */
#line 9916 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          Item_splocal *splocal;
          THD *thd= YYTHD;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable_t *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
    break;

  case 1442:

/* Line 1806 of yacc.c  */
#line 9949 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          ((Item_param *) (yyvsp[(1) - (1)].item))->limit_clause_param= TRUE;
        }
    break;

  case 1443:

/* Line 1806 of yacc.c  */
#line 9953 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1444:

/* Line 1806 of yacc.c  */
#line 9959 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1445:

/* Line 1806 of yacc.c  */
#line 9965 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1446:

/* Line 1806 of yacc.c  */
#line 9974 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
    break;

  case 1447:

/* Line 1806 of yacc.c  */
#line 9979 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[(2) - (2)].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
    break;

  case 1448:

/* Line 1806 of yacc.c  */
#line 9988 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1449:

/* Line 1806 of yacc.c  */
#line 9989 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1450:

/* Line 1806 of yacc.c  */
#line 9990 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1451:

/* Line 1806 of yacc.c  */
#line 9991 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1452:

/* Line 1806 of yacc.c  */
#line 9992 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1453:

/* Line 1806 of yacc.c  */
#line 9993 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1454:

/* Line 1806 of yacc.c  */
#line 9997 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1455:

/* Line 1806 of yacc.c  */
#line 9998 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[(1) - (1)].lex_str).str, (char**) 0, 16); }
    break;

  case 1456:

/* Line 1806 of yacc.c  */
#line 9999 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1457:

/* Line 1806 of yacc.c  */
#line 10000 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1458:

/* Line 1806 of yacc.c  */
#line 10001 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1459:

/* Line 1806 of yacc.c  */
#line 10005 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1460:

/* Line 1806 of yacc.c  */
#line 10006 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1461:

/* Line 1806 of yacc.c  */
#line 10007 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1462:

/* Line 1806 of yacc.c  */
#line 10008 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1463:

/* Line 1806 of yacc.c  */
#line 10009 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1464:

/* Line 1806 of yacc.c  */
#line 10013 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1465:

/* Line 1806 of yacc.c  */
#line 10014 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1466:

/* Line 1806 of yacc.c  */
#line 10015 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, (char**) 0, &error); }
    break;

  case 1467:

/* Line 1806 of yacc.c  */
#line 10016 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { MYSQL_YYABORT; }
    break;

  case 1468:

/* Line 1806 of yacc.c  */
#line 10021 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
    break;

  case 1472:

/* Line 1806 of yacc.c  */
#line 10032 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (YYTHD->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[(2) - (2)].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1474:

/* Line 1806 of yacc.c  */
#line 10062 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1475:

/* Line 1806 of yacc.c  */
#line 10063 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1478:

/* Line 1806 of yacc.c  */
#line 10073 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (add_proc_to_list(thd, (yyvsp[(2) - (3)].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[(2) - (3)].item)->name)
              (yyvsp[(2) - (3)].item)->set_name((yyvsp[(1) - (3)].simple_string), (uint) ((yyvsp[(3) - (3)].simple_string) - (yyvsp[(1) - (3)].simple_string)), thd->charset());
          }
    break;

  case 1479:

/* Line 1806 of yacc.c  */
#line 10084 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
    break;

  case 1480:

/* Line 1806 of yacc.c  */
#line 10090 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1482:

/* Line 1806 of yacc.c  */
#line 10095 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1483:

/* Line 1806 of yacc.c  */
#line 10100 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[(2) - (2)].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1484:

/* Line 1806 of yacc.c  */
#line 10119 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            sp_variable_t *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[(1) - (1)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[(1) - (1)].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
    break;

  case 1485:

/* Line 1806 of yacc.c  */
#line 10151 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1487:

/* Line 1806 of yacc.c  */
#line 10163 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
    break;

  case 1488:

/* Line 1806 of yacc.c  */
#line 10171 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(4) - (4)].charset); }
    break;

  case 1490:

/* Line 1806 of yacc.c  */
#line 10174 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[(2) - (2)].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1491:

/* Line 1806 of yacc.c  */
#line 10186 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
    break;

  case 1492:

/* Line 1806 of yacc.c  */
#line 10197 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
    break;

  case 1493:

/* Line 1806 of yacc.c  */
#line 10203 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->insert_list= (yyvsp[(3) - (3)].item_list);
          }
    break;

  case 1494:

/* Line 1806 of yacc.c  */
#line 10214 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[(2) - (4)].num);
            lex->drop_if_exists= (yyvsp[(4) - (4)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1495:

/* Line 1806 of yacc.c  */
#line 10223 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1496:

/* Line 1806 of yacc.c  */
#line 10224 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1497:

/* Line 1806 of yacc.c  */
#line 10225 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[(3) - (6)].lex_str).str);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(5) - (6)].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 1498:

/* Line 1806 of yacc.c  */
#line 10241 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->drop_if_exists=(yyvsp[(3) - (4)].num);
            lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1499:

/* Line 1806 of yacc.c  */
#line 10248 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[(4) - (6)].lex_str).str && check_db_name(&(yyvsp[(4) - (6)].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(4) - (6)].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (6)].num);
            spname= new sp_name((yyvsp[(4) - (6)].lex_str), (yyvsp[(6) - (6)].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1500:

/* Line 1806 of yacc.c  */
#line 10271 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            spname= new sp_name(db, (yyvsp[(4) - (4)].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
    break;

  case 1501:

/* Line 1806 of yacc.c  */
#line 10292 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1502:

/* Line 1806 of yacc.c  */
#line 10304 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
    break;

  case 1503:

/* Line 1806 of yacc.c  */
#line 10308 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->drop_if_exists= (yyvsp[(3) - (3)].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1504:

/* Line 1806 of yacc.c  */
#line 10316 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1505:

/* Line 1806 of yacc.c  */
#line 10318 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->spname= (yyvsp[(4) - (4)].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
    break;

  case 1506:

/* Line 1806 of yacc.c  */
#line 10324 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            lex->spname= (yyvsp[(4) - (4)].spname);
          }
    break;

  case 1507:

/* Line 1806 of yacc.c  */
#line 10331 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
    break;

  case 1508:

/* Line 1806 of yacc.c  */
#line 10336 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
    break;

  case 1509:

/* Line 1806 of yacc.c  */
#line 10341 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->drop_if_exists= (yyvsp[(3) - (4)].num);
            Lex->server_options.server_name= (yyvsp[(4) - (4)].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[(4) - (4)].lex_str).length;
          }
    break;

  case 1512:

/* Line 1806 of yacc.c  */
#line 10356 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1515:

/* Line 1806 of yacc.c  */
#line 10372 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (1)].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1516:

/* Line 1806 of yacc.c  */
#line 10382 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1517:

/* Line 1806 of yacc.c  */
#line 10383 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1518:

/* Line 1806 of yacc.c  */
#line 10387 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 1519:

/* Line 1806 of yacc.c  */
#line 10388 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 1520:

/* Line 1806 of yacc.c  */
#line 10396 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
    break;

  case 1521:

/* Line 1806 of yacc.c  */
#line 10404 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (5)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1522:

/* Line 1806 of yacc.c  */
#line 10409 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1523:

/* Line 1806 of yacc.c  */
#line 10414 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
    break;

  case 1524:

/* Line 1806 of yacc.c  */
#line 10421 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->set_lock_for_tables((yyvsp[(3) - (4)].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
    break;

  case 1525:

/* Line 1806 of yacc.c  */
#line 10426 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1526:

/* Line 1806 of yacc.c  */
#line 10431 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              If it is SP we do not allow insert optimisation whan result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
#else
            (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
#endif
          }
    break;

  case 1527:

/* Line 1806 of yacc.c  */
#line 10443 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1528:

/* Line 1806 of yacc.c  */
#line 10445 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1529:

/* Line 1806 of yacc.c  */
#line 10452 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE; }
    break;

  case 1530:

/* Line 1806 of yacc.c  */
#line 10456 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= (yyvsp[(1) - (1)].lock_type); }
    break;

  case 1531:

/* Line 1806 of yacc.c  */
#line 10458 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    YYTHD->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
    break;

  case 1532:

/* Line 1806 of yacc.c  */
#line 10468 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1533:

/* Line 1806 of yacc.c  */
#line 10469 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1534:

/* Line 1806 of yacc.c  */
#line 10474 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
    break;

  case 1535:

/* Line 1806 of yacc.c  */
#line 10482 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1536:

/* Line 1806 of yacc.c  */
#line 10483 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1537:

/* Line 1806 of yacc.c  */
#line 10484 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1538:

/* Line 1806 of yacc.c  */
#line 10486 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1540:

/* Line 1806 of yacc.c  */
#line 10496 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1541:

/* Line 1806 of yacc.c  */
#line 10497 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1542:

/* Line 1806 of yacc.c  */
#line 10501 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1543:

/* Line 1806 of yacc.c  */
#line 10502 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1544:

/* Line 1806 of yacc.c  */
#line 10504 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->set_braces(0);}
    break;

  case 1545:

/* Line 1806 of yacc.c  */
#line 10505 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1546:

/* Line 1806 of yacc.c  */
#line 10507 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->set_braces(1);}
    break;

  case 1547:

/* Line 1806 of yacc.c  */
#line 10508 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1552:

/* Line 1806 of yacc.c  */
#line 10523 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[(1) - (3)].item)) ||
                lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1553:

/* Line 1806 of yacc.c  */
#line 10532 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1554:

/* Line 1806 of yacc.c  */
#line 10533 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1555:

/* Line 1806 of yacc.c  */
#line 10537 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1556:

/* Line 1806 of yacc.c  */
#line 10538 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1557:

/* Line 1806 of yacc.c  */
#line 10543 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
    break;

  case 1558:

/* Line 1806 of yacc.c  */
#line 10548 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
    break;

  case 1559:

/* Line 1806 of yacc.c  */
#line 10556 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1561:

/* Line 1806 of yacc.c  */
#line 10562 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1562:

/* Line 1806 of yacc.c  */
#line 10567 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->insert_list->push_back((yyvsp[(1) - (1)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1563:

/* Line 1806 of yacc.c  */
#line 10574 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1564:

/* Line 1806 of yacc.c  */
#line 10576 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1566:

/* Line 1806 of yacc.c  */
#line 10585 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->duplicates= DUP_UPDATE; }
    break;

  case 1568:

/* Line 1806 of yacc.c  */
#line 10593 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
    break;

  case 1569:

/* Line 1806 of yacc.c  */
#line 10601 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[(3) - (7)].lock_type));
          }
    break;

  case 1570:

/* Line 1806 of yacc.c  */
#line 10619 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1573:

/* Line 1806 of yacc.c  */
#line 10629 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_item_to_list(YYTHD, (yyvsp[(1) - (3)].item)) || add_value_to_list(YYTHD, (yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1576:

/* Line 1806 of yacc.c  */
#line 10642 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[(1) - (3)].item)) || 
              lex->value_list.push_back((yyvsp[(3) - (3)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 1577:

/* Line 1806 of yacc.c  */
#line 10651 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1578:

/* Line 1806 of yacc.c  */
#line 10652 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1579:

/* Line 1806 of yacc.c  */
#line 10659 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
    break;

  case 1581:

/* Line 1806 of yacc.c  */
#line 10674 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(2) - (2)].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1582:

/* Line 1806 of yacc.c  */
#line 10683 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1583:

/* Line 1806 of yacc.c  */
#line 10685 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1584:

/* Line 1806 of yacc.c  */
#line 10691 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1585:

/* Line 1806 of yacc.c  */
#line 10696 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
    break;

  case 1586:

/* Line 1806 of yacc.c  */
#line 10702 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
    break;

  case 1589:

/* Line 1806 of yacc.c  */
#line 10715 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1590:

/* Line 1806 of yacc.c  */
#line 10728 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Table_ident *ti= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str), (yyvsp[(3) - (4)].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(YYTHD,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
    break;

  case 1591:

/* Line 1806 of yacc.c  */
#line 10743 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1592:

/* Line 1806 of yacc.c  */
#line 10744 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1593:

/* Line 1806 of yacc.c  */
#line 10748 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1594:

/* Line 1806 of yacc.c  */
#line 10749 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1595:

/* Line 1806 of yacc.c  */
#line 10753 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->options|= OPTION_QUICK; }
    break;

  case 1596:

/* Line 1806 of yacc.c  */
#line 10754 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1597:

/* Line 1806 of yacc.c  */
#line 10755 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1598:

/* Line 1806 of yacc.c  */
#line 10760 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
    break;

  case 1599:

/* Line 1806 of yacc.c  */
#line 10771 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_stmt);
            lex->m_stmt= new (thd->mem_root) Truncate_statement(lex);
            if (lex->m_stmt == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1606:

/* Line 1806 of yacc.c  */
#line 10796 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CPU;
    }
    break;

  case 1607:

/* Line 1806 of yacc.c  */
#line 10800 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
    break;

  case 1608:

/* Line 1806 of yacc.c  */
#line 10804 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
    break;

  case 1609:

/* Line 1806 of yacc.c  */
#line 10808 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
    break;

  case 1610:

/* Line 1806 of yacc.c  */
#line 10812 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
    break;

  case 1611:

/* Line 1806 of yacc.c  */
#line 10816 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_IPC;
    }
    break;

  case 1612:

/* Line 1806 of yacc.c  */
#line 10820 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
    break;

  case 1613:

/* Line 1806 of yacc.c  */
#line 10824 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
    break;

  case 1614:

/* Line 1806 of yacc.c  */
#line 10828 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_options|= PROFILE_ALL;
    }
    break;

  case 1615:

/* Line 1806 of yacc.c  */
#line 10835 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= 0;
    }
    break;

  case 1616:

/* Line 1806 of yacc.c  */
#line 10839 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
      Lex->profile_query_id= atoi((yyvsp[(3) - (3)].lex_str).str);
    }
    break;

  case 1617:

/* Line 1806 of yacc.c  */
#line 10848 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->wild=0;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
    break;

  case 1618:

/* Line 1806 of yacc.c  */
#line 10856 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1619:

/* Line 1806 of yacc.c  */
#line 10861 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(YYTHD, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
    break;

  case 1620:

/* Line 1806 of yacc.c  */
#line 10868 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
    break;

  case 1621:

/* Line 1806 of yacc.c  */
#line 10876 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
    break;

  case 1622:

/* Line 1806 of yacc.c  */
#line 10884 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[(2) - (3)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
    break;

  case 1623:

/* Line 1806 of yacc.c  */
#line 10892 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
             if (prepare_schema_table(YYTHD, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
    break;

  case 1624:

/* Line 1806 of yacc.c  */
#line 10900 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[(3) - (4)].simple_string);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1625:

/* Line 1806 of yacc.c  */
#line 10908 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
    break;

  case 1626:

/* Line 1806 of yacc.c  */
#line 10915 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_info.db_type= (yyvsp[(2) - (3)].db_type); }
    break;

  case 1627:

/* Line 1806 of yacc.c  */
#line 10917 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_info.db_type= NULL; }
    break;

  case 1628:

/* Line 1806 of yacc.c  */
#line 10919 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[(5) - (6)].simple_string))
              (yyvsp[(4) - (6)].table)->change_db((yyvsp[(5) - (6)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(4) - (6)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1629:

/* Line 1806 of yacc.c  */
#line 10928 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
    break;

  case 1630:

/* Line 1806 of yacc.c  */
#line 10932 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
    break;

  case 1631:

/* Line 1806 of yacc.c  */
#line 10936 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
    break;

  case 1633:

/* Line 1806 of yacc.c  */
#line 10941 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
    break;

  case 1635:

/* Line 1806 of yacc.c  */
#line 10946 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[(4) - (5)].simple_string))
              (yyvsp[(3) - (5)].table)->change_db((yyvsp[(4) - (5)].simple_string));
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(3) - (5)].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
    break;

  case 1636:

/* Line 1806 of yacc.c  */
#line 10955 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
    break;

  case 1637:

/* Line 1806 of yacc.c  */
#line 10962 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
    break;

  case 1638:

/* Line 1806 of yacc.c  */
#line 10967 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
    break;

  case 1639:

/* Line 1806 of yacc.c  */
#line 10972 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
    break;

  case 1640:

/* Line 1806 of yacc.c  */
#line 10977 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (void) create_select_for_variable("warning_count"); }
    break;

  case 1641:

/* Line 1806 of yacc.c  */
#line 10979 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (void) create_select_for_variable("error_count"); }
    break;

  case 1642:

/* Line 1806 of yacc.c  */
#line 10981 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
    break;

  case 1643:

/* Line 1806 of yacc.c  */
#line 10983 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
    break;

  case 1644:

/* Line 1806 of yacc.c  */
#line 10985 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
    break;

  case 1645:

/* Line 1806 of yacc.c  */
#line 10987 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(YYTHD, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
    break;

  case 1646:

/* Line 1806 of yacc.c  */
#line 10994 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
    break;

  case 1647:

/* Line 1806 of yacc.c  */
#line 11002 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
    break;

  case 1648:

/* Line 1806 of yacc.c  */
#line 11004 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[(1) - (3)].var_type);
            if (prepare_schema_table(YYTHD, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
    break;

  case 1649:

/* Line 1806 of yacc.c  */
#line 11012 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
    break;

  case 1650:

/* Line 1806 of yacc.c  */
#line 11019 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
    break;

  case 1651:

/* Line 1806 of yacc.c  */
#line 11026 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            LEX_USER *curr_user;
            if (!(curr_user= (LEX_USER*) lex->thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            bzero(curr_user, sizeof(st_lex_user));
            lex->grant_user= curr_user;
          }
    break;

  case 1652:

/* Line 1806 of yacc.c  */
#line 11036 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[(3) - (3)].lex_user);
            lex->grant_user->password=null_lex_str;
          }
    break;

  case 1653:

/* Line 1806 of yacc.c  */
#line 11043 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[(3) - (4)].num);
            Lex->name= (yyvsp[(4) - (4)].lex_str);
          }
    break;

  case 1654:

/* Line 1806 of yacc.c  */
#line 11049 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL,0))
              MYSQL_YYABORT;
            lex->only_view= 0;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
    break;

  case 1655:

/* Line 1806 of yacc.c  */
#line 11058 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(3) - (3)].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
    break;

  case 1656:

/* Line 1806 of yacc.c  */
#line 11066 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
    break;

  case 1657:

/* Line 1806 of yacc.c  */
#line 11070 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
          }
    break;

  case 1658:

/* Line 1806 of yacc.c  */
#line 11074 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1659:

/* Line 1806 of yacc.c  */
#line 11081 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1660:

/* Line 1806 of yacc.c  */
#line 11088 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1661:

/* Line 1806 of yacc.c  */
#line 11094 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1662:

/* Line 1806 of yacc.c  */
#line 11101 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(YYTHD, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
    break;

  case 1663:

/* Line 1806 of yacc.c  */
#line 11108 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1664:

/* Line 1806 of yacc.c  */
#line 11113 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[(3) - (3)].spname);
          }
    break;

  case 1665:

/* Line 1806 of yacc.c  */
#line 11118 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->spname= (yyvsp[(3) - (3)].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
    break;

  case 1666:

/* Line 1806 of yacc.c  */
#line 11126 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
    break;

  case 1667:

/* Line 1806 of yacc.c  */
#line 11128 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
    break;

  case 1668:

/* Line 1806 of yacc.c  */
#line 11130 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
    break;

  case 1673:

/* Line 1806 of yacc.c  */
#line 11144 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.simple_string)= 0; }
    break;

  case 1674:

/* Line 1806 of yacc.c  */
#line 11145 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.simple_string)= (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1675:

/* Line 1806 of yacc.c  */
#line 11149 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->verbose=0; }
    break;

  case 1676:

/* Line 1806 of yacc.c  */
#line 11150 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->verbose=1; }
    break;

  case 1679:

/* Line 1806 of yacc.c  */
#line 11159 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = 0; }
    break;

  case 1680:

/* Line 1806 of yacc.c  */
#line 11160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->mi.log_file_name = (yyvsp[(2) - (2)].lex_str).str; }
    break;

  case 1681:

/* Line 1806 of yacc.c  */
#line 11164 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->mi.pos = 4; /* skip magic number */ }
    break;

  case 1682:

/* Line 1806 of yacc.c  */
#line 11165 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->mi.pos = (yyvsp[(2) - (2)].ulonglong_number); }
    break;

  case 1684:

/* Line 1806 of yacc.c  */
#line 11171 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1685:

/* Line 1806 of yacc.c  */
#line 11178 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Select->where= (yyvsp[(2) - (2)].item);
            if ((yyvsp[(2) - (2)].item))
              (yyvsp[(2) - (2)].item)->top_level_item();
          }
    break;

  case 1686:

/* Line 1806 of yacc.c  */
#line 11188 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(YYTHD, lex, (yyvsp[(2) - (2)].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
    break;

  case 1687:

/* Line 1806 of yacc.c  */
#line 11198 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1688:

/* Line 1806 of yacc.c  */
#line 11200 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_NORMAL; }
    break;

  case 1689:

/* Line 1806 of yacc.c  */
#line 11202 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
    break;

  case 1692:

/* Line 1806 of yacc.c  */
#line 11214 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1693:

/* Line 1806 of yacc.c  */
#line 11215 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_EXTENDED; }
    break;

  case 1694:

/* Line 1806 of yacc.c  */
#line 11216 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->describe|= DESCRIBE_PARTITIONS; }
    break;

  case 1695:

/* Line 1806 of yacc.c  */
#line 11220 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1696:

/* Line 1806 of yacc.c  */
#line 11221 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->wild= (yyvsp[(1) - (1)].string); }
    break;

  case 1697:

/* Line 1806 of yacc.c  */
#line 11223 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->wild= new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,
                                                    (yyvsp[(1) - (1)].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1698:

/* Line 1806 of yacc.c  */
#line 11237 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[(2) - (2)].num);
          }
    break;

  case 1699:

/* Line 1806 of yacc.c  */
#line 11244 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1700:

/* Line 1806 of yacc.c  */
#line 11249 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
    break;

  case 1701:

/* Line 1806 of yacc.c  */
#line 11258 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1702:

/* Line 1806 of yacc.c  */
#line 11259 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1704:

/* Line 1806 of yacc.c  */
#line 11264 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1705:

/* Line 1806 of yacc.c  */
#line 11266 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            TABLE_LIST *tables= Lex->query_tables;
            Lex->type|= REFRESH_READ_LOCK;
            for (; tables; tables= tables->next_global)
            {
              tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
              tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
              tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
            }
          }
    break;

  case 1707:

/* Line 1806 of yacc.c  */
#line 11281 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1708:

/* Line 1806 of yacc.c  */
#line 11286 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ERROR_LOG; }
    break;

  case 1709:

/* Line 1806 of yacc.c  */
#line 11288 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_ENGINE_LOG; }
    break;

  case 1710:

/* Line 1806 of yacc.c  */
#line 11290 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GENERAL_LOG; }
    break;

  case 1711:

/* Line 1806 of yacc.c  */
#line 11292 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLOW_LOG; }
    break;

  case 1712:

/* Line 1806 of yacc.c  */
#line 11294 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_BINARY_LOG; }
    break;

  case 1713:

/* Line 1806 of yacc.c  */
#line 11296 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_RELAY_LOG; }
    break;

  case 1714:

/* Line 1806 of yacc.c  */
#line 11298 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
    break;

  case 1715:

/* Line 1806 of yacc.c  */
#line 11300 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_HOSTS; }
    break;

  case 1716:

/* Line 1806 of yacc.c  */
#line 11302 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_GRANT; }
    break;

  case 1717:

/* Line 1806 of yacc.c  */
#line 11304 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_LOG; }
    break;

  case 1718:

/* Line 1806 of yacc.c  */
#line 11306 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_STATUS; }
    break;

  case 1719:

/* Line 1806 of yacc.c  */
#line 11308 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1720:

/* Line 1806 of yacc.c  */
#line 11310 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1721:

/* Line 1806 of yacc.c  */
#line 11312 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_DES_KEY_FILE; }
    break;

  case 1722:

/* Line 1806 of yacc.c  */
#line 11314 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_USER_RESOURCES; }
    break;

  case 1723:

/* Line 1806 of yacc.c  */
#line 11318 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1724:

/* Line 1806 of yacc.c  */
#line 11319 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1725:

/* Line 1806 of yacc.c  */
#line 11324 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
    break;

  case 1726:

/* Line 1806 of yacc.c  */
#line 11329 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1729:

/* Line 1806 of yacc.c  */
#line 11338 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_SLAVE; }
    break;

  case 1730:

/* Line 1806 of yacc.c  */
#line 11339 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_MASTER; }
    break;

  case 1731:

/* Line 1806 of yacc.c  */
#line 11340 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type|= REFRESH_QUERY_CACHE;}
    break;

  case 1732:

/* Line 1806 of yacc.c  */
#line 11345 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
    break;

  case 1733:

/* Line 1806 of yacc.c  */
#line 11351 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1735:

/* Line 1806 of yacc.c  */
#line 11360 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->to_log = (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1736:

/* Line 1806 of yacc.c  */
#line 11364 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(2) - (2)].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
    break;

  case 1737:

/* Line 1806 of yacc.c  */
#line 11376 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[(3) - (3)].item));
            lex->sql_command= SQLCOM_KILL;
          }
    break;

  case 1738:

/* Line 1806 of yacc.c  */
#line 11385 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1739:

/* Line 1806 of yacc.c  */
#line 11386 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type= 0; }
    break;

  case 1740:

/* Line 1806 of yacc.c  */
#line 11387 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->type= ONLY_KILL_QUERY; }
    break;

  case 1741:

/* Line 1806 of yacc.c  */
#line 11394 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 1742:

/* Line 1806 of yacc.c  */
#line 11405 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[(2) - (2)].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
    break;

  case 1743:

/* Line 1806 of yacc.c  */
#line 11417 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[(5) - (7)].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[(7) - (7)].lex_str).str, 0, (yyvsp[(2) - (7)].filetype))))
              MYSQL_YYABORT;
          }
    break;

  case 1744:

/* Line 1806 of yacc.c  */
#line 11427 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(12) - (12)].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[(4) - (12)].lock_type), MDL_SHARED_WRITE))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
    break;

  case 1745:

/* Line 1806 of yacc.c  */
#line 11437 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->exchange->cs= (yyvsp[(14) - (14)].charset); }
    break;

  case 1746:

/* Line 1806 of yacc.c  */
#line 11441 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1747:

/* Line 1806 of yacc.c  */
#line 11445 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_CSV; }
    break;

  case 1748:

/* Line 1806 of yacc.c  */
#line 11446 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.filetype)= FILETYPE_XML; }
    break;

  case 1749:

/* Line 1806 of yacc.c  */
#line 11450 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=0;}
    break;

  case 1750:

/* Line 1806 of yacc.c  */
#line 11451 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=1;}
    break;

  case 1751:

/* Line 1806 of yacc.c  */
#line 11455 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
    break;

  case 1752:

/* Line 1806 of yacc.c  */
#line 11457 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
#ifdef HAVE_QUERY_CACHE
            /*
              Ignore this option in SP to avoid problem with query cache
            */
            if (Lex->sphead != 0)
              (yyval.lock_type)= TL_WRITE_DEFAULT;
            else
#endif
              (yyval.lock_type)= TL_WRITE_CONCURRENT_INSERT;
          }
    break;

  case 1753:

/* Line 1806 of yacc.c  */
#line 11468 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 1754:

/* Line 1806 of yacc.c  */
#line 11472 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_ERROR; }
    break;

  case 1755:

/* Line 1806 of yacc.c  */
#line 11473 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->duplicates=DUP_REPLACE; }
    break;

  case 1756:

/* Line 1806 of yacc.c  */
#line 11474 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ignore= 1; }
    break;

  case 1761:

/* Line 1806 of yacc.c  */
#line 11489 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1762:

/* Line 1806 of yacc.c  */
#line 11494 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[(4) - (4)].string);
            lex->exchange->opt_enclosed= 1;
          }
    break;

  case 1763:

/* Line 1806 of yacc.c  */
#line 11501 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1764:

/* Line 1806 of yacc.c  */
#line 11506 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1769:

/* Line 1806 of yacc.c  */
#line 11524 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1770:

/* Line 1806 of yacc.c  */
#line 11529 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[(3) - (3)].string);
          }
    break;

  case 1771:

/* Line 1806 of yacc.c  */
#line 11536 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 1772:

/* Line 1806 of yacc.c  */
#line 11538 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->exchange->line_term = (yyvsp[(4) - (4)].string); }
    break;

  case 1774:

/* Line 1806 of yacc.c  */
#line 11543 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[(2) - (3)].lex_str).str);
          }
    break;

  case 1775:

/* Line 1806 of yacc.c  */
#line 11550 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 1776:

/* Line 1806 of yacc.c  */
#line 11552 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { }
    break;

  case 1777:

/* Line 1806 of yacc.c  */
#line 11556 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1778:

/* Line 1806 of yacc.c  */
#line 11557 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1779:

/* Line 1806 of yacc.c  */
#line 11558 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1780:

/* Line 1806 of yacc.c  */
#line 11563 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(3) - (3)].item)); }
    break;

  case 1781:

/* Line 1806 of yacc.c  */
#line 11565 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->field_list.push_back((yyvsp[(1) - (1)].item)); }
    break;

  case 1782:

/* Line 1806 of yacc.c  */
#line 11569 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {(yyval.item)= (yyvsp[(1) - (1)].item);}
    break;

  case 1783:

/* Line 1806 of yacc.c  */
#line 11571 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_user_var_as_out_param((yyvsp[(2) - (2)].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1784:

/* Line 1806 of yacc.c  */
#line 11579 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1785:

/* Line 1806 of yacc.c  */
#line 11580 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1788:

/* Line 1806 of yacc.c  */
#line 11590 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[(1) - (5)].item)) || 
                lex->value_list.push_back((yyvsp[(4) - (5)].item)))
                MYSQL_YYABORT;
            (yyvsp[(4) - (5)].item)->set_name((yyvsp[(3) - (5)].simple_string), (uint) ((yyvsp[(5) - (5)].simple_string) - (yyvsp[(3) - (5)].simple_string)), YYTHD->charset());
          }
    break;

  case 1789:

/* Line 1806 of yacc.c  */
#line 11603 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX_STRING tmp;
            THD *thd= YYTHD;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1790:

/* Line 1806 of yacc.c  */
#line 11627 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (YYTHD->mem_root) Item_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1791:

/* Line 1806 of yacc.c  */
#line 11639 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item_string *str= new (YYTHD->mem_root) Item_string((yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length, (yyvsp[(1) - (2)].charset));
            if (str == NULL)
              MYSQL_YYABORT;
            str->set_repertoire_from_value();
            str->set_cs_specified(TRUE);

            (yyval.item)= str;
          }
    break;

  case 1792:

/* Line 1806 of yacc.c  */
#line 11650 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item_string* item= (Item_string*) (yyvsp[(1) - (2)].item);
            item->append((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= YYTHD->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[(2) - (2)].lex_str).str,
                                                                (yyvsp[(2) - (2)].lex_str).length);
            }
          }
    break;

  case 1793:

/* Line 1806 of yacc.c  */
#line 11669 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.string)= new (YYTHD->mem_root) String((yyvsp[(1) - (1)].lex_str).str,
                                             (yyvsp[(1) - (1)].lex_str).length,
                                             YYTHD->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1794:

/* Line 1806 of yacc.c  */
#line 11677 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1795:

/* Line 1806 of yacc.c  */
#line 11689 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
    break;

  case 1796:

/* Line 1806 of yacc.c  */
#line 11704 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 1797:

/* Line 1806 of yacc.c  */
#line 11724 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1798:

/* Line 1806 of yacc.c  */
#line 11725 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item_num); }
    break;

  case 1799:

/* Line 1806 of yacc.c  */
#line 11727 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyvsp[(2) - (2)].item_num)->max_length++;
            (yyval.item)= (yyvsp[(2) - (2)].item_num)->neg();
          }
    break;

  case 1800:

/* Line 1806 of yacc.c  */
#line 11734 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item); }
    break;

  case 1801:

/* Line 1806 of yacc.c  */
#line 11735 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(1) - (1)].item_num); }
    break;

  case 1802:

/* Line 1806 of yacc.c  */
#line 11737 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
    break;

  case 1803:

/* Line 1806 of yacc.c  */
#line 11744 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1804:

/* Line 1806 of yacc.c  */
#line 11750 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1805:

/* Line 1806 of yacc.c  */
#line 11756 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item) = new (YYTHD->mem_root) Item_hex_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1806:

/* Line 1806 of yacc.c  */
#line 11762 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)= new (YYTHD->mem_root) Item_bin_string((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1807:

/* Line 1806 of yacc.c  */
#line 11768 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_hex_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_repertoire_from_value();
            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1808:

/* Line 1806 of yacc.c  */
#line 11797 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item *tmp= new (YYTHD->mem_root) Item_bin_string((yyvsp[(2) - (2)].lex_str).str, (yyvsp[(2) - (2)].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fieds, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            String *str= tmp->val_str((String*) 0);

            Item_string *item_str;
            item_str= new (YYTHD->mem_root)
                        Item_string(NULL, /* name will be set in select_item */
                                    str ? str->ptr() : "",
                                    str ? str->length() : 0,
                                    (yyvsp[(1) - (2)].charset));
            if (!item_str ||
                !item_str->check_well_formed_result(&item_str->str_value, TRUE))
            {
              MYSQL_YYABORT;
            }

            item_str->set_cs_specified(TRUE);

            (yyval.item)= item_str;
          }
    break;

  case 1809:

/* Line 1806 of yacc.c  */
#line 11824 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1810:

/* Line 1806 of yacc.c  */
#line 11825 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1811:

/* Line 1806 of yacc.c  */
#line 11826 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item) = (yyvsp[(2) - (2)].item); }
    break;

  case 1812:

/* Line 1806 of yacc.c  */
#line 11831 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1813:

/* Line 1806 of yacc.c  */
#line 11841 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            int error;
            (yyval.item_num)= new (YYTHD->mem_root)
                  Item_int((yyvsp[(1) - (1)].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[(1) - (1)].lex_str).str, NULL, &error),
                           (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1814:

/* Line 1806 of yacc.c  */
#line 11851 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_uint((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1815:

/* Line 1806 of yacc.c  */
#line 11857 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_decimal((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length,
                                                   YYTHD->charset());
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1816:

/* Line 1806 of yacc.c  */
#line 11866 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item_num)= new (YYTHD->mem_root) Item_float((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length);
            if (((yyval.item_num) == NULL) || (YYTHD->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
    break;

  case 1817:

/* Line 1806 of yacc.c  */
#line 11880 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1818:

/* Line 1806 of yacc.c  */
#line 11881 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1819:

/* Line 1806 of yacc.c  */
#line 11886 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (YYTHD->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1820:

/* Line 1806 of yacc.c  */
#line 11895 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[(1) - (5)].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
    break;

  case 1821:

/* Line 1806 of yacc.c  */
#line 11910 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 1822:

/* Line 1806 of yacc.c  */
#line 11915 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable_t *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[(1) - (1)].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1823:

/* Line 1806 of yacc.c  */
#line 11961 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1824:

/* Line 1806 of yacc.c  */
#line 11966 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[(1) - (1)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1825:

/* Line 1806 of yacc.c  */
#line 11983 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)= (yyvsp[(1) - (1)].item); }
    break;

  case 1826:

/* Line 1806 of yacc.c  */
#line 11988 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[(1) - (3)].lex_str).str[0]=='N' || (yyvsp[(1) - (3)].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[(3) - (3)].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[(1) - (3)].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[(1) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
    break;

  case 1827:

/* Line 1806 of yacc.c  */
#line 12067 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(2) - (4)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[(2) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1828:

/* Line 1806 of yacc.c  */
#line 12092 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[(1) - (5)].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[(3) - (5)].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[(3) - (5)].lex_str).str, (yyvsp[(5) - (5)].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1829:

/* Line 1806 of yacc.c  */
#line 12122 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1830:

/* Line 1806 of yacc.c  */
#line 12124 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (5)].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[(1) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[(3) - (5)].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(3) - (5)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 1831:

/* Line 1806 of yacc.c  */
#line 12140 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[(1) - (3)].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[(1) - (3)].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 1832:

/* Line 1806 of yacc.c  */
#line 12149 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(2) - (2)].lex_str);}
    break;

  case 1833:

/* Line 1806 of yacc.c  */
#line 12154 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (1)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1834:

/* Line 1806 of yacc.c  */
#line 12160 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (3)].lex_str),(yyvsp[(3) - (3)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1835:

/* Line 1806 of yacc.c  */
#line 12166 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[(2) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1836:

/* Line 1806 of yacc.c  */
#line 12176 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident((yyvsp[(1) - (2)].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1837:

/* Line 1806 of yacc.c  */
#line 12182 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.table)= new Table_ident(YYTHD, (yyvsp[(1) - (4)].lex_str),(yyvsp[(3) - (4)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1838:

/* Line 1806 of yacc.c  */
#line 12191 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(YYTHD, db,(yyvsp[(1) - (1)].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 1839:

/* Line 1806 of yacc.c  */
#line 12200 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str); }
    break;

  case 1840:

/* Line 1806 of yacc.c  */
#line 12202 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[(1) - (1)].lex_str).str,
                                                   (yyvsp[(1) - (1)].lex_str).str+(yyvsp[(1) - (1)].lex_str).length,
                                                   (yyvsp[(1) - (1)].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[(1) - (1)].lex_str).length)
              {
                ErrConvString err((yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1841:

/* Line 1806 of yacc.c  */
#line 12232 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1842:

/* Line 1806 of yacc.c  */
#line 12248 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
    break;

  case 1843:

/* Line 1806 of yacc.c  */
#line 12264 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;

            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[(1) - (1)].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[(1) - (1)].lex_str).str, (yyvsp[(1) - (1)].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
    break;

  case 1844:

/* Line 1806 of yacc.c  */
#line 12280 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1845:

/* Line 1806 of yacc.c  */
#line 12282 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1846:

/* Line 1806 of yacc.c  */
#line 12292 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str); }
    break;

  case 1847:

/* Line 1806 of yacc.c  */
#line 12294 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            (yyval.lex_str).str= thd->strmake((yyvsp[(1) - (1)].symbol).str, (yyvsp[(1) - (1)].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[(1) - (1)].symbol).length;
          }
    break;

  case 1848:

/* Line 1806 of yacc.c  */
#line 12304 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1849:

/* Line 1806 of yacc.c  */
#line 12305 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1850:

/* Line 1806 of yacc.c  */
#line 12306 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_str)=(yyvsp[(1) - (1)].lex_str);}
    break;

  case 1851:

/* Line 1806 of yacc.c  */
#line 12311 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (1)].lex_str);
            (yyval.lex_user)->host.str= (char *) "%";
            (yyval.lex_user)->host.length= 1;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
    break;

  case 1852:

/* Line 1806 of yacc.c  */
#line 12328 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[(1) - (3)].lex_str); (yyval.lex_user)->host=(yyvsp[(3) - (3)].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         USERNAME_CHAR_LENGTH,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            /*
              Convert hostname part of username to lowercase.
              It's OK to use in-place lowercase as long as
              the character set is utf8.
            */
            my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
          }
    break;

  case 1853:

/* Line 1806 of yacc.c  */
#line 12350 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (!((yyval.lex_user)=(LEX_USER*) YYTHD->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            /* 
              empty LEX_USER means current_user and 
              will be handled in the  get_current_user() function
              later
            */
            bzero((yyval.lex_user), sizeof(LEX_USER));
          }
    break;

  case 1854:

/* Line 1806 of yacc.c  */
#line 12364 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1855:

/* Line 1806 of yacc.c  */
#line 12365 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1856:

/* Line 1806 of yacc.c  */
#line 12366 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1857:

/* Line 1806 of yacc.c  */
#line 12367 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1858:

/* Line 1806 of yacc.c  */
#line 12368 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1859:

/* Line 1806 of yacc.c  */
#line 12369 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1860:

/* Line 1806 of yacc.c  */
#line 12370 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1861:

/* Line 1806 of yacc.c  */
#line 12371 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1862:

/* Line 1806 of yacc.c  */
#line 12372 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1863:

/* Line 1806 of yacc.c  */
#line 12373 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1864:

/* Line 1806 of yacc.c  */
#line 12374 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1865:

/* Line 1806 of yacc.c  */
#line 12375 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1866:

/* Line 1806 of yacc.c  */
#line 12376 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1867:

/* Line 1806 of yacc.c  */
#line 12377 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1868:

/* Line 1806 of yacc.c  */
#line 12378 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1869:

/* Line 1806 of yacc.c  */
#line 12379 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1870:

/* Line 1806 of yacc.c  */
#line 12380 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1871:

/* Line 1806 of yacc.c  */
#line 12381 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1872:

/* Line 1806 of yacc.c  */
#line 12382 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1873:

/* Line 1806 of yacc.c  */
#line 12383 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1874:

/* Line 1806 of yacc.c  */
#line 12384 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1875:

/* Line 1806 of yacc.c  */
#line 12385 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1876:

/* Line 1806 of yacc.c  */
#line 12386 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1877:

/* Line 1806 of yacc.c  */
#line 12387 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1878:

/* Line 1806 of yacc.c  */
#line 12388 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1879:

/* Line 1806 of yacc.c  */
#line 12389 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1880:

/* Line 1806 of yacc.c  */
#line 12390 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1881:

/* Line 1806 of yacc.c  */
#line 12391 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1882:

/* Line 1806 of yacc.c  */
#line 12392 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1883:

/* Line 1806 of yacc.c  */
#line 12393 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1884:

/* Line 1806 of yacc.c  */
#line 12394 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1885:

/* Line 1806 of yacc.c  */
#line 12395 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1886:

/* Line 1806 of yacc.c  */
#line 12396 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1887:

/* Line 1806 of yacc.c  */
#line 12397 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1888:

/* Line 1806 of yacc.c  */
#line 12398 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1889:

/* Line 1806 of yacc.c  */
#line 12399 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1890:

/* Line 1806 of yacc.c  */
#line 12400 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1891:

/* Line 1806 of yacc.c  */
#line 12401 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1892:

/* Line 1806 of yacc.c  */
#line 12402 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1893:

/* Line 1806 of yacc.c  */
#line 12403 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1894:

/* Line 1806 of yacc.c  */
#line 12404 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1895:

/* Line 1806 of yacc.c  */
#line 12405 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1896:

/* Line 1806 of yacc.c  */
#line 12406 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1897:

/* Line 1806 of yacc.c  */
#line 12407 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1898:

/* Line 1806 of yacc.c  */
#line 12408 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1899:

/* Line 1806 of yacc.c  */
#line 12409 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1900:

/* Line 1806 of yacc.c  */
#line 12410 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1901:

/* Line 1806 of yacc.c  */
#line 12411 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1902:

/* Line 1806 of yacc.c  */
#line 12412 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1903:

/* Line 1806 of yacc.c  */
#line 12413 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1904:

/* Line 1806 of yacc.c  */
#line 12423 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1905:

/* Line 1806 of yacc.c  */
#line 12424 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1906:

/* Line 1806 of yacc.c  */
#line 12425 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1907:

/* Line 1806 of yacc.c  */
#line 12426 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1908:

/* Line 1806 of yacc.c  */
#line 12427 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1909:

/* Line 1806 of yacc.c  */
#line 12428 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1910:

/* Line 1806 of yacc.c  */
#line 12429 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1911:

/* Line 1806 of yacc.c  */
#line 12430 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1912:

/* Line 1806 of yacc.c  */
#line 12431 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1913:

/* Line 1806 of yacc.c  */
#line 12432 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1914:

/* Line 1806 of yacc.c  */
#line 12433 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1915:

/* Line 1806 of yacc.c  */
#line 12434 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1916:

/* Line 1806 of yacc.c  */
#line 12435 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1917:

/* Line 1806 of yacc.c  */
#line 12436 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1918:

/* Line 1806 of yacc.c  */
#line 12437 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1919:

/* Line 1806 of yacc.c  */
#line 12438 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1920:

/* Line 1806 of yacc.c  */
#line 12439 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1921:

/* Line 1806 of yacc.c  */
#line 12440 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1922:

/* Line 1806 of yacc.c  */
#line 12441 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1923:

/* Line 1806 of yacc.c  */
#line 12442 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1924:

/* Line 1806 of yacc.c  */
#line 12443 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1925:

/* Line 1806 of yacc.c  */
#line 12444 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1926:

/* Line 1806 of yacc.c  */
#line 12445 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1927:

/* Line 1806 of yacc.c  */
#line 12446 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1928:

/* Line 1806 of yacc.c  */
#line 12447 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1929:

/* Line 1806 of yacc.c  */
#line 12448 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1930:

/* Line 1806 of yacc.c  */
#line 12449 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1931:

/* Line 1806 of yacc.c  */
#line 12450 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1932:

/* Line 1806 of yacc.c  */
#line 12451 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1933:

/* Line 1806 of yacc.c  */
#line 12452 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1934:

/* Line 1806 of yacc.c  */
#line 12453 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1935:

/* Line 1806 of yacc.c  */
#line 12454 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1936:

/* Line 1806 of yacc.c  */
#line 12455 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1937:

/* Line 1806 of yacc.c  */
#line 12456 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1938:

/* Line 1806 of yacc.c  */
#line 12457 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1939:

/* Line 1806 of yacc.c  */
#line 12458 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1940:

/* Line 1806 of yacc.c  */
#line 12459 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1941:

/* Line 1806 of yacc.c  */
#line 12460 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1942:

/* Line 1806 of yacc.c  */
#line 12461 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1943:

/* Line 1806 of yacc.c  */
#line 12462 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1944:

/* Line 1806 of yacc.c  */
#line 12463 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1945:

/* Line 1806 of yacc.c  */
#line 12464 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1946:

/* Line 1806 of yacc.c  */
#line 12465 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1947:

/* Line 1806 of yacc.c  */
#line 12466 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1948:

/* Line 1806 of yacc.c  */
#line 12467 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1949:

/* Line 1806 of yacc.c  */
#line 12468 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1950:

/* Line 1806 of yacc.c  */
#line 12469 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1951:

/* Line 1806 of yacc.c  */
#line 12470 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1952:

/* Line 1806 of yacc.c  */
#line 12471 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1953:

/* Line 1806 of yacc.c  */
#line 12472 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1954:

/* Line 1806 of yacc.c  */
#line 12473 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1955:

/* Line 1806 of yacc.c  */
#line 12474 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1956:

/* Line 1806 of yacc.c  */
#line 12475 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1957:

/* Line 1806 of yacc.c  */
#line 12476 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1958:

/* Line 1806 of yacc.c  */
#line 12477 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1959:

/* Line 1806 of yacc.c  */
#line 12478 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1960:

/* Line 1806 of yacc.c  */
#line 12479 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1961:

/* Line 1806 of yacc.c  */
#line 12480 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1962:

/* Line 1806 of yacc.c  */
#line 12481 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1963:

/* Line 1806 of yacc.c  */
#line 12482 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1964:

/* Line 1806 of yacc.c  */
#line 12483 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1965:

/* Line 1806 of yacc.c  */
#line 12484 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1966:

/* Line 1806 of yacc.c  */
#line 12485 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1967:

/* Line 1806 of yacc.c  */
#line 12486 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1968:

/* Line 1806 of yacc.c  */
#line 12487 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1969:

/* Line 1806 of yacc.c  */
#line 12488 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1970:

/* Line 1806 of yacc.c  */
#line 12489 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1971:

/* Line 1806 of yacc.c  */
#line 12490 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1972:

/* Line 1806 of yacc.c  */
#line 12491 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1973:

/* Line 1806 of yacc.c  */
#line 12492 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1974:

/* Line 1806 of yacc.c  */
#line 12493 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1975:

/* Line 1806 of yacc.c  */
#line 12494 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1976:

/* Line 1806 of yacc.c  */
#line 12495 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1977:

/* Line 1806 of yacc.c  */
#line 12496 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1978:

/* Line 1806 of yacc.c  */
#line 12497 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1979:

/* Line 1806 of yacc.c  */
#line 12498 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1980:

/* Line 1806 of yacc.c  */
#line 12499 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1981:

/* Line 1806 of yacc.c  */
#line 12500 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1982:

/* Line 1806 of yacc.c  */
#line 12501 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1983:

/* Line 1806 of yacc.c  */
#line 12502 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1984:

/* Line 1806 of yacc.c  */
#line 12503 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1985:

/* Line 1806 of yacc.c  */
#line 12504 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1986:

/* Line 1806 of yacc.c  */
#line 12505 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1987:

/* Line 1806 of yacc.c  */
#line 12506 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1988:

/* Line 1806 of yacc.c  */
#line 12507 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1989:

/* Line 1806 of yacc.c  */
#line 12508 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1990:

/* Line 1806 of yacc.c  */
#line 12509 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1991:

/* Line 1806 of yacc.c  */
#line 12510 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1992:

/* Line 1806 of yacc.c  */
#line 12511 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1993:

/* Line 1806 of yacc.c  */
#line 12512 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1994:

/* Line 1806 of yacc.c  */
#line 12513 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1995:

/* Line 1806 of yacc.c  */
#line 12514 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1996:

/* Line 1806 of yacc.c  */
#line 12515 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1997:

/* Line 1806 of yacc.c  */
#line 12516 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1998:

/* Line 1806 of yacc.c  */
#line 12517 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 1999:

/* Line 1806 of yacc.c  */
#line 12518 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2000:

/* Line 1806 of yacc.c  */
#line 12519 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2001:

/* Line 1806 of yacc.c  */
#line 12520 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2002:

/* Line 1806 of yacc.c  */
#line 12521 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2003:

/* Line 1806 of yacc.c  */
#line 12522 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2004:

/* Line 1806 of yacc.c  */
#line 12523 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2005:

/* Line 1806 of yacc.c  */
#line 12524 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2006:

/* Line 1806 of yacc.c  */
#line 12525 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2007:

/* Line 1806 of yacc.c  */
#line 12526 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2008:

/* Line 1806 of yacc.c  */
#line 12527 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2009:

/* Line 1806 of yacc.c  */
#line 12528 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2010:

/* Line 1806 of yacc.c  */
#line 12529 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2011:

/* Line 1806 of yacc.c  */
#line 12530 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2012:

/* Line 1806 of yacc.c  */
#line 12531 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2013:

/* Line 1806 of yacc.c  */
#line 12532 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2014:

/* Line 1806 of yacc.c  */
#line 12533 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2015:

/* Line 1806 of yacc.c  */
#line 12534 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2016:

/* Line 1806 of yacc.c  */
#line 12535 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2017:

/* Line 1806 of yacc.c  */
#line 12536 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2018:

/* Line 1806 of yacc.c  */
#line 12537 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2019:

/* Line 1806 of yacc.c  */
#line 12538 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2020:

/* Line 1806 of yacc.c  */
#line 12539 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2021:

/* Line 1806 of yacc.c  */
#line 12540 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2022:

/* Line 1806 of yacc.c  */
#line 12541 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2023:

/* Line 1806 of yacc.c  */
#line 12542 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2024:

/* Line 1806 of yacc.c  */
#line 12543 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2025:

/* Line 1806 of yacc.c  */
#line 12544 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2026:

/* Line 1806 of yacc.c  */
#line 12545 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2027:

/* Line 1806 of yacc.c  */
#line 12546 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2028:

/* Line 1806 of yacc.c  */
#line 12547 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2029:

/* Line 1806 of yacc.c  */
#line 12548 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2030:

/* Line 1806 of yacc.c  */
#line 12549 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2031:

/* Line 1806 of yacc.c  */
#line 12550 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2032:

/* Line 1806 of yacc.c  */
#line 12551 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2033:

/* Line 1806 of yacc.c  */
#line 12552 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2034:

/* Line 1806 of yacc.c  */
#line 12553 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2035:

/* Line 1806 of yacc.c  */
#line 12554 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2036:

/* Line 1806 of yacc.c  */
#line 12555 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2037:

/* Line 1806 of yacc.c  */
#line 12556 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2038:

/* Line 1806 of yacc.c  */
#line 12557 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2039:

/* Line 1806 of yacc.c  */
#line 12558 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2040:

/* Line 1806 of yacc.c  */
#line 12559 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2041:

/* Line 1806 of yacc.c  */
#line 12560 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2042:

/* Line 1806 of yacc.c  */
#line 12561 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2043:

/* Line 1806 of yacc.c  */
#line 12562 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2044:

/* Line 1806 of yacc.c  */
#line 12563 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2045:

/* Line 1806 of yacc.c  */
#line 12564 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2046:

/* Line 1806 of yacc.c  */
#line 12565 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2047:

/* Line 1806 of yacc.c  */
#line 12566 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2048:

/* Line 1806 of yacc.c  */
#line 12567 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2049:

/* Line 1806 of yacc.c  */
#line 12568 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2050:

/* Line 1806 of yacc.c  */
#line 12569 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2051:

/* Line 1806 of yacc.c  */
#line 12570 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2052:

/* Line 1806 of yacc.c  */
#line 12571 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2053:

/* Line 1806 of yacc.c  */
#line 12572 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2054:

/* Line 1806 of yacc.c  */
#line 12573 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2055:

/* Line 1806 of yacc.c  */
#line 12574 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2056:

/* Line 1806 of yacc.c  */
#line 12575 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2057:

/* Line 1806 of yacc.c  */
#line 12576 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2058:

/* Line 1806 of yacc.c  */
#line 12577 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2059:

/* Line 1806 of yacc.c  */
#line 12578 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2060:

/* Line 1806 of yacc.c  */
#line 12579 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2061:

/* Line 1806 of yacc.c  */
#line 12580 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2062:

/* Line 1806 of yacc.c  */
#line 12581 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2063:

/* Line 1806 of yacc.c  */
#line 12582 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2064:

/* Line 1806 of yacc.c  */
#line 12583 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2065:

/* Line 1806 of yacc.c  */
#line 12584 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2066:

/* Line 1806 of yacc.c  */
#line 12585 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2067:

/* Line 1806 of yacc.c  */
#line 12586 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2068:

/* Line 1806 of yacc.c  */
#line 12587 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2069:

/* Line 1806 of yacc.c  */
#line 12588 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2070:

/* Line 1806 of yacc.c  */
#line 12589 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2071:

/* Line 1806 of yacc.c  */
#line 12590 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2072:

/* Line 1806 of yacc.c  */
#line 12591 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2073:

/* Line 1806 of yacc.c  */
#line 12592 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2074:

/* Line 1806 of yacc.c  */
#line 12593 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2075:

/* Line 1806 of yacc.c  */
#line 12594 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2076:

/* Line 1806 of yacc.c  */
#line 12595 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2077:

/* Line 1806 of yacc.c  */
#line 12596 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2078:

/* Line 1806 of yacc.c  */
#line 12597 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2079:

/* Line 1806 of yacc.c  */
#line 12598 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2080:

/* Line 1806 of yacc.c  */
#line 12599 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2081:

/* Line 1806 of yacc.c  */
#line 12600 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2082:

/* Line 1806 of yacc.c  */
#line 12601 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2083:

/* Line 1806 of yacc.c  */
#line 12602 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2084:

/* Line 1806 of yacc.c  */
#line 12603 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2085:

/* Line 1806 of yacc.c  */
#line 12604 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2086:

/* Line 1806 of yacc.c  */
#line 12605 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2087:

/* Line 1806 of yacc.c  */
#line 12606 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2088:

/* Line 1806 of yacc.c  */
#line 12607 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2089:

/* Line 1806 of yacc.c  */
#line 12608 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2090:

/* Line 1806 of yacc.c  */
#line 12609 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2091:

/* Line 1806 of yacc.c  */
#line 12610 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2092:

/* Line 1806 of yacc.c  */
#line 12611 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2093:

/* Line 1806 of yacc.c  */
#line 12612 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2094:

/* Line 1806 of yacc.c  */
#line 12613 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2095:

/* Line 1806 of yacc.c  */
#line 12614 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2096:

/* Line 1806 of yacc.c  */
#line 12615 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2097:

/* Line 1806 of yacc.c  */
#line 12616 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2098:

/* Line 1806 of yacc.c  */
#line 12617 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2099:

/* Line 1806 of yacc.c  */
#line 12618 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2100:

/* Line 1806 of yacc.c  */
#line 12619 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2101:

/* Line 1806 of yacc.c  */
#line 12620 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2102:

/* Line 1806 of yacc.c  */
#line 12621 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2103:

/* Line 1806 of yacc.c  */
#line 12622 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2104:

/* Line 1806 of yacc.c  */
#line 12623 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2105:

/* Line 1806 of yacc.c  */
#line 12624 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2106:

/* Line 1806 of yacc.c  */
#line 12625 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2107:

/* Line 1806 of yacc.c  */
#line 12626 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2108:

/* Line 1806 of yacc.c  */
#line 12627 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2109:

/* Line 1806 of yacc.c  */
#line 12628 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2110:

/* Line 1806 of yacc.c  */
#line 12629 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2111:

/* Line 1806 of yacc.c  */
#line 12630 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2112:

/* Line 1806 of yacc.c  */
#line 12631 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2113:

/* Line 1806 of yacc.c  */
#line 12632 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2114:

/* Line 1806 of yacc.c  */
#line 12633 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2115:

/* Line 1806 of yacc.c  */
#line 12634 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2116:

/* Line 1806 of yacc.c  */
#line 12635 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2117:

/* Line 1806 of yacc.c  */
#line 12636 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2118:

/* Line 1806 of yacc.c  */
#line 12637 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2119:

/* Line 1806 of yacc.c  */
#line 12638 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2120:

/* Line 1806 of yacc.c  */
#line 12639 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2121:

/* Line 1806 of yacc.c  */
#line 12640 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2122:

/* Line 1806 of yacc.c  */
#line 12641 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2123:

/* Line 1806 of yacc.c  */
#line 12642 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2124:

/* Line 1806 of yacc.c  */
#line 12643 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2125:

/* Line 1806 of yacc.c  */
#line 12644 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2126:

/* Line 1806 of yacc.c  */
#line 12645 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2127:

/* Line 1806 of yacc.c  */
#line 12646 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2128:

/* Line 1806 of yacc.c  */
#line 12647 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2129:

/* Line 1806 of yacc.c  */
#line 12648 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2130:

/* Line 1806 of yacc.c  */
#line 12649 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2131:

/* Line 1806 of yacc.c  */
#line 12650 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2132:

/* Line 1806 of yacc.c  */
#line 12651 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2133:

/* Line 1806 of yacc.c  */
#line 12652 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2134:

/* Line 1806 of yacc.c  */
#line 12653 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2135:

/* Line 1806 of yacc.c  */
#line 12654 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2136:

/* Line 1806 of yacc.c  */
#line 12655 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2137:

/* Line 1806 of yacc.c  */
#line 12656 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2138:

/* Line 1806 of yacc.c  */
#line 12657 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2139:

/* Line 1806 of yacc.c  */
#line 12658 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2140:

/* Line 1806 of yacc.c  */
#line 12659 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2141:

/* Line 1806 of yacc.c  */
#line 12660 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2142:

/* Line 1806 of yacc.c  */
#line 12661 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2143:

/* Line 1806 of yacc.c  */
#line 12662 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2144:

/* Line 1806 of yacc.c  */
#line 12663 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2145:

/* Line 1806 of yacc.c  */
#line 12664 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2146:

/* Line 1806 of yacc.c  */
#line 12665 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2147:

/* Line 1806 of yacc.c  */
#line 12666 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2148:

/* Line 1806 of yacc.c  */
#line 12667 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2149:

/* Line 1806 of yacc.c  */
#line 12668 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2150:

/* Line 1806 of yacc.c  */
#line 12669 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2151:

/* Line 1806 of yacc.c  */
#line 12670 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2152:

/* Line 1806 of yacc.c  */
#line 12671 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2153:

/* Line 1806 of yacc.c  */
#line 12672 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2154:

/* Line 1806 of yacc.c  */
#line 12673 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2155:

/* Line 1806 of yacc.c  */
#line 12674 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2156:

/* Line 1806 of yacc.c  */
#line 12675 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2157:

/* Line 1806 of yacc.c  */
#line 12676 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2158:

/* Line 1806 of yacc.c  */
#line 12677 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2159:

/* Line 1806 of yacc.c  */
#line 12678 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2160:

/* Line 1806 of yacc.c  */
#line 12679 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2161:

/* Line 1806 of yacc.c  */
#line 12680 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2162:

/* Line 1806 of yacc.c  */
#line 12681 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2163:

/* Line 1806 of yacc.c  */
#line 12682 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2164:

/* Line 1806 of yacc.c  */
#line 12683 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2165:

/* Line 1806 of yacc.c  */
#line 12684 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2166:

/* Line 1806 of yacc.c  */
#line 12685 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2167:

/* Line 1806 of yacc.c  */
#line 12686 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2168:

/* Line 1806 of yacc.c  */
#line 12687 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2169:

/* Line 1806 of yacc.c  */
#line 12688 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2170:

/* Line 1806 of yacc.c  */
#line 12689 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2171:

/* Line 1806 of yacc.c  */
#line 12690 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2172:

/* Line 1806 of yacc.c  */
#line 12691 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2173:

/* Line 1806 of yacc.c  */
#line 12692 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2174:

/* Line 1806 of yacc.c  */
#line 12693 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2175:

/* Line 1806 of yacc.c  */
#line 12694 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2176:

/* Line 1806 of yacc.c  */
#line 12695 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2177:

/* Line 1806 of yacc.c  */
#line 12696 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2178:

/* Line 1806 of yacc.c  */
#line 12697 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2179:

/* Line 1806 of yacc.c  */
#line 12698 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2180:

/* Line 1806 of yacc.c  */
#line 12699 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2181:

/* Line 1806 of yacc.c  */
#line 12700 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2182:

/* Line 1806 of yacc.c  */
#line 12707 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->one_shot_set= 0;
            lex->autocommit= 0;
          }
    break;

  case 2183:

/* Line 1806 of yacc.c  */
#line 12717 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2184:

/* Line 1806 of yacc.c  */
#line 12721 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2185:

/* Line 1806 of yacc.c  */
#line 12722 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2188:

/* Line 1806 of yacc.c  */
#line 12731 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              /*
                If we are in SP we want have own LEX for each assignment.
                This is mostly because it is hard for several sp_instr_set
                and sp_instr_set_trigger instructions share one LEX.
                (Well, it is theoretically possible but adds some extra
                overhead on preparation for execution stage and IMO less
                robust).

                QQ: May be we should simply prohibit group assignments in SP?
              */
              lex->sphead->reset_lex(thd);
              lex= thd->lex;

              /* Set new LEX as if we at start of set rule. */
              lex->sql_command= SQLCOM_SET_OPTION;
              mysql_init_select(lex);
              lex->option_type=OPT_SESSION;
              lex->var_list.empty();
              lex->one_shot_set= 0;
              lex->autocommit= 0;
              lex->sphead->m_tmp_query= lip->get_tok_start();
            }
          }
    break;

  case 2189:

/* Line 1806 of yacc.c  */
#line 12762 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            if (lex->sphead)
            {
              sp_head *sp= lex->sphead;

              if (!lex->var_list.is_empty())
              {
                /*
                  We have assignment to user or system variable or
                  option setting, so we should construct sp_instr_stmt
                  for it.
                */
                LEX_STRING qbuff;
                sp_instr_stmt *i;

                if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                           lex)))
                  MYSQL_YYABORT;

                /*
                  Extract the query statement from the tokenizer.  The
                  end is either lip->ptr, if there was no lookahead,
                  lip->tok_end otherwise.
                */
                if (yychar == YYEMPTY)
                  qbuff.length= lip->get_ptr() - sp->m_tmp_query;
                else
                  qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

                if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                                    qbuff.length + 5)))
                  MYSQL_YYABORT;

                strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
                        qbuff.length);
                qbuff.length+= 4;
                i->m_query= qbuff;
                if (sp->add_instr(i))
                  MYSQL_YYABORT;
              }
              if (lex->sphead->restore_lex(thd))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2190:

/* Line 1806 of yacc.c  */
#line 12813 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2191:

/* Line 1806 of yacc.c  */
#line 12814 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2192:

/* Line 1806 of yacc.c  */
#line 12815 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2193:

/* Line 1806 of yacc.c  */
#line 12816 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2194:

/* Line 1806 of yacc.c  */
#line 12820 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= OPT_DEFAULT; }
    break;

  case 2195:

/* Line 1806 of yacc.c  */
#line 12821 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->one_shot_set= 1; (yyval.num)= OPT_SESSION; }
    break;

  case 2196:

/* Line 1806 of yacc.c  */
#line 12825 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2197:

/* Line 1806 of yacc.c  */
#line 12826 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2198:

/* Line 1806 of yacc.c  */
#line 12827 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2199:

/* Line 1806 of yacc.c  */
#line 12828 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2200:

/* Line 1806 of yacc.c  */
#line 12832 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_DEFAULT; }
    break;

  case 2201:

/* Line 1806 of yacc.c  */
#line 12833 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_GLOBAL; }
    break;

  case 2202:

/* Line 1806 of yacc.c  */
#line 12834 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2203:

/* Line 1806 of yacc.c  */
#line 12835 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.var_type)=OPT_SESSION; }
    break;

  case 2206:

/* Line 1806 of yacc.c  */
#line 12845 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            LEX_STRING *name= &(yyvsp[(2) - (4)].variable).base_name;

            if ((yyvsp[(2) - (4)].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              if (set_trigger_new_row(YYTHD, name, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[(2) - (4)].variable).var)
            {
              if ((yyvsp[(1) - (4)].var_type))
                lex->option_type= (yyvsp[(1) - (4)].var_type);

              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[(2) - (4)].variable), lex->option_type, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable_t *spv= spc->find_variable(name);

              if ((yyvsp[(1) - (4)].var_type))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[(4) - (4)].item)))
                MYSQL_YYABORT;
            }
          }
    break;

  case 2207:

/* Line 1806 of yacc.c  */
#line 12887 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex=Lex;
            lex->option_type= (yyvsp[(1) - (5)].var_type);
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[(5) - (5)].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2208:

/* Line 1806 of yacc.c  */
#line 12906 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Item_func_set_user_var *item;
            item= new (YYTHD->mem_root) Item_func_set_user_var((yyvsp[(2) - (4)].lex_str), (yyvsp[(4) - (4)].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
    break;

  case 2209:

/* Line 1806 of yacc.c  */
#line 12917 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            struct sys_var_with_base tmp= (yyvsp[(4) - (6)].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[(3) - (6)].var_type), (yyvsp[(6) - (6)].item)))
              MYSQL_YYABORT;
          }
    break;

  case 2210:

/* Line 1806 of yacc.c  */
#line 12930 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[(2) - (2)].charset) ? (yyvsp[(2) - (2)].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2211:

/* Line 1806 of yacc.c  */
#line 12944 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(&names))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
    break;

  case 2212:

/* Line 1806 of yacc.c  */
#line 12959 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[(2) - (3)].charset) ? (yyvsp[(2) - (3)].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[(3) - (3)].charset) ? (yyvsp[(3) - (3)].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
    break;

  case 2213:

/* Line 1806 of yacc.c  */
#line 12978 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(&pw))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->host=null_lex_str;
            user->user.str=thd->security_ctx->user;
            set_var_password *var= new set_var_password(user, (yyvsp[(3) - (3)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2214:

/* Line 1806 of yacc.c  */
#line 13005 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            set_var_password *var= new set_var_password((yyvsp[(3) - (5)].lex_user),(yyvsp[(5) - (5)].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
    break;

  case 2215:

/* Line 1806 of yacc.c  */
#line 13018 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable_t *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable(&(yyvsp[(1) - (1)].lex_str))))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[(1) - (1)].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[(1) - (1)].lex_str);
            }
          }
    break;

  case 2216:

/* Line 1806 of yacc.c  */
#line 13045 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[(1) - (3)].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[(1) - (3)].lex_str).str, "OLD")))
            {
              if ((yyvsp[(1) - (3)].lex_str).str[0]=='O' || (yyvsp[(1) - (3)].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[(3) - (3)].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[(1) - (3)].lex_str);
            }
          }
    break;

  case 2217:

/* Line 1806 of yacc.c  */
#line 13088 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            sys_var *tmp=find_sys_var(YYTHD, (yyvsp[(3) - (3)].lex_str).str, (yyvsp[(3) - (3)].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[(3) - (3)].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
    break;

  case 2218:

/* Line 1806 of yacc.c  */
#line 13101 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
    break;

  case 2219:

/* Line 1806 of yacc.c  */
#line 13102 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
    break;

  case 2220:

/* Line 1806 of yacc.c  */
#line 13103 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
    break;

  case 2221:

/* Line 1806 of yacc.c  */
#line 13104 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
    break;

  case 2222:

/* Line 1806 of yacc.c  */
#line 13108 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.simple_string)=(yyvsp[(1) - (1)].lex_str).str;}
    break;

  case 2223:

/* Line 1806 of yacc.c  */
#line 13110 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? YYTHD->variables.old_passwords ?
              Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              Item_func_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str, (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2224:

/* Line 1806 of yacc.c  */
#line 13119 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.simple_string)= (yyvsp[(3) - (4)].lex_str).length ? Item_func_old_password::alloc(YYTHD, (yyvsp[(3) - (4)].lex_str).str,
                                                          (yyvsp[(3) - (4)].lex_str).length) :
              (yyvsp[(3) - (4)].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2225:

/* Line 1806 of yacc.c  */
#line 13130 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)=(yyvsp[(1) - (1)].item); }
    break;

  case 2226:

/* Line 1806 of yacc.c  */
#line 13131 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.item)=0; }
    break;

  case 2227:

/* Line 1806 of yacc.c  */
#line 13133 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ON",  2, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2228:

/* Line 1806 of yacc.c  */
#line 13139 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("ALL", 3, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2229:

/* Line 1806 of yacc.c  */
#line 13145 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.item)=new (YYTHD->mem_root) Item_string("binary", 6, system_charset_info);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
    break;

  case 2230:

/* Line 1806 of yacc.c  */
#line 13156 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
    break;

  case 2231:

/* Line 1806 of yacc.c  */
#line 13167 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2236:

/* Line 1806 of yacc.c  */
#line 13182 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[(3) - (3)].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(YYTHD, (yyvsp[(1) - (3)].table), (yyvsp[(2) - (3)].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
    break;

  case 2237:

/* Line 1806 of yacc.c  */
#line 13194 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ_NO_INSERT; }
    break;

  case 2238:

/* Line 1806 of yacc.c  */
#line 13195 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_DEFAULT; }
    break;

  case 2239:

/* Line 1806 of yacc.c  */
#line 13196 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
    break;

  case 2240:

/* Line 1806 of yacc.c  */
#line 13197 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= TL_READ; }
    break;

  case 2241:

/* Line 1806 of yacc.c  */
#line 13202 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
    break;

  case 2242:

/* Line 1806 of yacc.c  */
#line 13213 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2243:

/* Line 1806 of yacc.c  */
#line 13222 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (4)].table), (yyvsp[(4) - (4)].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
    break;

  case 2244:

/* Line 1806 of yacc.c  */
#line 13234 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2245:

/* Line 1806 of yacc.c  */
#line 13246 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (YYTHD->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(2) - (3)].table), 0, 0))
              MYSQL_YYABORT;
          }
    break;

  case 2246:

/* Line 1806 of yacc.c  */
#line 13265 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
    break;

  case 2247:

/* Line 1806 of yacc.c  */
#line 13278 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ident= null_lex_str; }
    break;

  case 2248:

/* Line 1806 of yacc.c  */
#line 13279 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ident= (yyvsp[(1) - (2)].lex_str); }
    break;

  case 2249:

/* Line 1806 of yacc.c  */
#line 13283 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2250:

/* Line 1806 of yacc.c  */
#line 13284 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2251:

/* Line 1806 of yacc.c  */
#line 13288 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RFIRST; }
    break;

  case 2252:

/* Line 1806 of yacc.c  */
#line 13289 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RNEXT;  }
    break;

  case 2253:

/* Line 1806 of yacc.c  */
#line 13290 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RPREV;  }
    break;

  case 2254:

/* Line 1806 of yacc.c  */
#line 13291 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->ha_read_mode = RLAST;  }
    break;

  case 2255:

/* Line 1806 of yacc.c  */
#line 13293 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[(1) - (1)].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
    break;

  case 2256:

/* Line 1806 of yacc.c  */
#line 13301 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2257:

/* Line 1806 of yacc.c  */
#line 13305 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
    break;

  case 2258:

/* Line 1806 of yacc.c  */
#line 13306 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
    break;

  case 2259:

/* Line 1806 of yacc.c  */
#line 13307 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
    break;

  case 2260:

/* Line 1806 of yacc.c  */
#line 13308 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
    break;

  case 2261:

/* Line 1806 of yacc.c  */
#line 13309 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
    break;

  case 2262:

/* Line 1806 of yacc.c  */
#line 13316 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2263:

/* Line 1806 of yacc.c  */
#line 13321 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
    break;

  case 2264:

/* Line 1806 of yacc.c  */
#line 13327 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2265:

/* Line 1806 of yacc.c  */
#line 13338 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2266:

/* Line 1806 of yacc.c  */
#line 13349 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
    break;

  case 2267:

/* Line 1806 of yacc.c  */
#line 13353 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (5)].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2268:

/* Line 1806 of yacc.c  */
#line 13363 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2269:

/* Line 1806 of yacc.c  */
#line 13369 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
    break;

  case 2270:

/* Line 1806 of yacc.c  */
#line 13376 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
    break;

  case 2271:

/* Line 1806 of yacc.c  */
#line 13388 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
    break;

  case 2272:

/* Line 1806 of yacc.c  */
#line 13399 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[(3) - (6)].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
    break;

  case 2275:

/* Line 1806 of yacc.c  */
#line 13413 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2276:

/* Line 1806 of yacc.c  */
#line 13415 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
    break;

  case 2281:

/* Line 1806 of yacc.c  */
#line 13433 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->which_columns = SELECT_ACL;}
    break;

  case 2282:

/* Line 1806 of yacc.c  */
#line 13434 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2283:

/* Line 1806 of yacc.c  */
#line 13436 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->which_columns = INSERT_ACL;}
    break;

  case 2284:

/* Line 1806 of yacc.c  */
#line 13437 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2285:

/* Line 1806 of yacc.c  */
#line 13439 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->which_columns = UPDATE_ACL; }
    break;

  case 2286:

/* Line 1806 of yacc.c  */
#line 13440 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2287:

/* Line 1806 of yacc.c  */
#line 13442 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->which_columns = REFERENCES_ACL;}
    break;

  case 2288:

/* Line 1806 of yacc.c  */
#line 13443 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2289:

/* Line 1806 of yacc.c  */
#line 13444 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= DELETE_ACL;}
    break;

  case 2290:

/* Line 1806 of yacc.c  */
#line 13445 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2291:

/* Line 1806 of yacc.c  */
#line 13446 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= INDEX_ACL;}
    break;

  case 2292:

/* Line 1806 of yacc.c  */
#line 13447 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_ACL;}
    break;

  case 2293:

/* Line 1806 of yacc.c  */
#line 13448 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_ACL;}
    break;

  case 2294:

/* Line 1806 of yacc.c  */
#line 13449 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= DROP_ACL;}
    break;

  case 2295:

/* Line 1806 of yacc.c  */
#line 13450 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= EXECUTE_ACL;}
    break;

  case 2296:

/* Line 1806 of yacc.c  */
#line 13451 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= RELOAD_ACL;}
    break;

  case 2297:

/* Line 1806 of yacc.c  */
#line 13452 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= SHUTDOWN_ACL;}
    break;

  case 2298:

/* Line 1806 of yacc.c  */
#line 13453 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= PROCESS_ACL;}
    break;

  case 2299:

/* Line 1806 of yacc.c  */
#line 13454 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= FILE_ACL;}
    break;

  case 2300:

/* Line 1806 of yacc.c  */
#line 13455 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2301:

/* Line 1806 of yacc.c  */
#line 13456 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_DB_ACL;}
    break;

  case 2302:

/* Line 1806 of yacc.c  */
#line 13457 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= SUPER_ACL;}
    break;

  case 2303:

/* Line 1806 of yacc.c  */
#line 13458 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TMP_ACL;}
    break;

  case 2304:

/* Line 1806 of yacc.c  */
#line 13459 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= LOCK_TABLES_ACL; }
    break;

  case 2305:

/* Line 1806 of yacc.c  */
#line 13460 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= REPL_SLAVE_ACL; }
    break;

  case 2306:

/* Line 1806 of yacc.c  */
#line 13461 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= REPL_CLIENT_ACL; }
    break;

  case 2307:

/* Line 1806 of yacc.c  */
#line 13462 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_VIEW_ACL; }
    break;

  case 2308:

/* Line 1806 of yacc.c  */
#line 13463 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= SHOW_VIEW_ACL; }
    break;

  case 2309:

/* Line 1806 of yacc.c  */
#line 13464 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_PROC_ACL; }
    break;

  case 2310:

/* Line 1806 of yacc.c  */
#line 13465 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= ALTER_PROC_ACL; }
    break;

  case 2311:

/* Line 1806 of yacc.c  */
#line 13466 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_USER_ACL; }
    break;

  case 2312:

/* Line 1806 of yacc.c  */
#line 13467 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= EVENT_ACL;}
    break;

  case 2313:

/* Line 1806 of yacc.c  */
#line 13468 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= TRIGGER_ACL; }
    break;

  case 2314:

/* Line 1806 of yacc.c  */
#line 13469 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
    break;

  case 2315:

/* Line 1806 of yacc.c  */
#line 13473 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2316:

/* Line 1806 of yacc.c  */
#line 13474 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2319:

/* Line 1806 of yacc.c  */
#line 13484 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2320:

/* Line 1806 of yacc.c  */
#line 13494 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2321:

/* Line 1806 of yacc.c  */
#line 13504 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[(2) - (2)].lex_str).str;
          }
    break;

  case 2322:

/* Line 1806 of yacc.c  */
#line 13517 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2323:

/* Line 1806 of yacc.c  */
#line 13532 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[(1) - (3)].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2324:

/* Line 1806 of yacc.c  */
#line 13545 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
    break;

  case 2325:

/* Line 1806 of yacc.c  */
#line 13558 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[(1) - (1)].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
    break;

  case 2326:

/* Line 1806 of yacc.c  */
#line 13570 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2327:

/* Line 1806 of yacc.c  */
#line 13575 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2328:

/* Line 1806 of yacc.c  */
#line 13583 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(1) - (1)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2329:

/* Line 1806 of yacc.c  */
#line 13588 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->users_list.push_back((yyvsp[(3) - (3)].lex_user)))
              MYSQL_YYABORT;
          }
    break;

  case 2330:

/* Line 1806 of yacc.c  */
#line 13596 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.lex_user)=(yyvsp[(1) - (4)].lex_user); (yyvsp[(1) - (4)].lex_user)->password=(yyvsp[(4) - (4)].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[(4) - (4)].lex_str).length)
            {
              if (YYTHD->variables.old_passwords)
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) YYTHD->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[(4) - (4)].lex_str).str, (yyvsp[(4) - (4)].lex_str).length);
                (yyvsp[(1) - (4)].lex_user)->password.str= buff;
                (yyvsp[(1) - (4)].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
    break;

  case 2331:

/* Line 1806 of yacc.c  */
#line 13625 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (5)].lex_user); 
            (yyvsp[(1) - (5)].lex_user)->password= (yyvsp[(5) - (5)].lex_str); 
          }
    break;

  case 2332:

/* Line 1806 of yacc.c  */
#line 13632 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (4)].lex_user);
            (yyvsp[(1) - (4)].lex_user)->plugin= (yyvsp[(4) - (4)].lex_str);
            (yyvsp[(1) - (4)].lex_user)->auth= empty_lex_str;
          }
    break;

  case 2333:

/* Line 1806 of yacc.c  */
#line 13640 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            (yyval.lex_user)= (yyvsp[(1) - (6)].lex_user);
            (yyvsp[(1) - (6)].lex_user)->plugin= (yyvsp[(4) - (6)].lex_str);
            (yyvsp[(1) - (6)].lex_user)->auth= (yyvsp[(6) - (6)].lex_str);
          }
    break;

  case 2334:

/* Line 1806 of yacc.c  */
#line 13648 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.lex_user)= (yyvsp[(1) - (1)].lex_user); (yyvsp[(1) - (1)].lex_user)->password= null_lex_str; }
    break;

  case 2335:

/* Line 1806 of yacc.c  */
#line 13653 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
    break;

  case 2339:

/* Line 1806 of yacc.c  */
#line 13667 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            String *new_str = new (YYTHD->mem_root) String((const char*) (yyvsp[(1) - (1)].lex_str).str,(yyvsp[(1) - (1)].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.ptr(), new_str->ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
    break;

  case 2341:

/* Line 1806 of yacc.c  */
#line 13696 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
    break;

  case 2342:

/* Line 1806 of yacc.c  */
#line 13700 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
    break;

  case 2343:

/* Line 1806 of yacc.c  */
#line 13704 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
    break;

  case 2344:

/* Line 1806 of yacc.c  */
#line 13708 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
    break;

  case 2345:

/* Line 1806 of yacc.c  */
#line 13714 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2347:

/* Line 1806 of yacc.c  */
#line 13719 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2348:

/* Line 1806 of yacc.c  */
#line 13720 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2349:

/* Line 1806 of yacc.c  */
#line 13724 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2350:

/* Line 1806 of yacc.c  */
#line 13725 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2351:

/* Line 1806 of yacc.c  */
#line 13729 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->grant |= GRANT_ACL;}
    break;

  case 2352:

/* Line 1806 of yacc.c  */
#line 13731 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
    break;

  case 2353:

/* Line 1806 of yacc.c  */
#line 13737 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
    break;

  case 2354:

/* Line 1806 of yacc.c  */
#line 13743 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
    break;

  case 2355:

/* Line 1806 of yacc.c  */
#line 13749 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[(2) - (2)].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
    break;

  case 2356:

/* Line 1806 of yacc.c  */
#line 13758 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
    break;

  case 2357:

/* Line 1806 of yacc.c  */
#line 13763 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2358:

/* Line 1806 of yacc.c  */
#line 13767 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2359:

/* Line 1806 of yacc.c  */
#line 13768 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2360:

/* Line 1806 of yacc.c  */
#line 13773 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2361:

/* Line 1806 of yacc.c  */
#line 13774 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2362:

/* Line 1806 of yacc.c  */
#line 13775 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2363:

/* Line 1806 of yacc.c  */
#line 13780 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
    break;

  case 2364:

/* Line 1806 of yacc.c  */
#line 13781 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_YES; }
    break;

  case 2365:

/* Line 1806 of yacc.c  */
#line 13782 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.m_yes_no_unk)= TVL_NO; }
    break;

  case 2366:

/* Line 1806 of yacc.c  */
#line 13786 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2367:

/* Line 1806 of yacc.c  */
#line 13787 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2368:

/* Line 1806 of yacc.c  */
#line 13792 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2369:

/* Line 1806 of yacc.c  */
#line 13804 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[(3) - (4)].m_yes_no_unk) != TVL_YES || (yyvsp[(4) - (4)].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[(3) - (4)].m_yes_no_unk);
            lex->tx_release= (yyvsp[(4) - (4)].m_yes_no_unk);
          }
    break;

  case 2370:

/* Line 1806 of yacc.c  */
#line 13814 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2371:

/* Line 1806 of yacc.c  */
#line 13823 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[(2) - (2)].lex_str);
          }
    break;

  case 2372:

/* Line 1806 of yacc.c  */
#line 13832 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[(3) - (3)].lex_str);
          }
    break;

  case 2373:

/* Line 1806 of yacc.c  */
#line 13845 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2375:

/* Line 1806 of yacc.c  */
#line 13851 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(2) - (2)].num), TRUE))
              MYSQL_YYABORT;
          }
    break;

  case 2376:

/* Line 1806 of yacc.c  */
#line 13856 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
    break;

  case 2377:

/* Line 1806 of yacc.c  */
#line 13866 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 0; }
    break;

  case 2378:

/* Line 1806 of yacc.c  */
#line 13867 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2379:

/* Line 1806 of yacc.c  */
#line 13868 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)= 1; }
    break;

  case 2382:

/* Line 1806 of yacc.c  */
#line 13877 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
    break;

  case 2383:

/* Line 1806 of yacc.c  */
#line 13893 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
    break;

  case 2386:

/* Line 1806 of yacc.c  */
#line 13906 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2387:

/* Line 1806 of yacc.c  */
#line 13907 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=1; }
    break;

  case 2388:

/* Line 1806 of yacc.c  */
#line 13908 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { (yyval.num)=0; }
    break;

  case 2389:

/* Line 1806 of yacc.c  */
#line 13913 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2390:

/* Line 1806 of yacc.c  */
#line 13917 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
    break;

  case 2392:

/* Line 1806 of yacc.c  */
#line 13926 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[(3) - (3)].num), FALSE))
              MYSQL_YYABORT;
          }
    break;

  case 2393:

/* Line 1806 of yacc.c  */
#line 13932 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[(1) - (6)].select_lex);
          }
    break;

  case 2394:

/* Line 1806 of yacc.c  */
#line 13941 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { 
            (yyval.select_lex)= (yyvsp[(2) - (3)].select_lex);
          }
    break;

  case 2395:

/* Line 1806 of yacc.c  */
#line 13947 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
    break;

  case 2396:

/* Line 1806 of yacc.c  */
#line 13968 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;
          }
    break;

  case 2401:

/* Line 1806 of yacc.c  */
#line 13996 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->options|= SELECT_STRAIGHT_JOIN; }
    break;

  case 2402:

/* Line 1806 of yacc.c  */
#line 13998 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
    break;

  case 2403:

/* Line 1806 of yacc.c  */
#line 14005 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->options|= SELECT_DISTINCT; }
    break;

  case 2404:

/* Line 1806 of yacc.c  */
#line 14006 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->options|= SELECT_SMALL_RESULT; }
    break;

  case 2405:

/* Line 1806 of yacc.c  */
#line 14007 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->options|= SELECT_BIG_RESULT; }
    break;

  case 2406:

/* Line 1806 of yacc.c  */
#line 14009 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
    break;

  case 2407:

/* Line 1806 of yacc.c  */
#line 14015 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
    break;

  case 2408:

/* Line 1806 of yacc.c  */
#line 14020 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Select->options|= SELECT_ALL; }
    break;

  case 2409:

/* Line 1806 of yacc.c  */
#line 14031 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2410:

/* Line 1806 of yacc.c  */
#line 14033 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2411:

/* Line 1806 of yacc.c  */
#line 14035 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2425:

/* Line 1806 of yacc.c  */
#line 14068 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            YYTHD->lex->definer= 0;
          }
    break;

  case 2426:

/* Line 1806 of yacc.c  */
#line 14082 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            YYTHD->lex->definer= get_current_user(YYTHD, (yyvsp[(3) - (3)].lex_user));
          }
    break;

  case 2427:

/* Line 1806 of yacc.c  */
#line 14095 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2428:

/* Line 1806 of yacc.c  */
#line 14097 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2429:

/* Line 1806 of yacc.c  */
#line 14099 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2430:

/* Line 1806 of yacc.c  */
#line 14104 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_mode= VIEW_CREATE_OR_REPLACE; }
    break;

  case 2431:

/* Line 1806 of yacc.c  */
#line 14109 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_UNDEFINED; }
    break;

  case 2432:

/* Line 1806 of yacc.c  */
#line 14111 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
    break;

  case 2433:

/* Line 1806 of yacc.c  */
#line 14113 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
    break;

  case 2434:

/* Line 1806 of yacc.c  */
#line 14118 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
    break;

  case 2435:

/* Line 1806 of yacc.c  */
#line 14120 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
    break;

  case 2436:

/* Line 1806 of yacc.c  */
#line 14122 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
    break;

  case 2437:

/* Line 1806 of yacc.c  */
#line 14127 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[(3) - (3)].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
    break;

  case 2439:

/* Line 1806 of yacc.c  */
#line 14144 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2441:

/* Line 1806 of yacc.c  */
#line 14150 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(1) - (1)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2442:

/* Line 1806 of yacc.c  */
#line 14155 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[(3) - (3)].lex_str), sizeof(LEX_STRING)));
            }
    break;

  case 2443:

/* Line 1806 of yacc.c  */
#line 14162 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
    break;

  case 2444:

/* Line 1806 of yacc.c  */
#line 14171 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
    break;

  case 2447:

/* Line 1806 of yacc.c  */
#line 14193 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_NONE; }
    break;

  case 2448:

/* Line 1806 of yacc.c  */
#line 14195 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2449:

/* Line 1806 of yacc.c  */
#line 14197 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
    break;

  case 2450:

/* Line 1806 of yacc.c  */
#line 14199 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
    break;

  case 2451:

/* Line 1806 of yacc.c  */
#line 14216 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
    break;

  case 2452:

/* Line 1806 of yacc.c  */
#line 14222 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
    break;

  case 2453:

/* Line 1806 of yacc.c  */
#line 14227 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $15 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[(3) - (14)].spname));
            lex->stmt_definition_begin= (yyvsp[(2) - (14)].simple_string);
            lex->ident.str= (yyvsp[(7) - (14)].simple_string);
            lex->ident.length= (yyvsp[(11) - (14)].simple_string) - (yyvsp[(7) - (14)].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[(3) - (14)].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
    break;

  case 2454:

/* Line 1806 of yacc.c  */
#line 14257 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(YYTHD);
            sp->restore_thd_mem_root(YYTHD);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(YYTHD, (yyvsp[(9) - (16)].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
    break;

  case 2455:

/* Line 1806 of yacc.c  */
#line 14291 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(4) - (8)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(4) - (8)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[(2) - (8)].simple_string);
            lex->udf.name = (yyvsp[(4) - (8)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(6) - (8)].num);
            lex->udf.dl=(yyvsp[(8) - (8)].lex_str).str;
          }
    break;

  case 2456:

/* Line 1806 of yacc.c  */
#line 14309 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[(3) - (7)].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[(3) - (7)].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[(1) - (7)].simple_string);
            lex->udf.name = (yyvsp[(3) - (7)].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[(5) - (7)].num);
            lex->udf.dl=(yyvsp[(7) - (7)].lex_str).str;
          }
    break;

  case 2457:

/* Line 1806 of yacc.c  */
#line 14332 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $5 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[(1) - (4)].simple_string);
            lex->spname= (yyvsp[(3) - (4)].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2458:

/* Line 1806 of yacc.c  */
#line 14364 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
    break;

  case 2459:

/* Line 1806 of yacc.c  */
#line 14368 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
          }
    break;

  case 2460:

/* Line 1806 of yacc.c  */
#line 14376 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[(11) - (11)].num) == MYSQL_TYPE_STRING || (yyvsp[(11) - (11)].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(YYTHD, lex,
                                          (enum enum_field_types) (yyvsp[(11) - (11)].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2461:

/* Line 1806 of yacc.c  */
#line 14399 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { /* $14 */
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
    break;

  case 2462:

/* Line 1806 of yacc.c  */
#line 14408 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  MYSQL_ERROR::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
    break;

  case 2463:

/* Line 1806 of yacc.c  */
#line 14464 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[(2) - (3)].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(YYTHD);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(YYTHD, (yyvsp[(3) - (3)].spname));

            lex->sphead= sp;
          }
    break;

  case 2464:

/* Line 1806 of yacc.c  */
#line 14488 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
    break;

  case 2465:

/* Line 1806 of yacc.c  */
#line 14497 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
    break;

  case 2466:

/* Line 1806 of yacc.c  */
#line 14505 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            THD *thd= YYTHD;
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
    break;

  case 2467:

/* Line 1806 of yacc.c  */
#line 14513 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(YYTHD);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(YYTHD);
          }
    break;

  case 2468:

/* Line 1806 of yacc.c  */
#line 14527 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
    break;

  case 2469:

/* Line 1806 of yacc.c  */
#line 14531 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
    break;

  case 2470:

/* Line 1806 of yacc.c  */
#line 14535 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
    break;

  case 2471:

/* Line 1806 of yacc.c  */
#line 14539 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
    break;

  case 2472:

/* Line 1806 of yacc.c  */
#line 14543 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
    break;

  case 2473:

/* Line 1806 of yacc.c  */
#line 14547 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
    break;

  case 2474:

/* Line 1806 of yacc.c  */
#line 14554 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (1)].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (1)].string)->ptr(), (yyvsp[(1) - (1)].string)->length(), 0, 0);
          }
    break;

  case 2475:

/* Line 1806 of yacc.c  */
#line 14561 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (3)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (3)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[(1) - (3)].string)->ptr(), (yyvsp[(1) - (3)].string)->length(), (yyvsp[(3) - (3)].string)->ptr(), (yyvsp[(3) - (3)].string)->length());
          }
    break;

  case 2476:

/* Line 1806 of yacc.c  */
#line 14568 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            MYSQL_YYABORT_UNLESS((yyvsp[(1) - (5)].string)->length() <= MAXGTRIDSIZE && (yyvsp[(3) - (5)].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)YYTHD->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[(5) - (5)].ulong_num), (yyvsp[(1) - (5)].string)->ptr(), (yyvsp[(1) - (5)].string)->length(), (yyvsp[(3) - (5)].string)->ptr(), (yyvsp[(3) - (5)].string)->length());
          }
    break;

  case 2477:

/* Line 1806 of yacc.c  */
#line 14577 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2478:

/* Line 1806 of yacc.c  */
#line 14578 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2479:

/* Line 1806 of yacc.c  */
#line 14582 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2480:

/* Line 1806 of yacc.c  */
#line 14583 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_JOIN;        }
    break;

  case 2481:

/* Line 1806 of yacc.c  */
#line 14584 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_RESUME;      }
    break;

  case 2482:

/* Line 1806 of yacc.c  */
#line 14588 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2483:

/* Line 1806 of yacc.c  */
#line 14589 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_ONE_PHASE;   }
    break;

  case 2484:

/* Line 1806 of yacc.c  */
#line 14594 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_NONE;        }
    break;

  case 2485:

/* Line 1806 of yacc.c  */
#line 14596 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_SUSPEND;     }
    break;

  case 2487:

/* Line 1806 of yacc.c  */
#line 14601 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {}
    break;

  case 2488:

/* Line 1806 of yacc.c  */
#line 14602 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    { Lex->xa_opt=XA_FOR_MIGRATE; }
    break;

  case 2489:

/* Line 1806 of yacc.c  */
#line 14607 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (5)].lex_str);
            lex->ident= (yyvsp[(5) - (5)].lex_str);
          }
    break;

  case 2490:

/* Line 1806 of yacc.c  */
#line 14617 "/home/zy/cryptdb/mysql-src/sql/sql_yacc.yy"
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[(3) - (3)].lex_str);
          }
    break;



/* Line 1806 of yacc.c  */
#line 38173 "/home/zy/cryptdb/mysql-src/build/sql/sql_yacc.cc"
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined(yyoverflow) || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}



